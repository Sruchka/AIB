
// 
//
Функция ПолучитьURLСервисаТекущегоПользователя() Экспорт
	URL = "";
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоступКСпискамИнформационныхБаз.Ссылка,
	|	ДоступКСпискамИнформационныхБаз.ПубликацияВебСервиса,
	|	ПубликацииВебСервисов.СсылкаНаВебСервис
	|ИЗ
	|	Справочник.ДоступКСпискамИнформационныхБаз КАК ДоступКСпискамИнформационныхБаз
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПубликацииВебСервисов КАК ПубликацииВебСервисов
	|		ПО ДоступКСпискамИнформационныхБаз.ПубликацияВебСервиса = ПубликацииВебСервисов.Ссылка
	|ГДЕ
	|	ДоступКСпискамИнформационныхБаз.ClientID = &ClientID";	
	Запрос.УстановитьПараметр("ClientID", СокрЛП(ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор));
	РезультатЗапроса = Запрос.Выполнить();		
	Если НЕ РезультатЗапроса.Пустой() Тогда		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		URL = СтрЗаменить(
				СтрЗаменить(
					СтрЗаменить(Выборка.СсылкаНаВебСервис,
						".1cws?wsdl", ""),						
					"http://", ""),
				"https://", "");
		URL = Сред(URL, Найти(URL, "/")); 
	КонецЕсли;
	Возврат URL; 
КонецФункции

//
//
Функция CheckInfoBases(ClientID, InfoBaseCheckCode, InfoBasesChanged, URL) Экспорт
	
	InfoBasesChanged = Ложь;
	
	Если (ClientID = IDПервогоОбращения() ИЛИ НЕ ЗначениеЗаполнено(ClientID)) И InfoBaseCheckCode = IDПервогоОбращения() Тогда			
		
		URL = ПолучитьURLСервисаТекущегоПользователя();
		InfoBasesChanged = ЗначениеЗаполнено(URL);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоступКСпискамИнформационныхБаз.ClientID,
		|	ДоступКСпискамИнформационныхБаз.ПризнакИзменения
		|ИЗ
		|	Справочник.ДоступКСпискамИнформационныхБаз КАК ДоступКСпискамИнформационныхБаз		
		|ГДЕ
		|	ДоступКСпискамИнформационныхБаз.ClientID ПОДОБНО &ClientID
		|	И НЕ ДоступКСпискамИнформационныхБаз.ПризнакИзменения ПОДОБНО &ПризнакИзменения
		|	И НЕ ДоступКСпискамИнформационныхБаз.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ClientID", ClientID);
		Запрос.УстановитьПараметр("ПризнакИзменения", InfoBaseCheckCode);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда 
			URL = ПолучитьURLСервисаТекущегоПользователя();
			InfoBasesChanged = ЗначениеЗаполнено(URL);
		Иначе 
			InfoBasesChanged = Ложь;
			URL = "";
		КонецЕсли;
		
	КонецЕсли;
	Возврат "";
КонецФункции

//
//
Функция GetInfoBases(ClientID, InfoBaseCheckCode, InfoBases) Экспорт
	
	InfoBases = "";
	
	Если ClientID = IDПервогоОбращения() Тогда
		ClientID = СокрЛП(ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
		InfoBaseCheckCode = IDПервогоОбращения();
		InfoBases = "";
	Иначе 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ		
		|	ДоступКСпискамОбщихИБДоступныеСпискиОбщихИБ.СписокОбщихИБ,
		|	ДоступКСпискамИнформационныхБаз.Ссылка,
		|	ДоступКСпискамИнформационныхБаз.Наименование,
		|	ДоступКСпискамИнформационныхБаз.ClientID,
		|	ДоступКСпискамИнформационныхБаз.ПризнакИзменения
		|ИЗ
		|	Справочник.ДоступКСпискамИнформационныхБаз.ДоступныеСпискиОбщихИБ КАК ДоступКСпискамОбщихИБДоступныеСпискиОбщихИБ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоступКСпискамИнформационныхБаз КАК ДоступКСпискамИнформационныхБаз
		|		ПО ДоступКСпискамОбщихИБДоступныеСпискиОбщихИБ.Ссылка = ДоступКСпискамИнформационныхБаз.Ссылка
		|ГДЕ
		|	ДоступКСпискамИнформационныхБаз.ClientID ПОДОБНО &ClientID
		|	И НЕ ДоступКСпискамИнформационныхБаз.ПризнакИзменения ПОДОБНО &ПризнакИзменения
		|	И НЕ ДоступКСпискамИнформационныхБаз.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ClientID", ClientID);
		Запрос.УстановитьПараметр("ПризнакИзменения", InfoBaseCheckCode);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда 		
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				InfoBaseCheckCode = Выборка.ПризнакИзменения;
				InfoBases = InfoBases + ?(ЗначениеЗаполнено(InfoBases), Символы.ПС, "") + WebСервисWebCommonInfoBases.СформироватьТекстСпискаБаз(Выборка.СписокОбщихИБ);			
			КонецЦикла;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат InfoBases;
КонецФункции

//
//
Функция IDПервогоОбращения()
	Возврат "00000000-0000-0000-0000-000000000000";
КонецФункции

//
//
Функция ПолучитьТекстДляГруппы(ЭлементСпискаБаз)
	Возврат "[" + СокрЛП(ЭлементСпискаБаз.Наименование) + "]
	|ID=" + СокрЛП(ЭлементСпискаБаз.ID) + "
	|OrderInList=" + СокрЛП(ЭлементСпискаБаз.OrderInList) + "
	|Folder=/" + СокрЛП(ЭлементСпискаБаз.Родитель) + "
	|OrderInTree=" + СокрЛП(ЭлементСпискаБаз.OrderInTree) + "
	|External=" + СокрЛП(ЭлементСпискаБаз.External);
КонецФункции

//
//
Функция ПолучитьТекстДляЭлемента(ЭлементСпискаБаз)
	
	лClientConnectionSpeed = Новый Соответствие;
	лClientConnectionSpeed.Вставить(Перечисления.ВидыСкоростиСоединения.ВыбиратьПриЗапуске, "Auto");
	лClientConnectionSpeed.Вставить(Перечисления.ВидыСкоростиСоединения.Обычная, "Normal");
	лClientConnectionSpeed.Вставить(Перечисления.ВидыСкоростиСоединения.Низкая, "Low");
	
	лApp = Новый Соответствие;
	лApp.Вставить(Перечисления.ВидыРежимовЗапуска.ВыбиратьАвтоматически, "Auto");
	лApp.Вставить(Перечисления.ВидыРежимовЗапуска.ТолстыйКлиент, "ThickClient");
	лApp.Вставить(Перечисления.ВидыРежимовЗапуска.ТонкийКлиент, "ThickClient");
	лApp.Вставить(Перечисления.ВидыРежимовЗапуска.ТолстыйКлиент, "ThinClient");
	лApp.Вставить(Перечисления.ВидыРежимовЗапуска.ВебКлиент, "WebClient");
	
	Возврат "[" + ?(ЗначениеЗаполнено(СокрЛП(ЭлементСпискаБаз.Наименование)), СокрЛП(ЭлементСпискаБаз.Наименование), СокрЛП(ЭлементСпискаБаз.ИнформационнаяБаза)) + "]
	|Connect=" + ?(ЗначениеЗаполнено(ЭлементСпискаБаз.WS), "ws=""" + СокрЛП(ЭлементСпискаБаз.WS) + """;", ЗадачиНаСервере.ПолучитьСтрокуПодключенияКИБ(ЭлементСпискаБаз.ИнформационнаяБаза)) + " 
	|ID=" + СокрЛП(ЭлементСпискаБаз.ID) + "
	|OrderInList=" + Формат(СокрЛП(ЭлементСпискаБаз.OrderInList), "ЧГ=0") + "
	|Folder=/" + СокрЛП(ЭлементСпискаБаз.Родитель) + "
	|OrderInTree=" + Формат(СокрЛП(ЭлементСпискаБаз.OrderInTree), "ЧГ=0") + "
	|External=" + СокрЛП(ЭлементСпискаБаз.External) + "
	|ClientConnectionSpeed=" + лClientConnectionSpeed.Получить(ЭлементСпискаБаз.ClientConnectionSpeed) + "
	|App=" + лApp.Получить(ЭлементСпискаБаз.App) + "
	|WA=1
	|Version=" + СокрЛП(ЭлементСпискаБаз.Version) + "
	|AdditionalParameters=" + СокрЛП(ЭлементСпискаБаз.AdditionalParameters);
КонецФункции

//
//
Функция СформироватьТекстСпискаБаз(СписокИнформационныхБаз) Экспорт
	Результат = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлементыСписковИнформационныхБаз.Ссылка КАК Ссылка,
		|	ЭлементыСписковИнформационныхБаз.ВерсияДанных,
		|	ЭлементыСписковИнформационныхБаз.ПометкаУдаления,
		|	ЭлементыСписковИнформационныхБаз.Предопределенный,
		|	ЭлементыСписковИнформационныхБаз.Владелец,
		|	ЭлементыСписковИнформационныхБаз.Родитель,
		|	ЭлементыСписковИнформационныхБаз.ЭтоГруппа КАК ЭтоГруппа,
		|	ЭлементыСписковИнформационныхБаз.Код,
		|	ЭлементыСписковИнформационныхБаз.Наименование КАК Наименование,
		|	ЭлементыСписковИнформационныхБаз.ИнформационнаяБаза,
		|	ЭлементыСписковИнформационныхБаз.ID,
		|	ЭлементыСписковИнформационныхБаз.External,
		|	ЭлементыСписковИнформационныхБаз.ClientConnectionSpeed,
		|	ЭлементыСписковИнформационныхБаз.App,
		|	ЭлементыСписковИнформационныхБаз.Version,
		|	ВЫРАЗИТЬ(ЭлементыСписковИнформационныхБаз.AdditionalParameters КАК СТРОКА(200)) КАК AdditionalParameters,
		|	ЭлементыСписковИнформационныхБаз.OrderInList,
		|	ЭлементыСписковИнформационныхБаз.OrderInTree,
		|	ЭлементыСписковИнформационныхБаз.WS
		|ИЗ
		|	Справочник.ЭлементыСписковИнформационныхБаз КАК ЭлементыСписковИнформационныхБаз
		|ГДЕ
		|	ЭлементыСписковИнформационныхБаз.Владелец = &Владелец
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
	
	Запрос.УстановитьПараметр("Владелец", СписокИнформационныхБаз);
	
	РезультатЗапроса = Запрос.Выполнить();	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.ЭтоГруппа Тогда
				Результат = Результат + ПолучитьТекстДляГруппы(ВыборкаДетальныеЗаписи) + Символы.ПС;
			Иначе 
				Результат = Результат + ПолучитьТекстДляЭлемента(ВыборкаДетальныеЗаписи) + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	Возврат Результат;
КонецФункции
