
//
//
Функция ПолучитьСкриптЗапускаСлужбыRAS(Сервер, РелизыТехнологическойПлатформы) Экспорт
	
	ПараметрыЗаполнения = Новый Структура("УчетнаяЗаписьДляЗапускаСлужбыИмя, УчетнаяЗаписьДляЗапускаСлужбыПароль, КластерПорт, АгентИмя, RasПорт, ВерсияПлатформы",
	"", "", Формат(Сервер.ПортКластера, "ЧГ=0"), "localhost", Формат(Сервер.ПортСервераАдминистрирования, "ЧГ=0"), РелизыТехнологическойПлатформы.Наименование);	
	
	Возврат ОбщегоНазначенияСервер.ЗаполнитьШаблонПараметрами(ПолучитьОбщийМакет("RASRegBat").ПолучитьТекст(), ПараметрыЗаполнения);
	
КонецФункции

//
//
Функция СуществуютИсполняемыеФайлыRASRAC(ПараметрыОбработки) Экспорт 
	
	ФайлRAS = Новый Файл(МенеджерRAS.ПолучитьРасположениеRAS(ПараметрыОбработки, Ложь));
	ФайлRAC = Новый Файл(МенеджерRAS.ПолучитьРасположениеRAС(ПараметрыОбработки, Ложь));
	Возврат ФайлRAS.Существует() И ФайлRAC.Существует();
	
КонецФункции

//
//
Функция ПолучитьРасположениеRAS(ПараметрыОбработки, ДополнятьКавычками = Истина) Экспорт
	Кавычки = ?(ДополнятьКавычками, """", "");
	Возврат Кавычки + ОбщегоНазначенияСервер.ДополнитьЗначениеСимволомСправа(ПараметрыОбработки.ИнформационнаяБаза.РелизТехнологическойПлатформы.Каталог, "\") + "ras.exe" + Кавычки;	
	
КонецФункции

//
//
Функция ПолучитьРасположениеRAС(ПараметрыОбработки, ДополнятьКавычками = Истина) Экспорт
	Кавычки = ?(ДополнятьКавычками, """", "");
	Возврат Кавычки + ОбщегоНазначенияСервер.ДополнитьЗначениеСимволомСправа(ПараметрыОбработки.ИнформационнаяБаза.РелизТехнологическойПлатформы.Каталог, "\") + "rac.exe" + Кавычки;	
	
КонецФункции

//
//
Функция ПолучитьСтрокуПараметровСлужбы(ПараметрыОбработки) Экспорт
	
	Возврат ПараметрыОбработки.ИнформационнаяБаза.СерверИБ.Наименование + ":"  +  Формат(ПараметрыОбработки.ИнформационнаяБаза.СерверИБ.ПортСервераАдминистрирования, "ЧГ=0");
	
КонецФункции

//
//
Функция ПодготовитьИмяПараметра(Значение) Экспорт
	
	Результат = СокрЛП(Значение);
	
	СписокЗамены = Новый Соответствие();
	СписокЗамены.Вставить("-", "_");
	
	Для Каждого ТекущийЭлементЗамены Из СписокЗамены Цикл
		Результат = СтрЗаменить(Результат, ТекущийЭлементЗамены.Ключ, ТекущийЭлементЗамены.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//
//
Функция ПолучитьПараметрыСервераАдминистрирования(ПараметрыОбработки) Экспорт
	
	Возврат МенеджерRAS.ПолучитьРасположениеRAS(ПараметрыОбработки) + " " + МенеджерRAS.ПолучитьСтрокуПараметровСлужбы(ПараметрыОбработки);
	
КонецФункции

//
//
Функция ПолучитьПараметрыКлиентаАдминистрирования(ПараметрыОбработки) Экспорт
	
	Возврат МенеджерRAS.ПолучитьРасположениеRAС(ПараметрыОбработки) + " " + МенеджерRAS.ПолучитьСтрокуПараметровСлужбы(ПараметрыОбработки);
	
КонецФункции

//
//
Функция ПолучитьКомандуУправленияКластером(ПараметрыОбработки) Экспорт
	
	Возврат МенеджерRAS.ПолучитьПараметрыКлиентаАдминистрирования(ПараметрыОбработки) + " cluster";
	
КонецФункции

//
//
Функция ПолучитьПараметрыАутентификации(Пользователь, ПрефиксЛогина, ПрефиксПароля) Экспорт
	
	ПараметрыАутентификации = "";
	Если ЗначениеЗаполнено(Пользователь) Тогда
		ИнформационнаяБазаПользователь = ОбщегоНазначенияСервер.ПолучитьДанныеПоОбъекту(Пользователь);
		ПараметрыАутентификации = " --" + ПрефиксЛогина + "=""" + ИнформационнаяБазаПользователь.Наименование + """ --" + ПрефиксПароля + "=""" + ИнформационнаяБазаПользователь.Пароль + """";
	КонецЕсли;
	Возврат ПараметрыАутентификации;
	
КонецФункции

//
//
Функция ПолучитьПараметрыАутентификацииСервера(Сервер) Экспорт
		
	Возврат МенеджерRAS.ПолучитьПараметрыАутентификации(Сервер.Пользователь, "cluster-user", "cluster-pwd");
	
КонецФункции

//
//
Функция ПолучитьПараметрыАутентификацииИБ(ИнформационнаяБаза) Экспорт
	
	Возврат МенеджерRAS.ПолучитьПараметрыАутентификации(ИнформационнаяБаза.Пользователь, "infobase-user", "infobase-pwd");
	
КонецФункции

//
//
Функция ПолучитьКомандуУправленияБазами(ПараметрыОбработки, ИдКластера) Экспорт
	
	Возврат МенеджерRAS.ПолучитьПараметрыКлиентаАдминистрирования(ПараметрыОбработки) + " infobase --cluster=" + ИдКластера + " " + МенеджерRAS.ПолучитьПараметрыАутентификацииСервера(ПараметрыОбработки.ИнформационнаяБаза.СерверИБ);
	
КонецФункции

//
//
Функция ПолучитьКомандуОбновленияБазы(ПараметрыОбработки, ИдКластера, ИдБазы) Экспорт
		
	Возврат МенеджерRAS.ПолучитьКомандуУправленияБазами(ПараметрыОбработки, ИдКластера) + " update --infobase=" + ИдБазы + " " + МенеджерRAS.ПолучитьПараметрыАутентификацииИБ(ПараметрыОбработки.ИнформационнаяБаза);
	
КонецФункции

//
//
Функция ПолучитьКомандуДетальнойИнформацииПоБазеКластера(ПараметрыОбработки, ИдКластера, ИдБазы) Экспорт
	
	ИнформационнаяБазаПользователь = ПараметрыОбработки.ИнформационнаяБаза.Пользователь;
	Возврат МенеджерRAS.ПолучитьКомандуУправленияБазами(ПараметрыОбработки, ИдКластера) + " info --infobase=" + ИдБазы + " " + МенеджерRAS.ПолучитьПараметрыАутентификацииИБ(ПараметрыОбработки.ИнформационнаяБаза);
	
КонецФункции

//
//
Функция ПолучитьКомандуПолученияВерсииRAS(ПараметрыОбработки) Экспорт
	
	Возврат МенеджерRAS.ПолучитьКомандуУправленияКластером(ПараметрыОбработки) + " --version";
	
КонецФункции

//
//
Функция ПолучитьКомандуИнформацииОКластере(ПараметрыОбработки) Экспорт
	
	Возврат МенеджерRAS.ПолучитьКомандуУправленияКластером(ПараметрыОбработки) + " list";
	
КонецФункции

//
//
Функция ПолучитьКомандуОбщейИнформацииПоБазамКластера(ПараметрыОбработки, ИдКластера) Экспорт
	
	Возврат МенеджерRAS.ПолучитьКомандуУправленияБазами(ПараметрыОбработки, ИдКластера) + " summary list";
	
КонецФункции

//
//
Функция ПолучитьКомандуУстновкиБлокировкиРегламентныхЗаданий(ПараметрыОбработки, ИдКластера, ИдБазы, Блокировка) Экспорт
		
	Возврат МенеджерRAS.ПолучитьКомандуОбновленияБазы(ПараметрыОбработки, ИдКластера, ИдБазы) + " --scheduled-jobs-deny=" + ?(Блокировка, "on", "off");
	
КонецФункции

//
//
Функция ПолучитьКомандуУстановкиБлокировкиСеансов(ПараметрыОбработки, ИдКластера, ИдБазы, Блокировка, ДатаНачалаБлокировки = Неопределено, ДатаОкончанияБлокировки = Неопределено, КодБлокировкиСеансов = Неопределено, СообщениеБлокировки = "Scheduled maintenance") Экспорт
	
	КлючОперацииБлокировки = " --sessions-deny=" + ?(Блокировка, "on", "off");
	КлючНачалаБлокировки = " --denied-from=""" + ?(ЗначениеЗаполнено(ДатаНачалаБлокировки), Формат(ДатаНачалаБлокировки, "ДФ=yyyy-MM-ddTHH:mm:ss"), "") + """";
	КлючОкончанияБлокировки = " --denied-from=""" + ?(ЗначениеЗаполнено(ДатаОкончанияБлокировки), Формат(ДатаОкончанияБлокировки, "ДФ=yyyy-MM-ddTHH:mm:ss"), "") + """";	
	КлючБлокировкиСеансов = " --permission-code=""" + ?(ЗначениеЗаполнено(КодБлокировкиСеансов), КодБлокировкиСеансов, "") + """";
	КлючСообщенияБлокировки = " --denied-message=""" + МенеджерRAS.ТекстВКодировке(?(ЗначениеЗаполнено(СообщениеБлокировки), СообщениеБлокировки, ""), КодировкаТекста.ANSI) + """";	
	
	Возврат МенеджерRAS.ПолучитьКомандуОбновленияБазы(ПараметрыОбработки, ИдКластера, ИдБазы) 
		+ КлючОперацииБлокировки
		+ КлючНачалаБлокировки 
		+ КлючОкончанияБлокировки
		+ КлючБлокировкиСеансов 
		+ КлючСообщенияБлокировки;
	
КонецФункции

//
//
Функция ПолучитьДанныеИзВременногоФайла(ПолноИмяВременногоФайла) Экспорт
	
	Результат = Неопределено;
	
	Попытка
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ПолноИмяВременногоФайла);
		Результат = ТекстовыйДокумент.ПолучитьТекст();
		УдалитьФайлы(ПолноИмяВременногоФайла);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

//
//
Функция ПодготовитьКоманду(ПараметрыОбработки, Команда,  ПолноИмяВременногоФайлаРезультата = Неопределено) Экспорт
	
	Возврат "cmd /a /c" +  " ""chcp 1251 && " + Команда + ?(ПолноИмяВременногоФайлаРезультата = Неопределено, "", " > """ + ПолноИмяВременногоФайлаРезультата + """") + """";
	
КонецФункции

//
//
Функция ВыполнитьКоманду(ПараметрыОбработки, Команда, ПолноИмяВременногоФайлаРезультата = Неопределено) Экспорт	
	
	Результат = Ложь;	
	ДанныеСоединенияИнформационнойБазы = ОбщегоНазначенияСервер.РаспарситьСтрокуСоединенияИнформационнойБазы(СтрокаСоединенияИнформационнойБазы());	
	//Если ПараметрыОбработки.ИнформационнаяБаза.ТипИБ = Перечисления.ТипыИБ.Серверная И ОбщегоНазначенияСервер.ПолучитьЗначениеСвойства(ДанныеСоединенияИнформационнойБазы, "Srvr") = ПараметрыОбработки.ИнформационнаяБаза.СерверИБ Тогда
	Если ПараметрыОбработки.ИнформационнаяБаза.ТипИБ = Перечисления.ТипыИБ.Серверная Тогда		
		КодВозврата = 0;
		ПодготовленнаяКоманда = МенеджерRAS.ПодготовитьКоманду(ПараметрыОбработки, Команда, ПолноИмяВременногоФайлаРезультата);				
		ЗадачиНаСервере.ЗапуститьПриложениеСервер(ПараметрыОбработки, ПодготовленнаяКоманда, КодВозврата);		
		Результат = (КодВозврата = 0);		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//
//
Функция ВыполнитьКомандуСРезультатом(ПараметрыОбработки, Команда) Экспорт	
	
	Результат = Неопределено;	
	
	ПолноИмяВременногоФайлаРезультата = ОбщегоНазначенияСервер.ПолучитьПолноеИмяВременногоФайла();	
	Если МенеджерRAS.ВыполнитьКоманду(ПараметрыОбработки, Команда, ПолноИмяВременногоФайлаРезультата) Тогда
		Результат = МенеджерRAS.ПолучитьДанныеИзВременногоФайла(ПолноИмяВременногоФайлаРезультата);
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

//
//
Функция РаспарситьВерсиюСервераАдминистрированияRAS(РезультатКоманды) Экспорт
	
	Результат = Неопределено;	
	
	Если НЕ РезультатКоманды = Неопределено Тогда
		ДанныеРезультата = ОбщегоНазначенияСервер.РазложитьСтрокуВМассивПодстрок(РезультатКоманды, Символы.ПС);
		Результат = СокрЛП(ОбщегоНазначенияСервер.ПолучитьЭлементМассива(ДанныеРезультата, 0));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//
//
Функция ПолучитьВерсиюСервераАдминистрированияRAS(ПараметрыОбработки) Экспорт
	
	Результат = Неопределено;
	
	РезультатКоманды = МенеджерRAS.ВыполнитьКомандуСРезультатом(ПараметрыОбработки, МенеджерRAS.ПолучитьКомандуПолученияВерсииRAS(ПараметрыОбработки));
	Результат = МенеджерRAS.РаспарситьВерсиюСервераАдминистрированияRAS(РезультатКоманды);
	
	Возврат Результат;
	
КонецФункции

//
//
Функция ИнтерпретироватьЗначение(Значение)
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("on", Истина);
	Соответствие.Вставить("off", Ложь);
	Соответствие.Вставить("no", Ложь);
	
	Результат = Соответствие.Получить(Значение);
	Результат = ?(Результат = Неопределено, Значение, Результат);
	
	Возврат Результат;
	
КонецФункции

//
//
функция РаспарситьИнформацию(РезультатКоманды) Экспорт
	Результат = Неопределено;
	
	Если НЕ РезультатКоманды = Неопределено Тогда
		ДанныеРезультата = ОбщегоНазначенияСервер.РазложитьСтрокуВМассивПодстрок(РезультатКоманды, Символы.ПС);
		Результат = Новый Структура;
		Для Каждого ТекущаяСтрока Из ДанныеРезультата Цикл			
			ДанныеТекущаяСтрока = ОбщегоНазначенияСервер.РазложитьСтрокуВМассивПодстрок(ТекущаяСтрока, ":");
			Ключ = МенеджерRAS.ПодготовитьИмяПараметра(ДанныеТекущаяСтрока[0]);
			Значение = ИнтерпретироватьЗначение(СокрЛП(ОбщегоНазначенияСервер.ПолучитьЭлементМассива(ДанныеТекущаяСтрока, 1)));
			Результат.Вставить(Ключ, Значение);			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//
//
Функция ПолучитьИнформациюОКластере(ПараметрыОбработки) Экспорт
	
	Результат = Неопределено;
	
	РезультатКоманды = МенеджерRAS.ВыполнитьКомандуСРезультатом(ПараметрыОбработки, МенеджерRAS.ПолучитьКомандуИнформацииОКластере(ПараметрыОбработки));
	Результат = МенеджерRAS.РаспарситьИнформацию(РезультатКоманды);	
	
	Возврат Результат;
	
КонецФункции

//
//
Функция РаспарситьОбщуюИнформациюПоБазамКластера(РезультатКоманды) Экспорт
	
	Результат = Неопределено;
	
	Если НЕ РезультатКоманды = Неопределено Тогда
		ДанныеРезультата = ОбщегоНазначенияСервер.РазложитьСтрокуВМассивПодстрок(РезультатКоманды, Символы.ПС);
		Результат = Новый Структура;
		ТекущийИд = Неопределено;
		ТекущееИмя = Неопределено;
		Для Каждого ТекущаяСтрока Из ДанныеРезультата Цикл									
			Если ЗначениеЗаполнено(СокрЛП(ТекущаяСтрока)) Тогда
				ДанныеТекущаяСтрока = ОбщегоНазначенияСервер.РазложитьСтрокуВМассивПодстрок(ТекущаяСтрока, ":");				
				Ключ = МенеджерRAS.ПодготовитьИмяПараметра(ДанныеТекущаяСтрока[0]);
				Значение = ИнтерпретироватьЗначение(СокрЛП(ОбщегоНазначенияСервер.ПолучитьЭлементМассива(ДанныеТекущаяСтрока, 1)));
				Если Ключ = "infobase" Тогда
					ТекущийИд = Значение;
				ИначеЕсли Ключ = "name" Тогда
					ТекущееИмя = Значение;
					Результат.Вставить(ТекущееИмя, Новый Структура("id, descr", ТекущийИд));
				ИначеЕсли Ключ = "descr" Тогда
					Результат[ТекущееИмя].descr = Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//
//
Функция ПолучитьОбщуюИнформациюПоБазамКластера(ПараметрыОбработки, ИнформацияОКластере = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	ИнформацияОКластере = ?(ИнформацияОКластере = Неопределено, МенеджерRAS.ПолучитьИнформациюОКластере(ПараметрыОбработки), ИнформацияОКластере);
	Если НЕ ИнформацияОКластере = Неопределено Тогда
		РезультатКоманды = МенеджерRAS.ВыполнитьКомандуСРезультатом(ПараметрыОбработки, МенеджерRAS.ПолучитьКомандуОбщейИнформацииПоБазамКластера(ПараметрыОбработки, ИнформацияОКластере.cluster));
		Результат = МенеджерRAS.РаспарситьОбщуюИнформациюПоБазамКластера(РезультатКоманды);	
	КонецЕсли;
	
	Возврат Результат;	
	
КонецФункции

//
//
Функция ПолучитьДетальнуюИнформациюПоБазеКластера(ПараметрыОбработки) Экспорт
	
	Результат = Неопределено;
	
	ИнформацияОКластере = Неопределено;
	ИнформацияПоБазамКластера = МенеджерRAS.ПолучитьОбщуюИнформациюПоБазамКластера(ПараметрыОбработки, ИнформацияОКластере);
	Если НЕ ИнформацияПоБазамКластера = Неопределено Тогда
		РезультатКоманды = МенеджерRAS.ВыполнитьКомандуСРезультатом(ПараметрыОбработки, МенеджерRAS.ПолучитьКомандуДетальнойИнформацииПоБазеКластера(ПараметрыОбработки, ИнформацияОКластере.cluster, ИнформацияПоБазамКластера[ПараметрыОбработки.ИнформационнаяБаза.ИмяКаталогИБ].id));
		Результат = МенеджерRAS.РаспарситьИнформацию(РезультатКоманды);	
	КонецЕсли;
	
	Возврат Результат;	
	
КонецФункции

//
//
Функция УстановитьБлокировкуРегламентныхЗаданий(ПараметрыОбработки, Блокировка = Ложь) Экспорт
	
	Результат = Ложь;
	
	ИнформацияОКластере = Неопределено;
	ИнформацияПоБазамКластера = МенеджерRAS.ПолучитьОбщуюИнформациюПоБазамКластера(ПараметрыОбработки, ИнформацияОКластере);
	Если НЕ ИнформацияПоБазамКластера = Неопределено Тогда		
		Результат = МенеджерRAS.ВыполнитьКоманду(ПараметрыОбработки, МенеджерRAS.ПолучитьКомандуУстновкиБлокировкиРегламентныхЗаданий(ПараметрыОбработки, ИнформацияОКластере.cluster, ИнформацияПоБазамКластера[ПараметрыОбработки.ИнформационнаяБаза.ИмяКаталогИБ].id, Блокировка));		
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции

//
//
Функция УстановитьБлокировкуСеансовИБ(ПараметрыОбработки, Блокировка = Ложь) Экспорт
	
	Результат = Ложь;
	
	ИнформацияОКластере = Неопределено;
	ИнформацияПоБазамКластера = МенеджерRAS.ПолучитьОбщуюИнформациюПоБазамКластера(ПараметрыОбработки, ИнформацияОКластере);
	Если НЕ ИнформацияПоБазамКластера = Неопределено Тогда		
		
		ИнформационнаяБазаПользователь = ПараметрыОбработки.ИнформационнаяБаза.Пользователь;
		Если ЗначениеЗаполнено(ИнформационнаяБазаПользователь) И НЕ ТипЗнч(ИнформационнаяБазаПользователь) = Тип("Структура") Тогда			
			ИнформационнаяБазаПользователь = ПараметрыОбработки.ИнформационнаяБаза.Пользователь;
		КонецЕсли;
		
		КомандаУстановкиБлокировкиСеансов = МенеджерRAS.ПолучитьКомандуУстановкиБлокировкиСеансов(ПараметрыОбработки, ИнформацияОКластере.cluster, ИнформацияПоБазамКластера[ПараметрыОбработки.ИнформационнаяБаза.ИмяКаталогИБ].id, Блокировка,, ИнформационнаяБазаПользователь.КодБлокировкиСеансов);		
		Результат = МенеджерRAS.ВыполнитьКоманду(ПараметрыОбработки, КомандаУстановкиБлокировкиСеансов);
		
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции