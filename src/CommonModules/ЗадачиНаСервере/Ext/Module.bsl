
// Общий модуль
//

&НаСервере
// Вернуть имя COM-класса для работы с 1С:Предприятием 8 через COM-соединение.
//
Функция ИмяCOMСоединителя() Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	ПодстрокиВерсии = ОбщегоНазначенияСервер.РазложитьСтрокуВМассивПодстрок(СисИнфо.ВерсияПриложения, ".");	
	Возврат "v" + ПодстрокиВерсии[0] + ПодстрокиВерсии[1] + ".COMConnector";
	
КонецФункции // ИмяCOMСоединителя

&НаСервере
//
//
Функция ОпределитьТипCOMСоединителяПоНаименованию(ТипCOMСоединителяСтрока) Экспорт
	Результат = Неопределено;
	Индекс = 0;
	ТипыCOMСоединителяЗначенияПеречисления = Метаданные.Перечисления.ТипыCOMСоединителя.ЗначенияПеречисления;	
	Для Каждого ЗначениеПеречисления Из ТипыCOMСоединителяЗначенияПеречисления Цикл
		Если НРег(ТипCOMСоединителяСтрока) = НРег(ЗначениеПеречисления.Синоним) Тогда
			Результат = Перечисления.ТипыCOMСоединителя.Получить(Индекс);
			Прервать;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервере
//
//
Функция ТипCOMСоединителя(ИнформационнаяБаза) Экспорт
	
	Результат = "";
	ТипCOMСоединителяИБ = Неопределено;	
	ТипCOMСоединителяИБ = ИнформационнаяБаза.РелизТехнологическойПлатформы.ТипCOMСоединителя;	
	Если НЕ ЗначениеЗаполнено(ТипCOMСоединителяИБ) Тогда
		ТипCOMСоединителяИБ = ИмяCOMСоединителя();		
	КонецЕсли;
	Результат = СокрЛП(ТипCOMСоединителяИБ);
	Возврат Результат;
	
КонецФункции // ИмяCOMСоединителя

&НаСервере
//
//
Функция ПолучитьПараметрПутиПоТипуИБ(ИнформационнаяБаза) Экспорт
	прмПутьКБазе = "";
	Если ИнформационнаяБаза.ТипИБ = Перечисления.ТипыИБ.Файловая Тогда 
		прмПутьКБазе = "File=""" + СокрЛП(ИнформационнаяБаза.ИмяКаталогИБ) + """;";
	Иначе
		прмПутьКБазе = "Srvr=""" + СокрЛП(ИнформационнаяБаза.СерверИБ.Наименование) + ":" + Формат(ИнформационнаяБаза.СерверИБ.ПортКластера, "ЧГ=0") + """;Ref=""" + СокрЛП(ИнформационнаяБаза.ИмяКаталогИБ) + """;";
	КонецЕсли;
	Возврат прмПутьКБазе;
КонецФункции

&НаСервере
//
//
Функция СоздатьОбъектПодключения(ПараметрыОбработки) Экспорт	
	
	РеквизитыПодключения = ЗадачиНаСервере.ПолучитьРеквизитыПодключенияCOM(ПараметрыОбработки.ИнформационнаяБаза);
	
	прмПутьКБазе = ПолучитьПараметрПутиПоТипуИБ(ПараметрыОбработки.ИнформационнаяБаза);	
		
	ОбъектПодключения = Неопределено;
	Попытка		
		Если ОбъектПодключения = Неопределено Тогда 
			ОбъектCOMConnector = Новый COMОбъект(ТипCOMСоединителя(ПараметрыОбработки.ИнформационнаяБаза));
			ОбъектПодключения = ОбъектCOMConnector.Connect(прмПутьКБазе + ?(РеквизитыПодключения.АутентификацияОС, "", "Usr=""" + РеквизитыПодключения.Пользователь + """;Pwd=""" + РеквизитыПодключения.Пароль + """;") + ?(ЗначениеЗаполнено(СокрЛП(РеквизитыПодключения.КодБлокировкиСеансов)), "UC=""" + РеквизитыПодключения.КодБлокировкиСеансов + """", ""));		
		КонецЕсли;
	Исключение
		ОбъектПодключения = Неопределено;
		ПараметрыОбработки.ОписаниеОшибки = "Ошибка при создании объекта подключения к базе <" + СокрЛП(ПараметрыОбработки.ИнформационнаяБаза) + ">! " + ОписаниеОшибки();		
		ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
	КонецПопытки;		
	
	Возврат ОбъектПодключения;
КонецФункции // СоздатьОбъектПодключения

&НаСервере
//
//
Функция ПолучитьРеквизитыПодключенияCOM(ИнформационнаяБаза) Экспорт
	Если НЕ ЗначениеЗаполнено(ИнформационнаяБаза.Пользователь) Тогда 
		Возврат Новый Структура("АутентификацияОС, Пользователь, Пароль, КодБлокировкиСеансов", Ложь, "", "", "");
	КонецЕсли;
	ИнформационнаяБазаПользователь = ОбщегоНазначенияСервер.ПолучитьДанныеПоОбъекту(ИнформационнаяБаза.Пользователь);
	Возврат Новый Структура("АутентификацияОС, Пользователь, Пароль, КодБлокировкиСеансов", ИнформационнаяБазаПользователь.АвторизацияWindows, ИнформационнаяБазаПользователь.Наименование, ИнформационнаяБазаПользователь.Пароль, ИнформационнаяБазаПользователь.КодБлокировкиСеансов);
КонецФункции

&НаСервере
//
//
Функция ПолучитьРелизПоНомеру(ВидКонфигурации, НомерРелиза) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РелизыОбновлений.Ссылка
		|ИЗ
		|	Справочник.РелизыОбновлений КАК РелизыОбновлений
		|ГДЕ
		|	РелизыОбновлений.Наименование = &НомерРелиза
		|	И РелизыОбновлений.ВидКонфигурации = &ВидКонфигурации
		|	И НЕ РелизыОбновлений.ПометкаУдаления";

	Запрос.УстановитьПараметр("ВидКонфигурации", ВидКонфигурации);
	Запрос.УстановитьПараметр("НомерРелиза", НомерРелиза);
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда
		НовыйЭлемент = Справочники.РелизыОбновлений.СоздатьЭлемент();
		НовыйЭлемент.Наименование = СокрЛП(НомерРелиза);
		НовыйЭлемент.ВидКонфигурации = ВидКонфигурации;
		НовыйЭлемент.Записать();
		Возврат НовыйЭлемент.Ссылка
	КонецЕсли;
	Возврат Результат[0].Ссылка;
КонецФункции

&НаСервере
//
//
Функция ПолучитьТекстСостояния(ПараметрыОбработки) Экспорт
	Результат = "";
	
	Если ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.ОбновлениеИнформации Тогда
		Результат = "Обновление информации по базе <" + ПараметрыОбработки.ИнформационнаяБаза + ">";
	ИначеЕсли ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.ОбновлениеИБ Тогда
		Результат = "Установка обновлений по базе <" + ПараметрыОбработки.ИнформационнаяБаза + ">";
	ИначеЕсли ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.ВыгрузкаАрхива Тогда
		Результат = "Выгрузка данных по базе <" + ПараметрыОбработки.ИнформационнаяБаза + ">";
	ИначеЕсли ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.ЗагрузкаАрхива Тогда
		Результат = "Загрузка данных по базе <" + ПараметрыОбработки.ИнформационнаяБаза + ">";
	ИначеЕсли ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.БлокировкаСеансовСнять Тогда
		Результат = "Снять блокировку сеансов информационной базы <" + ПараметрыОбработки.ИнформационнаяБаза + ">";
	ИначеЕсли ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.БлокировкаСеансовУстановить Тогда
		Результат = "Установить блокировку сеансов информационной базы <" + ПараметрыОбработки.ИнформационнаяБаза + ">";
	ИначеЕсли ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.БлокировкаРегламентныхЗаданийСнять Тогда
		Результат = "Снять блокировку регламентных заданий информационной базы <" + ПараметрыОбработки.ИнформационнаяБаза + ">";
	ИначеЕсли ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.БлокировкаРегламентныхЗаданийУстановить Тогда
		Результат = "Установить блокировку регламентных заданий информационной базы <" + ПараметрыОбработки.ИнформационнаяБаза + ">";
	ИначеЕсли ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.ОтключитьСеансы Тогда
		Результат = "Отключение сеансов информационной базы <" + ПараметрыОбработки.ИнформационнаяБаза + ">";
	ИначеЕсли ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.ВыполнениеОбработчика Тогда
		Результат = "Выполнение обработчика по базе <" + ПараметрыОбработки.ИнформационнаяБаза + ">"
	ИначеЕсли ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.Тестирование Тогда
		Результат = "Выполнение операции ТИИ по базе <" + ПараметрыОбработки.ИнформационнаяБаза + ">"
	КонецЕсли;
	
	Возврат Результат
КонецФункции

&НаСервере
//
//
Функция ПолучитьВидКонфигурацииПоНаименованию(ВидКонфигурации, Редакция = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "";
	Если НЕ Редакция = Неопределено Тогда
		Запрос.Текст =  Запрос.Текст + "
		|ВЫБРАТЬ
		|	ВидыКонфигураций.Ссылка
		|ИЗ
		|	Справочник.ВидыКонфигураций КАК ВидыКонфигураций
		|ГДЕ
		|	(ВидыКонфигураций.Наименование = &ВидКонфигурации
		|			ИЛИ ВидыКонфигураций.Синоним ПОДОБНО &ВидКонфигурации) И Выразить(ВидыКонфигураций.Редакция как строка(500)) = Выразить(&Редакция как строка(500))
		|	И НЕ ВидыКонфигураций.ПометкаУдаления 
		|ОБЪЕДИНИТЬ ВСЕ";
		Запрос.УстановитьПараметр("Редакция", Редакция);	
	КонецЕсли;
	Запрос.Текст =  Запрос.Текст + "
	|ВЫБРАТЬ
	|	ВидыКонфигураций.Ссылка
	|ИЗ
	|	Справочник.ВидыКонфигураций КАК ВидыКонфигураций
	|ГДЕ
	|	(ВидыКонфигураций.Наименование = &ВидКонфигурации
	|			ИЛИ ВидыКонфигураций.Синоним ПОДОБНО &ВидКонфигурации)
	|	И НЕ ВидыКонфигураций.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВидКонфигурации", ВидКонфигурации);	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		НовыйЭлемент = Справочники.ВидыКонфигураций.СоздатьЭлемент();
		НовыйЭлемент.Наименование = СокрЛП(ВидКонфигурации);		
		НовыйЭлемент.Записать();
		Результат = НовыйЭлемент.Ссылка;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
//
//
Функция СоздатьОбъектПодключенияКРабочемуПроцессу(ПараметрыОбработки) Экспорт
	ДанныеПодключенияКСерверу = Новый Структура;
	ДанныеПодключенияКСерверу.Вставить("AgentConnection", Неопределено);	
	ДанныеПодключенияКСерверу.Вставить("МассивСоединениеСРабочимПроцессом", Новый Массив);	
	Попытка
		ИнформационнаяБазаСерверИБ = ОбщегоНазначенияСервер.ПолучитьДанныеПоОбъекту(ПараметрыОбработки.ИнформационнаяБаза.СерверИБ);
		ИнформационнаяБазаСерверИБПользователь = ОбщегоНазначенияСервер.ПолучитьДанныеПоОбъекту(ИнформационнаяБазаСерверИБ.Пользователь);
        COMConnector = Новый COMОбъект(ТипCOMСоединителя(ПараметрыОбработки.ИнформационнаяБаза));		
		ConnectString = СокрЛП(ИнформационнаяБазаСерверИБ.Наименование) + ":" + Формат(ИнформационнаяБазаСерверИБ.ПортСервера, "ЧГ=0");
		AgentConnection = COMConnector.ConnectAgent(ConnectString);
		ДанныеПодключенияКСерверу.Вставить("AgentConnection", AgentConnection);
		//получение порта и формирование строки соединений
		Clusters = AgentConnection.GetClusters();
		Для Каждого Cluster ИЗ Clusters Цикл 
			
			Если ИнформационнаяБазаСерверИБПользователь = Неопределено Тогда				
				AgentConnection.Authenticate(Cluster, "", "");
			ИначеЕсли ИнформационнаяБазаСерверИБПользователь.АвторизацияWindows Тогда
				AgentConnection.Authenticate(Cluster, "", "");
			Иначе
				AgentConnection.Authenticate(Cluster, СокрЛП(ИнформационнаяБазаСерверИБПользователь.Ссылка), ИнформационнаяБазаСерверИБПользователь.Пароль);
			КонецЕсли;
			
			//теперь соединяемся с рабочим процессом
			WorkingProcesses = AgentConnection.GetWorkingProcesses(Cluster);
			Для Каждого WorkingProcess Из WorkingProcesses Цикл
				Попытка
					
					Если WorkingProcess.Running = 1 Тогда
						WorkingProcessConnection = COMConnector.ConnectWorkingProcess(WorkingProcess.HostName + ":" + Формат(WorkingProcess.MainPort, "ЧГ=0"));
						ПараметрыОбработкиИнформационнаяБазаПользователь = ПараметрыОбработки.ИнформационнаяБаза.Пользователь;
						WorkingProcessConnection.AddAuthentication(СокрЛП(ПараметрыОбработкиИнформационнаяБазаПользователь), ПараметрыОбработкиИнформационнаяБазаПользователь.Пароль);
						ДанныеСоединенияРабочегоПроцесса = Новый Структура;			
						ДанныеСоединенияРабочегоПроцесса.Вставить("Cluster", Cluster);
						ДанныеСоединенияРабочегоПроцесса.Вставить("WorkingProcess", WorkingProcess);
						ДанныеСоединенияРабочегоПроцесса.Вставить("WorkingProcessConnection", WorkingProcessConnection);
						ДанныеПодключенияКСерверу.МассивСоединениеСРабочимПроцессом.Добавить(ДанныеСоединенияРабочегоПроцесса);
						WorkingProcessConnection = Неопределено;					
					КонецЕсли;
					
				Исключение
					//
				КонецПопытки;
				
			КонецЦикла;
			
			WorkingProcesses = Неопределено;
		КонецЦикла;
		AgentConnection = Неопределено;
		COMConnector = Неопределено;
    Исключение        
		ПараметрыОбработки.ОписаниеОшибки = "<" + ПараметрыОбработки.ИнформационнаяБаза + "> Ошибка при подключении к рабочему процессу: " + ОписаниеОшибки();
		ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
    КонецПопытки;    
	Возврат ДанныеПодключенияКСерверу;
КонецФункции
	
&НаСервере
//
//
Функция ПроверитьВозможностьМонопольногоЗапуска(ПараметрыОбработки) Экспорт 
	
	ВозможенМонопольныйЗапуск = Истина;	
	
	ИнформационнаяБаза_ОбъектПодключения = ЗадачиНаСервере.СоздатьОбъектПодключения(ПараметрыОбработки);
	Если ИнформационнаяБаза_ОбъектПодключения = Неопределено Тогда
		
		ВозможенМонопольныйЗапуск = Ложь;
		
	Иначе
		
		МассивАктивныхСоединений = ПолучитьМассивАктивныхСоединений(ПараметрыОбработки, ИнформационнаяБаза_ОбъектПодключения);
		Если МассивАктивныхСоединений <> Неопределено Тогда
			КоличествоСоединений = МассивАктивныхСоединений.Количество();	
			Если КоличествоСоединений > 1 Тогда
				
				ПараметрыОбработкиИнформационнаяБазаПользователь = СокрЛП(ПараметрыОбработки.ИнформационнаяБаза.Пользователь);
				
				ДопустимыеСеансы = Новый СписокЗначений;
				ДопустимыеСеансы.Добавить("comconnection");
				ДопустимыеСеансы.Добавить("srvrconsole");
				Пока КоличествоСоединений > 0 Цикл			
					ИнформационнаяБаза_ОбъектПодключения_Соединение = МассивАктивныхСоединений.Получить(КоличествоСоединений - 1);		
					Если ДопустимыеСеансы.НайтиПоЗначению(НРег(ИнформационнаяБаза_ОбъектПодключения_Соединение.ИмяПриложения)) = Неопределено Тогда 
						
						// это точно кто-то лишний
						ВозможенМонопольныйЗапуск = Ложь;
						
						ПараметрыОбработки.ОписаниеОшибки = "ИБ <" + ПараметрыОбработки.ИнформационнаяБаза + "> не может быть открыта монопольно, т.к. обнаружены не закрытые сеансы пользователей!";
						ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
						
						Прервать;				
						
					КонецЕсли;
					Если НРег(ИнформационнаяБаза_ОбъектПодключения_Соединение.ИмяПриложения) = "comconnection" И 
						ИнформационнаяБаза_ОбъектПодключения_Соединение.Пользователь.Имя = ПараметрыОбработкиИнформационнаяБазаПользователь Тогда 
						ВозможенМонопольныйЗапуск = ВозможенМонопольныйЗапуск И Истина;
					КонецЕсли;
					ИнформационнаяБаза_ОбъектПодключения_Соединение = Неопределено;
					КоличествоСоединений = КоличествоСоединений - 1;
				КонецЦикла;
				
			Иначе 
				
				ВозможенМонопольныйЗапуск = Истина;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
	
	ИнформационнаяБаза_ОбъектПодключения_СоединенияИнформационнойБазы = Неопределено;
	ИнформационнаяБаза_ОбъектПодключения = Неопределено;
	
	Возврат ВозможенМонопольныйЗапуск;
КонецФункции

&НаСервере
//
//
Функция ПолучитьМассивАктивныхСоединений(ПараметрыОбработки, ИнформационнаяБаза_ОбъектПодключения = Неопределено) Экспорт 
	
	Результат = Неопределено;	
	
	Если ИнформационнаяБаза_ОбъектПодключения = Неопределено Тогда
		ИнформационнаяБаза_ОбъектПодключения = ЗадачиНаСервере.СоздатьОбъектПодключения(ПараметрыОбработки);
	КонецЕсли;
	
	Если ИнформационнаяБаза_ОбъектПодключения = Неопределено Тогда
		
		ПараметрыОбработки.ОписаниеОшибки = "Не удалось получить массив активных соединений ИБ <" + ПараметрыОбработки.ИнформационнаяБаза + ">!";
		ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
		
	Иначе
		
		Результат = ИнформационнаяБаза_ОбъектПодключения.ПолучитьСоединенияИнформационнойБазы();
			
	КонецЕсли;
		
	ИнформационнаяБаза_ОбъектПодключения_СоединенияИнформационнойБазы = Неопределено;
	ИнформационнаяБаза_ОбъектПодключения = Неопределено;
	
	Возврат Результат;
КонецФункции

&НаСервере
//
//
Функция ПолучитьПараметрПодключенияПоТипуБазы(ИнформационнаяБаза) Экспорт
	ИнформационнаяБазаСерверИБПортКластера = ИнформационнаяБаза.СерверИБ.ПортКластера;
	Возврат ?(ИнформационнаяБаза.ТипИБ = Перечисления.ТипыИБ.Файловая, "/F """ + ИнформационнаяБаза.ИмяКаталогИБ + """", "/S """ + СокрЛП(ИнформационнаяБаза.СерверИБ.Наименование) + ?(ИнформационнаяБазаСерверИБПортКластера = 1541, "", ":" + Формат(ИнформационнаяБазаСерверИБПортКластера, "ЧГ=0")) + "\" + ИнформационнаяБаза.ИмяКаталогИБ + """");// + " /AppAutoCheckVersion";
КонецФункции

&НаСервере
//
//
Функция ПолучитьПараметрВидаРежимаЗапуска(ПараметрыОбработки) Экспорт
	Результат = " ";
	Если ПараметрыОбработки.ВидРежимаЗапуска = Перечисления.ВидыРежимовЗапуска.ТонкийКлиент Тогда
		Результат = " /RunModeManagedApplication -ThinClient ";
	ИначеЕсли ПараметрыОбработки.ВидРежимаЗапуска = Перечисления.ВидыРежимовЗапуска.ВебКлиент Тогда
		Результат = " /RunModeManagedApplication -WebClient ";
	ИначеЕсли ПараметрыОбработки.ВидРежимаЗапуска = Перечисления.ВидыРежимовЗапуска.ТолстыйКлиент Тогда
		Результат = " /RunModeOrdinaryApplication -ThickClient ";
	ИначеЕсли ПараметрыОбработки.ВидРежимаЗапуска = Перечисления.ВидыРежимовЗапуска.ВыбиратьАвтоматически Тогда
		Результат = " /AppAutoCheckMode ";
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаСервере
//
//
Функция ПолучитьТекстовоеПредставлениеИБ(ИнформационнаяБаза) Экспорт 
	Возврат "[" + ИнформационнаяБаза.ВидКонфигурации + "].[" + ИнформационнаяБаза.Наименование + "].[" + ИнформационнаяБаза.РелизОбновления + "]";
КонецФункции

//
//
Функция ЗаменитьСпецсимволыНаПодчеркивание(Значение) Экспорт
	Результат = Значение;
	
	СимволыЗамены = Новый СписокЗначений;
	СимволыЗамены.Добавить(" ", "_");
	СимволыЗамены.Добавить(".", "_");
	СимволыЗамены.Добавить(",", "_");
	СимволыЗамены.Добавить("/", "_");
	СимволыЗамены.Добавить("\", "_");	 
    СимволыЗамены.Добавить("*", "_");
    СимволыЗамены.Добавить("|", "_"); 
    СимволыЗамены.Добавить(":", "_"); 
    СимволыЗамены.Добавить("""", "_"); 
    СимволыЗамены.Добавить("<", "_"); 
    СимволыЗамены.Добавить(">", "_"); 
    СимволыЗамены.Добавить("?", "_");     
    СимволыЗамены.Добавить("+", "_");     
    СимволыЗамены.Добавить("(", "_");     
    СимволыЗамены.Добавить(")", "_");     
    СимволыЗамены.Добавить("#", "_");     
    СимволыЗамены.Добавить("@", "_");     
	
	Для Каждого Замена Из СимволыЗамены Цикл
		Результат = СокрЛП(СтрЗаменить(Результат, Замена.Значение, Замена.Представление));
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

//
//
Функция СформироватьИмяФайлаАрхива(ИнформационнаяБаза) Экспорт
	
	ДатаАрхива = ТекущаяДатаСеанса();
	ДатаАрхиваМесяц = Месяц(ДатаАрхива);
	ДатаАрхиваДень = День(ДатаАрхива);
	
	СтрокаДата = "" + Формат(  Год(ТекущаяДатаСеанса()), "ЧЦ=4; ЧВН=; ЧГ=0")
                + Формат(Месяц(ТекущаяДатаСеанса()), "ЧЦ=2; ЧВН=; ЧГ=0")
                + Формат( День(ТекущаяДатаСеанса()), "ЧЦ=2; ЧВН=; ЧГ=0");;
				
	ИмяФайла = СокрЛП(ИнформационнаяБаза) + "_" + СтрокаДата + "_" + ИнформационнаяБаза.РелизОбновления;	
	
	ИнформационнаяБазаВидКонфигурации = ОбщегоНазначенияСервер.ПолучитьДанныеПоОбъекту(ИнформационнаяБаза.ВидКонфигурации);
	Если ЗначениеЗаполнено(ИнформационнаяБазаВидКонфигурации.ПрефиксАрхива) Тогда 
		ИмяФайла = СокрЛП(ИнформационнаяБазаВидКонфигурации.ПрефиксАрхива) + "_" + ИмяФайла;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИнформационнаяБаза.ПрефиксАрхива) Тогда 
		ИмяФайла = СокрЛП(ИнформационнаяБаза.ПрефиксАрхива) + "_" + ИмяФайла;
	КонецЕсли;
	
	ИмяФайла = ЗаменитьСпецсимволыНаПодчеркивание(ИмяФайла);
	
	ИмяФайла = ИмяФайла + ".dt";
	
	Возврат ИмяФайла;
КонецФункции

&НаСервере
//
//
Функция СформироватьИмяАрхива(ПараметрыОбработки) Экспорт
	
	Результат = Неопределено;
	
	КаталогАрхива = Константы.ОсновнойКаталогАрхива.Получить();
	
	Если НЕ ЗначениеЗаполнено(КаталогАрхива) ИЛИ ЗначениеЗаполнено(ПараметрыОбработки.ИнформационнаяБаза.КаталогАрхива) Тогда
		КаталогАрхива = ПараметрыОбработки.ИнформационнаяБаза.КаталогАрхива;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КаталогАрхива)Тогда 
		
		ПараметрыОбработки.ОписаниеОшибки = "<" + ПараметрыОбработки.ИнформационнаяБаза + "> Не задан каталог выгрузки!!";
		ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
		
	Иначе
		
		Результат = КаталогАрхива + "\" + СформироватьИмяФайлаАрхива(ПараметрыОбработки.ИнформационнаяБаза);
		
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		ПараметрыОбработки.ОписаниеОшибки = "<" + ПараметрыОбработки.ИнформационнаяБаза + "> Ошибка при формировании имени архива!";
		ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

//
//
Функция УдалитьДублирубщийПоИмениФайлАрхива(ПараметрыОбработки) Экспорт
	
	Результат = Истина;
	
	Если ПараметрыОбработки.ТипАрхива = 0 Тогда
		
		ФайлАрхива = Новый Файл(ПараметрыОбработки.ИмяАрхива);
		Если ФайлАрхива.Существует() Тогда 						
			
			Если ПараметрыОбработки.АвтоматическиПерезаписыватьАрхив Тогда
								
				Если Прав(ПараметрыОбработки.ИмяАрхива, 3) = ".dt" Тогда
					УдалитьФайлы(ПараметрыОбработки.ИмяАрхива);
				Иначе
					ПараметрыОбработки.ОписаниеОшибки = "<" + ПараметрыОбработки.ИнформационнаяБаза + "> ошибка перезаписи архива, т.к. имя архива не соответствует файлу выгрузки [" + ПараметрыОбработки.ИмяАрхива + "]";
					ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
					Результат = Ложь;					
				КонецЕсли;
				
			Иначе
				
				ПараметрыОбработки.ОписаниеОшибки = "<" + ПараметрыОбработки.ИнформационнаяБаза + "> Выгрузка отменена, т.к. обнаружен существующий архив с именем [" + ПараметрыОбработки.ИмяАрхива + "]";
				ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
				Результат = Ложь;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции


&НаСервере
//
//
Функция ПолучитьИмяИсполняемогоФайлаПлатформы(ПараметрыОбработки = Неопределено) Экспорт
	Результат = "1cv8.exe";
	Если НЕ ПараметрыОбработки = Неопределено И ПараметрыОбработки.КлиентскийЗапуск Тогда
		Результат = "1cv8s.exe";
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаСервере
//
//
Функция ПолучитьПутьКИсполняемомуФайлуПлатформы(ИнформационнаяБаза = Неопределено, ПараметрыОбработки) Экспорт
	
	ИмяИсполняемогоФайлаПлатформы = ЗадачиНаСервере.ПолучитьИмяИсполняемогоФайлаПлатформы(ПараметрыОбработки);
	
	Если ИнформационнаяБаза = Неопределено Тогда
		
		ПутьКИсполняемомуФайлуПлатформы = КаталогПрограммы();		
		
	Иначе
		РелизТехнологическойПлатформы = ИнформационнаяБаза.РелизТехнологическойПлатформы;
		
		Если НЕ ЗначениеЗаполнено(РелизТехнологическойПлатформы) Тогда			
			РелизТехнологическойПлатформы = Справочники.РелизыТехнологическойПлатформы.ПолучитьИнформациюПоТекущемуРелизуПлатформы(Истина);
		КонецЕсли;
					
		ПутьКИсполняемомуФайлуПлатформы = РелизТехнологическойПлатформы.Каталог;
		Если Прав(ПутьКИсполняемомуФайлуПлатформы, 1) <> "\" Тогда ПутьКИсполняемомуФайлуПлатформы = ПутьКИсполняемомуФайлуПлатформы + "\"; КонецЕсли;	
				
	КонецЕсли;
	
	Возврат """" + ПутьКИсполняемомуФайлуПлатформы + ИмяИсполняемогоФайлаПлатформы + """";
КонецФункции

&НаСервере
//
//
Функция ПолучитьСтрокуПараметровАвторизации(ПараметрыОбработки) Экспорт
	Пользователь = "";
	Пароль = "";
	КодБлокировкиСеансов = "";
	АвторизацияWindows = "/WA+";
	АвторизацияПоПаролю = "";
	ИнформационнаяБазаПользователь = ПараметрыОбработки.Пользователь;
	Если ЗначениеЗаполнено(ИнформационнаяБазаПользователь) Тогда 		
		Если НЕ ИнформационнаяБазаПользователь.АвторизацияWindows Тогда
			АвторизацияWindows = "/WA-"; 
			Пользователь = ИнформационнаяБазаПользователь.Наименование;
			Пароль = ИнформационнаяБазаПользователь.Пароль;		
			АвторизацияПоПаролю = " /N""" + Пользователь + """ /P""" + Пароль + """ ";
		КонецЕсли;
		Если ЗначениеЗаполнено(ИнформационнаяБазаПользователь.КодБлокировкиСеансов) Тогда 
			КодБлокировкиСеансов = "/UC""" + ИнформационнаяБазаПользователь.КодБлокировкиСеансов + """";
		КонецЕсли;
	КонецЕсли;
	Возврат АвторизацияWindows + АвторизацияПоПаролю + КодБлокировкиСеансов;
КонецФункции

&НаСервере
//
//
Функция ПолучитьКомандуВыгрузкиДанныхИБ(ПараметрыОбработки) Экспорт	
	Если ПараметрыОбработки.ИмяАрхива = Неопределено Тогда 
		ПараметрыОбработки.ИмяАрхива = СформироватьИмяАрхива(ПараметрыОбработки);
	КонецЕсли;
	Возврат ПолучитьКомандуОткрытияВРежимеКонфигуратора(ПараметрыОбработки) + " /DumpIB """ + ПараметрыОбработки.ИмяАрхива + """";
КонецФункции

&НаСервере
//
//
Функция ПолучитьКомандуЗагрузкиДанныхИБ(ПараметрыОбработки) Экспорт	
	Возврат ПолучитьКомандуОткрытияВРежимеКонфигуратора(ПараметрыОбработки) + " /RestoreIB """ + ПараметрыОбработки.ИмяАрхива + """";
КонецФункции

&НаСервере
//
//
Функция ПолучитьКомандуУстановкиОбновления(ПараметрыОбработки, РелизОбновления, ИмяФайлаОбновления = "1cv8.cfu", ИмяФайлаПравилОбъединения = Неопределено) Экспорт
	Если СтрЧислоВхождений(ИмяФайлаОбновления, ".cfu") > 0 Тогда
		КомандаЗагрузкиОбновления = " /UpdateCfg";
		КомандаИспользованияПравилОбъединения = " -force" + ?(ЗначениеЗаполнено(ИмяФайлаПравилОбъединения), " -Settings""" + ИмяФайлаПравилОбъединения + """", "");
	Иначе
		Если ПараметрыОбработки.ИнформационнаяБаза.СтатусПоддержки = Перечисления.СтатусыПоддержки.ТиповаяНеРедактируется Тогда
			КомандаЗагрузкиОбновления = " /UpdateCfg";
			КомандаИспользованияПравилОбъединения = " -force" + ?(ЗначениеЗаполнено(ИмяФайлаПравилОбъединения), " -Settings""" + ИмяФайлаПравилОбъединения + """", "");
		ИначеЕсли ЗначениеЗаполнено(ИмяФайлаПравилОбъединения) Тогда
			КомандаЗагрузкиОбновления = " /MergeCfg";
			КомандаИспользованияПравилОбъединения = ?(ЗначениеЗаполнено(ИмяФайлаПравилОбъединения), " -Settings""" + ИмяФайлаПравилОбъединения + """", "");
		Иначе
			КомандаЗагрузкиОбновления = " /LoadCfg";
			КомандаИспользованияПравилОбъединения = "";
		КонецЕсли;
	КонецЕсли;
	КомандаЗагрузкиОбновления = КомандаЗагрузкиОбновления + """" + ИмяФайлаОбновления + """" + КомандаИспользованияПравилОбъединения + " /UpdateDBCfg";	
	Возврат ПолучитьКомандуОткрытияВРежимеКонфигуратора(ПараметрыОбработки) + " /DisableStartupDialogs " + КомандаЗагрузкиОбновления;
КонецФункции

&НаСервере
//
//
Функция ПолучитьСтрокуПараметровПодключенияКХранилищу(ХранилищеКонфигураций, УчетнаяЗаписьХранилища = Неопределено) Экспорт	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗаписьХранилища) Тогда
		УчетнаяЗаписьХранилища = ХранилищеКонфигураций.Пользователь
	КонецЕсли;
	Возврат "/ConfigurationRepositoryF """ + ХранилищеКонфигураций.Каталог + """ /ConfigurationRepositoryN """ + СокрЛП(УчетнаяЗаписьХранилища.Наименование) + """ /ConfigurationRepositoryP """ + СокрЛП(УчетнаяЗаписьХранилища.Пароль) + """";
КонецФункции

&НаСервере
//
//
Функция ПолучитьКомандуУстановкиОбновленияИзХранилища(ПараметрыОбработки, ХранилищеКонфигураций) Экспорт	
	УчетнаяЗаписьХранилища = ПараметрыОбработки.ПользовательХранилища;
	Если НЕ ЗначениеЗаполнено(УчетнаяЗаписьХранилища) Тогда
		УчетнаяЗаписьХранилища = ХранилищеКонфигураций.Пользователь
	КонецЕсли;
	Возврат ПолучитьКомандуОткрытияВРежимеКонфигуратора(ПараметрыОбработки) + " /DisableStartupDialogs " + ПолучитьСтрокуПараметровПодключенияКХранилищу(ХранилищеКонфигураций, УчетнаяЗаписьХранилища) + " /ConfigurationRepositoryUpdateCfg -revised -force /UpdateDBCfg";
КонецФункции

&НаСервере
//
//
Функция ПолучитьПредставлениеКодаВозврата(КодВозврата) Экспорт	
	ОписаниеКодовВозврата = Новый Соответствие;
	ОписаниеКодовВозврата.Вставить(0, "Ошибок нет");
	ОписаниеКодовВозврата.Вставить(1, "Операция не выполнена");
	ОписаниеКодовВозврата.Вставить(101, "Имеются ошибки в данных");
	Результат = ОписаниеКодовВозврата.Получить(КодВозврата);
	Возврат ?(Результат = Неопределено, "", Результат);
КонецФункции

&НаСервере
//
//
Функция ПолучитьКомандуТестированиеИсправление(ПараметрыОбработки) Экспорт	
	Возврат ЗадачиНаСервере.ПолучитьКомандуОткрытияВРежимеКонфигуратора(ПараметрыОбработки) + " /IBCheckAndRepair" +
	?(ПараметрыОбработки.ПараметрыТестирования.РеиндексацияТаблиц, " -ReIndex", "") +
	?(ПараметрыОбработки.ПараметрыТестирования.ПроверкаСсылочнойЦелостности, " -LogAndRefsIntegrity",
		?(ПараметрыОбработки.ПараметрыТестирования.ПроверкаЛогическойЦелостности, " -LogIntergrity", "")) +
	?(ПараметрыОбработки.ПараметрыТестирования.ПересчетИтогов, " -RecalcTotals", "") +
	?(ПараметрыОбработки.ПараметрыТестирования.СжатиеТаблиц, " -IBCompression", "") +
	?(ПараметрыОбработки.ПараметрыТестирования.РеструктуризацияТаблиц, " -Rebuild", "") +
	?(ПараметрыОбработки.ПараметрыТестирования.ТолькоТестирование, " -TestOnly", 
		?(ПараметрыОбработки.ПараметрыТестирования.ОперацияПоНесуществующимСсылкам = 0, " -BadRefNone", ?(ПараметрыОбработки.ПараметрыТестирования.ОперацияПоНесуществующимСсылкам = 1, " -BadRefCreate", " -BadRefClear")) +
		?(ПараметрыОбработки.ПараметрыТестирования.ОперацияПриЧастичноПотереОбъектов = 0, "", ?(ПараметрыОбработки.ПараметрыТестирования.ОперацияПоНесуществующимСсылкам = 1, " -BadDataCreate", " -BadDataDelete"))) +
	" -UseStartPoint";	
КонецФункции

&НаСервере
//
//
Функция ПрочиеПараметрыЗапуска() Экспорт
	Возврат " /DisableStartupMessages "
КонецФункции

&НаСервере
//
//
Функция ПолучитьКомандуОткрытияВРежимеКонфигуратора(ПараметрыОбработки, ПутьКИсполняемомуФайлуПлатформы = Неопределено) Экспорт	
	Если ПутьКИсполняемомуФайлуПлатформы = Неопределено Тогда ПутьКИсполняемомуФайлуПлатформы = ПолучитьПутьКИсполняемомуФайлуПлатформы(ПараметрыОбработки.ИнформационнаяБаза, ПараметрыОбработки); КонецЕсли;
	Если ПараметрыОбработки.АвтоматическоеПодключениеКХранилищуПриЗапускеКонфигуратора И ЗначениеЗаполнено(ПараметрыОбработки.ХранилищеКонфигураций)  Тогда
		СтрокаПараметровПодключенияКХранилищу = " " + ПолучитьСтрокуПараметровПодключенияКХранилищу(ПараметрыОбработки.ХранилищеКонфигураций, ПараметрыОбработки.ПользовательХранилища);
	КонецЕсли;
	Возврат ПутьКИсполняемомуФайлуПлатформы + " DESIGNER " + ЗадачиНаСервере.ПолучитьПараметрПодключенияПоТипуБазы(ПараметрыОбработки.ИнформационнаяБаза) + ЗадачиНаСервере.ПрочиеПараметрыЗапуска() + ЗадачиНаСервере.ПолучитьСтрокуПараметровАвторизации(ПараметрыОбработки) + СтрокаПараметровПодключенияКХранилищу + ?(ЗначениеЗаполнено(ПараметрыОбработки.ФайлТехнологическогоЛога), " /Out""" + ПараметрыОбработки.ФайлТехнологическогоЛога + """ –NoTruncate", "");
КонецФункции

&НаСервере
//
//
Функция ПолучитьКомандуОткрытияВРежимеПредприятия(ПараметрыОбработки, ПутьКИсполняемомуФайлуПлатформы = Неопределено) Экспорт 			
	Если ПутьКИсполняемомуФайлуПлатформы = Неопределено Тогда ПутьКИсполняемомуФайлуПлатформы = ПолучитьПутьКИсполняемомуФайлуПлатформы(ПараметрыОбработки.ИнформационнаяБаза, ПараметрыОбработки); КонецЕсли;
	Возврат ПутьКИсполняемомуФайлуПлатформы + " ENTERPRISE " + ЗадачиНаСервере.ПолучитьПараметрПодключенияПоТипуБазы(ПараметрыОбработки.ИнформационнаяБаза) + ЗадачиНаСервере.ПолучитьПараметрВидаРежимаЗапуска(ПараметрыОбработки) + ЗадачиНаСервере.ПрочиеПараметрыЗапуска() + ЗадачиНаСервере.ПолучитьСтрокуПараметровАвторизации(ПараметрыОбработки) + " /DisplayAllFunctions";
КонецФункции

&НаСервере
//
//
Функция ПроверитьСоответствиеРелиза(ПараметрыОбработки, РелизОбновления) Экспорт 
	Результат = Ложь;
	
	Если СтрДлина(СокрЛП(РелизОбновления.Каталог)) = 0 Тогда 
		ОбщегоНазначенияСервер.ВывестиСообщение("Для релиза [" + РелизОбновления + "] не определен каталог!");
		Возврат Результат;
	КонецЕсли;	
	
	// Проверим ИБ
	ИнформационнаяБаза_ОбъектПодключения = ЗадачиНаСервере.СоздатьОбъектПодключения(ПараметрыОбработки);
	Если ИнформационнаяБаза_ОбъектПодключения = Неопределено Тогда
		
		Результат = Ложь;
		
	Иначе 
		
		ИнформационнаяБаза_Метаданные = ИнформационнаяБаза_ОбъектПодключения.Метаданные;	
		
		
		ЗадачиНаСервере.ВыполнитьОбновлениеИнформацииПоБазе(ПараметрыОбработки);
		
		НомерРелизаИБ = СокрЛП(ПараметрыОбработки.ИнформационнаяБаза.РелизОбновления);
		РелизОбновленияUpdInfo = СокрЛП(РелизОбновления.UpdInfo);
		СоответствиеUpdInfo = ((НЕ ЗначениеЗаполнено(РелизОбновленияUpdInfo)) ИЛИ (ЗначениеЗаполнено(РелизОбновленияUpdInfo) И СтрЧислоВхождений(РелизОбновленияUpdInfo, НомерРелизаИБ) > 0));
		
		РелизОбновленияВидКонфигурации = ОбщегоНазначенияСервер.ПолучитьДанныеПоОбъекту(РелизОбновления.ВидКонфигурации);
		Если НРег(СокрЛП(ИнформационнаяБаза_Метаданные.Имя)) = НРег(СокрЛП(РелизОбновленияВидКонфигурации.Наименование)) 
			И (?(ЗначениеЗаполнено(РелизОбновленияВидКонфигурации.Редакция), ЗадачиНаСервере.РедакцияПоНомеруРелиза(ИнформационнаяБаза_Метаданные.Версия) = ЗадачиНаСервере.РедакцияПоНомеруРелиза(НомерРелизаИБ), Истина))
			И СоответствиеUpdInfo Тогда 		
			Результат = Истина;
		КонецЕсли;	
		
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаСервере
//
//
Функция УстановитьБлокировкуНаЗаписьИБ(ПараметрыОбработки, Блокировка) Экспорт 
	
	ОперацияВыполнена = Ложь;
	
	Если ПараметрыОбработки.ИнформационнаяБаза.ВыполняетсяОбработка = Блокировка Тогда
		ОперацияВыполнена = Истина;
	Иначе 
		Попытка
			
			ИнформационнаяБазаОбъект = ПараметрыОбработки.ИнформационнаяБаза.ПолучитьОбъект();
			
			Если Блокировка Тогда
				Если ИнформационнаяБазаОбъект.ВыполняетсяОбработка Тогда
					ВызватьИсключение "База <" + ПараметрыОбработки.ИнформационнаяБаза + "> уже обрабатывается!";
				КонецЕсли;
				ИнформационнаяБазаОбъект.Заблокировать();
				ИнформационнаяБазаОбъект.ВыполняетсяОбработка = Истина;
				ИнформационнаяБазаОбъект.Записать();
			Иначе 			
				ИнформационнаяБазаОбъект.ВыполняетсяОбработка = Ложь;
				ИнформационнаяБазаОбъект.Записать();
				ИнформационнаяБазаОбъект.Разблокировать();
			КонецЕсли;			
			ОперацияВыполнена = Истина;
			
			ПараметрыОбработки.ОписаниеОшибки = "" +?(Блокировка, "Установлена", "Снята") + " блокировка базы <" + ПараметрыОбработки.ИнформационнаяБаза + ">: " + ОписаниеОшибки();
			
		Исключение
			
			ОперацияВыполнена = Ложь;
			ПараметрыОбработки.ОписаниеОшибки = "Не удалось " + ?(Блокировка, "за", "раз") + "блокировать базу <" + ПараметрыОбработки.ИнформационнаяБаза + ">: " + ОписаниеОшибки();
			
		КонецПопытки;
	КонецЕсли;	
	
	ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);	
	
	ОбработкаОповещенийССервераСервер.ОтправитьСообщениеССервера(Перечисления.ТипыОповещенийССервера.ИнформационныеБазыОбновитьФормаСписка, Неопределено);
	
	Возврат ОперацияВыполнена;
КонецФункции

&НаСервере
//
//
Функция ПолучитьЗначениеРеквизита(Источник, ИмяРеквизита) Экспорт
	ЗначениеРеквизита = Неопределено;
	Попытка
		Выполнить("ЗначениеРеквизита = Источник." + ИмяРеквизита);
	Исключение
	КонецПопытки;
	Возврат ЗначениеРеквизита;
КонецФункции

//
//
Функция ЗапуститьОбработчик(ПараметрыОбработки) Экспорт
	
	Результат = Ложь;	
	
	ВидОбработкиВнешний = ПараметрыОбработки.ВидОбработки;
	ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.ВыполнениеОбработчика;					
			
	Результат = ЗадачиНаСервере.ВыполнитьЗапускОбработчика(ПараметрыОбработки, , Истина);
			
	ПараметрыОбработки.ВидОбработки = ВидОбработкиВнешний;	
	
	Возврат Результат
КонецФункции

//
//
Функция ЗапуститьВнешнийКодОбработчика(ПараметрыОбработки, ТекущийОбработчик, ОписаниеОшибки, ИнформационнаяБаза_ОбъектПодключения = Неопределено, УбиватьОбъектПоЗавершении = Ложь) Экспорт
	
	Результат = Истина;
	
	Если ИнформационнаяБаза_ОбъектПодключения = Неопределено Тогда 
		ИнформационнаяБаза_ОбъектПодключения = ЗадачиНаСервере.СоздатьОбъектПодключения(ПараметрыОбработки);
	КонецЕсли;
	
	ОбработкаДвоичныеДанные = ИнформационнаяБаза_ОбъектПодключения.ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(Справочники.Обработчики.ПолучитьМакет("ВыполнениеОбработчикаВКонтекстеИнформационнойБазы")));
	КаталогВременныхФайлов = ИнформационнаяБаза_ОбъектПодключения.КаталогВременныхФайлов();																
	ИмяВременногоФайлаОбработки = ОбщегоНазначенияСервер.ПолучитьПолноеИмяВременногоФайла("epf", ОбщегоНазначенияСервер.ДополнитьЗначениеСимволомСправа(ПараметрыОбработки.ИнформационнаяБаза.ИмяКаталогИБ, "\"));
	ОбработкаДвоичныеДанные.Записать(ИмяВременногоФайлаОбработки);
	ОбъектВнешняяОбработка = ИнформационнаяБаза_ОбъектПодключения.ВнешниеОбработки.Создать(ИмяВременногоФайлаОбработки, Ложь);								
	ИнформационнаяБаза_ОбъектПодключения.УдалитьФайлы(ИмяВременногоФайлаОбработки);
	Результат = ОбъектВнешняяОбработка.ВыполнитьОбработчик(ТекущийОбработчик.КодОбработчика, ОписаниеОшибки, ПараметрыОбработки.ВнешниеПараметры);
	
	Если УбиватьОбъектПоЗавершении Тогда  ИнформационнаяБаза_ОбъектПодключения = Неопределено; КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
//
//
Функция ВыполнитьЗапускОбработчика(ПараметрыОбработки, ИнформационнаяБаза_ОбъектПодключения = Неопределено, УбиватьОбъектПоЗавершении = Ложь) Экспорт
	Перем ВидОбработкиВнешний, МассивОбработчиков;		
	
	Результат = Истина;
	
	ВидОбработкиВнешний = ПараметрыОбработки.ВидОбработки;
	ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.ВыполнениеОбработчика;
	
	ТекстСостояния = ЗадачиНаСервере.ПолучитьТекстСостояния(ПараметрыОбработки);	
	
	Результат = ЗадачиНаСервере.ПодготовитьВыполнениеОперации(ПараметрыОбработки, ВидОбработкиВнешний, Результат);
	
	Если Результат И ЗначениеЗаполнено(ПараметрыОбработки.Обработчик) Тогда 
		
		Если ИнформационнаяБаза_ОбъектПодключения = Неопределено Тогда 
			ИнформационнаяБаза_ОбъектПодключения = ЗадачиНаСервере.СоздатьОбъектПодключения(ПараметрыОбработки);
		КонецЕсли;
		
		Если ИнформационнаяБаза_ОбъектПодключения = Неопределено Тогда
			
			Результат = Ложь;
			
		Иначе 
			
			МассивОбработчиков = ПараметрыОбработки.Обработчик;		
			Если ТипЗнч(МассивОбработчиков) <> Тип("Массив") Тогда			
				МассивОбработчиков = Новый Массив;
				МассивОбработчиков.Добавить(ПараметрыОбработки.Обработчик);
			КонецЕсли;
			
			Для Каждого ТекущийОбработчик Из МассивОбработчиков Цикл
				ОписаниеОшибки = "";		
				Попытка		
					
					ПараметрыОбработки.ОписаниеОшибки = "Запуск обработчика [" + ТекущийОбработчик + "]...";
					ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
					
					Если ТекущийОбработчик.ТипОбработчика = Перечисления.ТипыОбработчиков.Обработчик1СПредприятие Тогда
						
						Если ТекущийОбработчик.КонтекстИсполнения = Перечисления.КонтекстыИсполненияОбработчиков.КонтекстИнформационнойБазы Тогда				
													
							Результат = Результат И ЗадачиНаСервере.ЗапуститьВнешнийКодОбработчика(ПараметрыОбработки, ТекущийОбработчик, ОписаниеОшибки, ИнформационнаяБаза_ОбъектПодключения, УбиватьОбъектПоЗавершении);
							
						Иначе
							
							Выполнить(ТекущийОбработчик.КодОбработчика);
							
						КонецЕсли;
						
					ИначеЕсли ТекущийОбработчик.ТипОбработчика = Перечисления.ТипыОбработчиков.ОбработчикSQL Тогда
						
						РезультатSQLЗапроса = ВыполнитьЗапросSQL(ПараметрыОбработки, ТекущийОбработчик.КодОбработчика);
						ПараметрыОбработки.Вставить("РезультатSQLЗапроса", РезультатSQLЗапроса);
						Результат = РезультатSQLЗапроса.Выполнено;
						
					КонецЕсли;
					
					Если Результат Тогда 
						ПараметрыОбработки.ОписаниеОшибки = ?(ЗначениеЗаполнено(ОписаниеОшибки), ОписаниеОшибки, "Обработчик [" + ТекущийОбработчик + "] выполнен успешно...");
						ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
					Иначе
						ПараметрыОбработки.ОписаниеОшибки = "Ошибка при выполнении обработчика [" + ТекущийОбработчик + "]: " + ОписаниеОшибки;
						ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
					КонецЕсли;
					
				Исключение			
					
					ПараметрыОбработки.ОписаниеОшибки = "Ошибка выполнения обработчика [" + ТекущийОбработчик + "] для ИБ <" + ПараметрыОбработки.ИнформационнаяБаза + ">: " + ОписаниеОшибки() + Символы.ПС + "Содержание ошибки исполнения: " + ОписаниеОшибки;
					ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
					
				КонецПопытки;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Если УбиватьОбъектПоЗавершении Тогда  ИнформационнаяБаза_ОбъектПодключения = Неопределено; КонецЕсли;
	
	СниматьБлокировкуСеансов = ?(НЕ ПараметрыОбработки.СостояниеБлокировкиСеансовДоНачалаОбработки = Неопределено, НЕ ПараметрыОбработки.СостояниеБлокировкиСеансовДоНачалаОбработки, Истина);
	СниматьБлокировкуРегламентныхЗаданий = ?(НЕ ПараметрыОбработки.СостояниеБлокировкиРегламентныхЗаданийДоНачалаОбработки = Неопределено, НЕ ПараметрыОбработки.СостояниеБлокировкиРегламентныхЗаданийДоНачалаОбработки, Истина);
	ЗадачиНаСервере.ЗавершитьВыполнениеОперации(ПараметрыОбработки, ВидОбработкиВнешний, Результат, СниматьБлокировкуСеансов, СниматьБлокировкуРегламентныхЗаданий);
	
	Возврат Результат;	
КонецФункции

&НаСервере
//
//
Функция ПолучитьСтруктуруПараметровОбработки(ИнформационнаяБаза) Экспорт
	
	ИнформационнаяБазаСтруктура = ОбщегоНазначенияСервер.ПолучитьДанныеПоОбъекту(ИнформационнаяБаза);
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("ИнформационнаяБаза", ИнформационнаяБазаСтруктура.Ссылка);
	// логи
	ПараметрыОбработки.Вставить("ТихийРежим", Ложь);
	ПараметрыОбработки.Вставить("ОписаниеОшибки", "");
	ПараметрыОбработки.Вставить("ПериодЖурнала", ТекущаяДатаСеанса());
	ПараметрыОбработки.Вставить("ЖурналВыполнения", "");
	ПараметрыОбработки.Вставить("ФайлТехнологическогоЛога", Неопределено);	
	ПараметрыОбработки.Вставить("ВидОбработки", Неопределено);	
	// архив
	ПараметрыОбработки.Вставить("АвтоматическиПерезаписыватьАрхив", ИнформационнаяБазаСтруктура.АвтоматическиПерезаписыватьАрхив);		
	ПараметрыОбработки.Вставить("ВыгружатьАрхив", Ложь);
	ПараметрыОбработки.Вставить("ТипАрхива", Перечисления.ТипыФайловАрхива.Архив1С);
	ПараметрыОбработки.Вставить("ИмяАрхива", Неопределено);	
	Если ИнформационнаяБазаСтруктура.ПереопределитьГлобальныеПараметрыДействийСАрхивами Тогда
		ПараметрыОбработки.Вставить("ВариантХраненияФайлаАрхиваВБазе", ИнформационнаяБазаСтруктура.ВариантХраненияФайлаАрхиваВБазе);
		ПараметрыОбработки.Вставить("ХранитьВБазеСсылкиНаВнешниеФайлыАрхивов", ИнформационнаяБазаСтруктура.ХранитьВБазеСсылкиНаВнешниеФайлыАрхивов);
	Иначе
		ПараметрыОбработки.Вставить("ВариантХраненияФайлаАрхиваВБазе", Константы.ВариантХраненияФайлаАрхиваВБазе.Получить());
		ПараметрыОбработки.Вставить("ХранитьВБазеСсылкиНаВнешниеФайлыАрхивов", Константы.ХранитьВБазеСсылкиНаВнешниеФайлыАрхивов.Получить());
	КонецЕсли;	
	ПараметрыОбработки.Вставить("ЗагружаемВнешнийФайл", Ложь);	
	// прочие		
	ПараметрыОбработки.Вставить("СостояниеБлокировкиСеансовДоНачалаОбработки", Неопределено);
	ПараметрыОбработки.Вставить("СостояниеБлокировкиРегламентныхЗаданийДоНачалаОбработки", Неопределено);
	ПараметрыОбработки.Вставить("ОтключатьСеансы", Ложь);
	ПараметрыОбработки.Вставить("ТаблицаОтключаемыхСеансов", Неопределено);	
	ПараметрыОбработки.Вставить("ОткрыватьБазуПослеОбновления", Истина);	
	ПараметрыОбработки.Вставить("Обработчик", Неопределено);
	ПараметрыОбработки.Вставить("ПараметрыТестирования", Неопределено);	
	ПараметрыОбработки.Вставить("ОтображатьТрассировкуСообщений", Константы.ОтображатьТрассировкуСообщений.Получить());
	ПараметрыОбработки.Вставить("КлиентскийЗапуск", Ложь);
	// параметры запуска клиентского приложения
	ПараметрыОбработки.Вставить("ВидРежимаЗапуска", Неопределено);
	ПараметрыОбработки.Вставить("Пользователь", ?(ЗначениеЗаполнено(ИнформационнаяБазаСтруктура.Пользователь), ОбщегоНазначенияСервер.ПолучитьДанныеПоОбъекту(ИнформационнаяБазаСтруктура.Пользователь), Неопределено));
	// хранилище
	ПараметрыОбработки.Вставить("ХранилищеКонфигураций", ИнформационнаяБазаСтруктура.ХранилищеКонфигураций);
	ПараметрыОбработки.Вставить("ПользовательХранилища", ИнформационнаяБазаСтруктура.ПользовательХранилища);	
	ПараметрыОбработки.Вставить("АвтоматическоеПодключениеКХранилищуПриЗапускеКонфигуратора", Ложь);
	
	ПараметрыОбработки.Вставить("ПравилаОбъединения", Неопределено);
	
	ПараметрыОбработки.Вставить("ВнешниеПараметры", Неопределено);
		
	Возврат ПараметрыОбработки
КонецФункции

&НаСервере
//
//
Функция ПолучитьСтруктуруПараметровТестирования() Экспорт
	ПараметрыТестирования = Новый Структура();	
	ПараметрыТестирования.Вставить("РеиндексацияТаблиц", Ложь);
	ПараметрыТестирования.Вставить("ПроверкаЛогическойЦелостности", Ложь);
	ПараметрыТестирования.Вставить("ПроверкаСсылочнойЦелостности", Ложь);	
	ПараметрыТестирования.Вставить("ПересчетИтогов", Ложь);
	ПараметрыТестирования.Вставить("СжатиеТаблиц", Ложь);
	ПараметрыТестирования.Вставить("РеструктуризацияТаблиц", Ложь);
	ПараметрыТестирования.Вставить("ТолькоТестирование", Ложь);
	ПараметрыТестирования.Вставить("ОперацияПоНесуществующимСсылкам", 0);		// 0 - не изменять; 1 - создавать объекты; 2 - очищать объекты
	ПараметрыТестирования.Вставить("ОперацияПриЧастичноПотереОбъектов", 0);		// 0 - не изменять; 1 - создавать объекты; 1 - удалять объекты
	Возврат ПараметрыТестирования;
КонецФункции

&НаСервере
//
//
Функция СоздатьПодключениеSQL(ПараметрыОбработки) Экспорт
	COMОбъектSQL = Неопределено;
	Попытка
		
		ПараметрыОбработкиИнформационнаяБазаСерверSQL = ПараметрыОбработки.ИнформационнаяБаза.СерверSQL;
		ИнформационнаяБазаСерверSQL = ПараметрыОбработкиИнформационнаяБазаСерверSQL;
		ИнформационнаяБазаСерверSQLПользователь = ПараметрыОбработкиИнформационнаяБазаСерверSQL.Пользователь;
		
		COMОбъектSQL = Новый COMОбъект("ADODB.Connection");
		COMОбъектSQL.ConnectionTimeOut	= 10;
		COMОбъектSQL.CommandTimeOut	= 10; 
		COMОбъектSQL.ConnectionString    = "Provider=SQLOLEDB; SERVER=" + ИнформационнаяБазаСерверSQL 
		+ "; Database=" + СокрЛП(ПараметрыОбработки.ИнформационнаяБаза.ИмяБДSQL) 
		+ "; UID=" + СокрЛП(ИнформационнаяБазаСерверSQLПользователь) 
		+ "; PWD=" + ИнформационнаяБазаСерверSQLПользователь.Пароль + ";";  
		COMОбъектSQL.Open();   
		Если COMОбъектSQL.State() = 0 Тогда 
			ВызватьИсключение "Не удалось подключиться к SQL <" + ПараметрыОбработки.ИнформационнаяБаза + ">";
		КонецЕсли;
	Исключение
		COMОбъектSQL = Неопределено;
		ПараметрыОбработки.ОписаниеОшибки = "Не удалось создать объект подключения к SQL <" + ПараметрыОбработки.ИнформационнаяБаза + ">: " + ОписаниеОшибки();
	КонецПопытки;
	Возврат COMОбъектSQL;
КонецФункции

&НаСервере
//
//
Функция УстановитьОбновление(ПараметрыОбработки, РелизОбновления, МассивРелизовОбновления = Неопределено) Экспорт
	
	Результат = Ложь;
	
	УстановкаИзХранилища = (ТипЗнч(РелизОбновления) = Тип("СправочникСсылка.Сервера"));
	
	ВидОбработкиВнешний = ПараметрыОбработки.ВидОбработки;
	Если НЕ УстановкаИзХранилища Тогда
		ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.ОбновлениеИБ;
	Иначе
		ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.ОбновлениеИБИзХранилищаКонфигураций;
	КонецЕсли;
	
	ТекстСостояния = ЗадачиНаСервере.ПолучитьТекстСостояния(ПараметрыОбработки);
	
	Если ОбщегоНазначенияСервер.ДопустимоИспользованиеФайловыхЗаданий() И ПараметрыОбработки.ВидОбработки = ВидОбработкиВнешний Тогда
		ПараметрыФоновогоЗадания = Новый Массив;
		ПараметрыФоновогоЗадания.Добавить(ПараметрыОбработки);
		ПараметрыФоновогоЗадания.Добавить(РелизОбновления);
		ПараметрыФоновогоЗадания.Добавить(МассивРелизовОбновления);
		ФоновыеЗадания.Выполнить("ЗадачиНаСервере.ВыполнитьУстановкуОбновлений", ПараметрыФоновогоЗадания, ТекстСостояния);
		Результат = Истина;
	Иначе
		Результат = ЗадачиНаСервере.ВыполнитьУстановкуОбновлений(ПараметрыОбработки, РелизОбновления, МассивРелизовОбновления);		
	КонецЕсли;	
	
	ПараметрыОбработки.ВидОбработки = ВидОбработкиВнешний;
	
	Возврат Результат;
КонецФункции

&НаСервере
//
//
Функция ВыполнитьУстановкуОбновлений(ПараметрыОбработки, РелизОбновления, МассивРелизовОбновления = Неопределено) Экспорт
	
	Результат = Истина;
	
	УстановкаИзХранилища = (ТипЗнч(РелизОбновления) = Тип("СправочникСсылка.Сервера"));
	
	ВидОбработкиВнешний = ПараметрыОбработки.ВидОбработки;
	Если НЕ УстановкаИзХранилища Тогда
		ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.ОбновлениеИБ;
	Иначе
		ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.ОбновлениеИБИзХранилищаКонфигураций;
	КонецЕсли;
	
	ТекстСостояния = ЗадачиНаСервере.ПолучитьТекстСостояния(ПараметрыОбработки);	
	
	МассивРелизовОбновления = Новый Массив;
	Если УстановкаИзХранилища Тогда
		МассивРелизовОбновления.Добавить(РелизОбновления.Ссылка);
	Иначе 
		Если НЕ ЗадачиНаСервере.ПроверитьКорректностьОбновленияРекурсивно(ПараметрыОбработки, РелизОбновления, МассивРелизовОбновления) Тогда				
			МассивРелизовОбновления = Неопределено;
		КонецЕсли;	
	КонецЕсли;
	
	Если МассивРелизовОбновления <> Неопределено Тогда
		
		Результат = ЗадачиНаСервере.ПодготовитьВыполнениеОперации(ПараметрыОбработки, ВидОбработкиВнешний, Результат);
		
		Если Результат Тогда			
			
			ИнформационнаяБазаРабочийРелиз = ПараметрыОбработки.ИнформационнаяБаза.РелизОбновления;
			НомерОбновления = 0;
			Для Каждого ТекущийРелизОбновления Из МассивРелизовОбновления Цикл
				
				КодВозврата = -1;
				НомерОбновления = НомерОбновления + 1;
				
				Если УстановкаИзХранилища Тогда
					
					ПараметрыОбработки.ОписаниеОшибки = "Установка обновления из хранилища <" + РелизОбновления.Ссылка + "> для <" + ПараметрыОбработки.ИнформационнаяБаза + ">";
					ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
					
					Результат = Результат И ?(Результат, ЗадачиНаСервере.ЗапуститьПриложениеСервер(ПараметрыОбработки, ЗадачиНаСервере.ПолучитьКомандуУстановкиОбновленияИзХранилища(ПараметрыОбработки, РелизОбновления), КодВозврата), Результат);
					
				Иначе 
					
					ИмяФайлаОбновления = ЗадачиНаСервере.ПолучитьКаталогОбновленияРелиза(ПараметрыОбработки, ТекущийРелизОбновления);
					ТипОбновления = ПараметрыОбработки.ИнформационнаяБаза.ТипОбновления;
					
					ИмяФайлаПравилОбъединения = Неопределено;
					Если ЗначениеЗаполнено(ПараметрыОбработки.ПравилаОбъединения) И ЗадачиНаСервере.ПроверитьПрименимостьПравилОбъединения(ПараметрыОбработки.ПравилаОбъединения, ИнформационнаяБазаРабочийРелиз, ТекущийРелизОбновления) Тогда
						ИмяФайлаПравилОбъединения = Справочники.ПравилаОбъединения.ЗаписатьПравилаОбновленияВоВременныйФайл(ПараметрыОбработки.ПравилаОбъединения.ХранилищеДанных.Получить());
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ИмяФайлаОбновления) Тогда
						
						ПараметрыОбработки.ОписаниеОшибки = "Установка релиза обновления [" + ТекущийРелизОбновления + "] по базе <" + ПараметрыОбработки.ИнформационнаяБаза + ">...";
						ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);					
						
						Результат = Результат И ?(Результат, ЗадачиНаСервере.ЗапуститьПриложениеСервер(ПараметрыОбработки, ЗадачиНаСервере.ПолучитьКомандуУстановкиОбновления(ПараметрыОбработки, ТекущийРелизОбновления, ИмяФайлаОбновления, ИмяФайлаПравилОбъединения), КодВозврата), Результат);
						
						Если Результат Тогда					
							ИнформационнаяБазаРабочийРелиз = ТекущийРелизОбновления;
							ПараметрыОбработки.ОписаниеОшибки = "Релиз обновления [" + ТекущийРелизОбновления + "] по базе <" + ПараметрыОбработки.ИнформационнаяБаза + "> установлен успешно.";
							ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
							
							Если Результат И ЗначениеЗаполнено(ПараметрыОбработки.Обработчик) Тогда
								ЗадачиНаСервере.ВыполнитьЗапускОбработчика(ПараметрыОбработки, , Истина);
							КонецЕсли;
							
						КонецЕсли;
						
					Иначе
						ПараметрыОбработки.ОписаниеОшибки = "Не найден файл поставки обновления <" + ТекущийРелизОбновления + ">!" + Символы.ПС + "Тип обновления: " + ТипОбновления;
						ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
						Прервать;
					КонецЕсли;
					
					Попытка
						УдалитьФайлы(ЗадачиНаСервере.ПолучитьИмяВременногоКаталогаРелизаОбновления(ТекущийРелизОбновления, СокрЛП(ПараметрыОбработки.ИнформационнаяБаза.УникальныйИдентификатор())));
					Исключение
					КонецПопытки;
					
					Попытка
						Если ЗначениеЗаполнено(ИмяФайлаПравилОбъединения) Тогда 
							УдалитьФайлы(ИмяФайлаПравилОбъединения);
						КонецЕсли;
					Исключение
					КонецПопытки;
					
				КонецЕсли;
				
			КонецЦикла;					
			
			
		КонецЕсли;					
	
		СниматьБлокировкуСеансов = ?(НЕ ПараметрыОбработки.СостояниеБлокировкиСеансовДоНачалаОбработки = Неопределено, НЕ ПараметрыОбработки.СостояниеБлокировкиСеансовДоНачалаОбработки, Истина);
		СниматьБлокировкуРегламентныхЗаданий = ?(НЕ ПараметрыОбработки.СостояниеБлокировкиРегламентныхЗаданийДоНачалаОбработки = Неопределено, НЕ ПараметрыОбработки.СостояниеБлокировкиРегламентныхЗаданийДоНачалаОбработки, Истина);
		ЗадачиНаСервере.ЗавершитьВыполнениеОперации(ПараметрыОбработки, ВидОбработкиВнешний, Результат, СниматьБлокировкуСеансов, СниматьБлокировкуРегламентныхЗаданий);
		
		Если ПараметрыОбработки.ОткрыватьБазуПослеОбновления Тогда
			ПараметрыОбработкиОповещения = ЗадачиНаСервере.ПолучитьСтруктуруПараметровОбработки(ПараметрыОбработки.ИнформационнаяБаза);
			ЗаполнитьЗначенияСвойств(ПараметрыОбработкиОповещения, ПараметрыОбработки);
			ОбработкаОповещенийССервераСервер.ОтправитьСообщениеССервера(Перечисления.ТипыОповещенийССервера.КомандаОткрытияВРежимеПредприятия, ПараметрыОбработкиОповещения);
		КонецЕсли;
		
	Иначе 
		ПараметрыОбработки.ОписаниеОшибки = "Выбранный релиз обновления [" + РелизОбновления + "] не подходит для выполнения операции установки обновления по базе <" + ПараметрыОбработки.ИнформационнаяБаза + ">.";
		ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
	КонецЕсли;		
	
	Возврат Результат;	
КонецФункции

&НаСервере
//
//
Функция ОтключитьСеансы(ПараметрыОбработки) Экспорт
	
	Результат = Ложь;
	
	ВидОбработкиВнешний = ПараметрыОбработки.ВидОбработки;
	ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.ОтключитьСеансы;
	
	ТекстСостояния = ЗадачиНаСервере.ПолучитьТекстСостояния(ПараметрыОбработки);
	
	ПараметрыОбработки.ОтключатьСеансы = Истина;
	
	Если ОбщегоНазначенияСервер.ДопустимоИспользованиеФайловыхЗаданий() И ПараметрыОбработки.ВидОбработки = ВидОбработкиВнешний Тогда
		ПараметрыФоновогоЗадания = Новый Массив;
		ПараметрыФоновогоЗадания.Добавить(ПараметрыОбработки);
		ПараметрыФоновогоЗадания.Добавить(Истина);
		ФоновыеЗадания.Выполнить("ЗадачиНаСервере.ВыполнитьОтключениеСеансов", ПараметрыФоновогоЗадания, ТекстСостояния);
		Результат = Истина;
	Иначе
		Результат = ЗадачиНаСервере.ВыполнитьОтключениеСеансов(ПараметрыОбработки, Истина);		
	КонецЕсли;	
	
	ПараметрыОбработки.ВидОбработки = ВидОбработкиВнешний;
	
	Возврат Результат;
КонецФункции

&НаСервере
//
//
Функция ВыполнитьОтключениеСеансов(ПараметрыОбработки, УстанавливатьБлокировкуНаЗаписьИБ = Ложь) Экспорт
	
	Результат = Истина;
	
	Если ПараметрыОбработки.ОтключатьСеансы И НЕ ПараметрыОбработки.ИнформационнаяБаза.ТипИБ = Перечисления.ТипыИБ.Файловая Тогда
		
		ВидОбработкиВнешний = ПараметрыОбработки.ВидОбработки;
		ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.ОтключитьСеансы;
	
		ТекстСостояния = ЗадачиНаСервере.ПолучитьТекстСостояния(ПараметрыОбработки);
		
		Если УстанавливатьБлокировкуНаЗаписьИБ Тогда
			ПараметрыОбработки.ОтключатьСеансы = НЕ ПараметрыОбработки.ОтключатьСеансы;
			Результат = ЗадачиНаСервере.ПодготовитьВыполнениеОперации(ПараметрыОбработки, ВидОбработкиВнешний, Результат, Ложь);
			ПараметрыОбработки.ОтключатьСеансы = НЕ ПараметрыОбработки.ОтключатьСеансы;
		КонецЕсли;
		
		Если Результат Тогда 
			
			Результат = Ложь;
			ДанныеПодключенияКСерверу = ЗадачиНаСервере.СоздатьОбъектПодключенияКРабочемуПроцессу(ПараметрыОбработки);
			Если НЕ ДанныеПодключенияКСерверу.AgentConnection = Неопределено Тогда
				Для Каждого ТекущиЭлементМассиваСоединенийСРабочимПроцессом Из ДанныеПодключенияКСерверу.МассивСоединениеСРабочимПроцессом Цикл
					//ОбъектРабочийПроцесс = ТекущиЭлементМассиваСоединенийСРабочимПроцессом.WorkingProcess;
					ОбъектПодключенияКРабочемуПроцессу = ТекущиЭлементМассиваСоединенийСРабочимПроцессом.WorkingProcessConnection;
					Если ОбъектПодключенияКРабочемуПроцессу = Неопределено Тогда Продолжить; КонецЕсли;
					//МассивОписанийБаз = ОбъектПодключенияКРабочемуПроцессу.GetInfoBases();			
					МассивОписанийБаз = ДанныеПодключенияКСерверу.AgentConnection.GetInfoBases(ТекущиЭлементМассиваСоединенийСРабочимПроцессом.Cluster);						
					НайденноеОписаниеИБ = Неопределено;
					Для Каждого ОписаниеИБ из МассивОписанийБаз Цикл
						Если НРег(ОписаниеИБ.Name) = НРег(СокрЛП(ПараметрыОбработки.ИнформационнаяБаза.ИмяКаталогИБ)) Тогда
							НайденноеОписаниеИБ = ОписаниеИБ;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если НайденноеОписаниеИБ <> Неопределено Тогда				
						ДопустимыеСеансы = Новый СписокЗначений;
						ДопустимыеСеансы.Добавить("comconnection");
						ДопустимыеСеансы.Добавить("srvrconsole");
						Сеансы = ДанныеПодключенияКСерверу.AgentConnection.GetInfoBaseSessions(ТекущиЭлементМассиваСоединенийСРабочимПроцессом.Cluster, НайденноеОписаниеИБ);
						Для каждого ТекущийСеанс из Сеансы Цикл
							Если ПараметрыОбработки.ТаблицаОтключаемыхСеансов = Неопределено Тогда
								
								Если ДопустимыеСеансы.НайтиПоЗначению(нРег(ТекущийСеанс.AppID)) = Неопределено Тогда					
									ДанныеПодключенияКСерверу.AgentConnection.TerminateSession(ТекущиЭлементМассиваСоединенийСРабочимПроцессом.Cluster, ТекущийСеанс);												
								КонецЕсли;
								
							Иначе 
								
								Для Каждого ТекущаяСтрокаТаблицаОтключаемыхСеансов Из ПараметрыОбработки.ТаблицаОтключаемыхСеансов Цикл
									Если ТекущаяСтрокаТаблицаОтключаемыхСеансов.НомерСеанса = ТекущийСеанс.SessionID Тогда					
										ДанныеПодключенияКСерверу.AgentConnection.TerminateSession(ТекущиЭлементМассиваСоединенийСРабочимПроцессом.Cluster, ТекущийСеанс);												
									КонецЕсли;
								КонецЦикла;
								
							КонецЕсли;
						КонецЦикла;
						Соединения = ДанныеПодключенияКСерверу.AgentConnection.GetInfoBaseConnections(ТекущиЭлементМассиваСоединенийСРабочимПроцессом.Cluster, НайденноеОписаниеИБ);
						Для каждого ТекущееСоединение из Соединения Цикл
							Если ПараметрыОбработки.ТаблицаОтключаемыхСеансов = Неопределено Тогда
								
								Если ДопустимыеСеансы.НайтиПоЗначению(нРег(ТекущееСоединение.Application)) = Неопределено Тогда					
									Попытка
										ОбъектПодключенияКРабочемуПроцессу.Disconnect(ТекущееСоединение);						
									Исключение
									КонецПопытки;
								КонецЕсли;
								
							Иначе 
								
								Для Каждого ТекущаяСтрокаТаблицаОтключаемыхСеансов Из ПараметрыОбработки.ТаблицаОтключаемыхСеансов Цикл
									Если ТекущаяСтрокаТаблицаОтключаемыхСеансов.НомерСоединения = ТекущееСоединение.ConnID Тогда					
										Попытка
											ОбъектПодключенияКРабочемуПроцессу.Disconnect(ТекущееСоединение);						
										Исключение
										КонецПопытки;												
									КонецЕсли;
								КонецЦикла;
								
							КонецЕсли;
						КонецЦикла;
						Результат = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ИнформационнаяБаза_ОбъектПодключения = ЗадачиНаСервере.СоздатьОбъектПодключения(ПараметрыОбработки);
			Если ИнформационнаяБаза_ОбъектПодключения <> Неопределено Тогда
				
				ИнформационнаяБаза_ОбъектПодключения_МассивФоновыхЗаданий = ИнформационнаяБаза_ОбъектПодключения.ФоновыеЗадания.ПолучитьФоновыеЗадания();
				Для Каждого ИнформационнаяБаза_ОбъектПодключения_ТекущееФоновоеЗадание Из ИнформационнаяБаза_ОбъектПодключения_МассивФоновыхЗаданий Цикл
					Попытка
						ИнформационнаяБаза_ОбъектПодключения_ТекущееФоновоеЗадание.Отменить();
					Исключение
					КонецПопытки;
				КонецЦикла;
				
			КонецЕсли;
			
			ДанныеПодключенияКСерверу = Неопределено;
			ИнформационнаяБаза_ОбъектПодключения_ТекущееФоновоеЗадание = Неопределено;
			ИнформационнаяБаза_ОбъектПодключения_МассивФоновыхЗаданий = Неопределено;
			ИнформационнаяБаза_ОбъектПодключения = Неопределено;			
			
		КонецЕсли;		
		
		Если НЕ Результат Тогда 
			ПараметрыОбработки.ОписаниеОшибки = "Нет активных сеансов, либо не выполнено отключении сеансов информационной базы <" + ПараметрыОбработки.ИнформационнаяБаза + ">";
			ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
		Иначе
			ПараметрыОбработки.ОписаниеОшибки = "Выполнено отключении сеансов информационной базы <" + ПараметрыОбработки.ИнформационнаяБаза + ">";
			ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
		КонецЕсли;
		
		//Если УстанавливатьБлокировкуНаЗаписьИБ Тогда
			ВыполняетсяТолькоОтключениеСеансов = (ВидОбработкиВнешний = ПараметрыОбработки.ВидОбработки);
			ЗадачиНаСервере.ЗавершитьВыполнениеОперации(ПараметрыОбработки, ВидОбработкиВнешний, Результат,
			НЕ ВыполняетсяТолькоОтключениеСеансов, НЕ ВыполняетсяТолькоОтключениеСеансов,
			НЕ ВыполняетсяТолькоОтключениеСеансов, УстанавливатьБлокировкуНаЗаписьИБ);
		//КонецЕсли;
		
		ОбработкаОповещенийССервераСервер.ОтправитьСообщениеССервера(Перечисления.ТипыОповещенийССервера.ИнформационныеБазыОбновитьФормаСписка, Неопределено);
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
//
//
Функция УстановитьБлокировкуРегламентныхЗаданий(ПараметрыОбработки, Установить = Неопределено, ИнформационнаяБаза_Объект = Неопределено) Экспорт	
	
	Результат = Ложь;
	
	ВидОбработкиВнешний = ПараметрыОбработки.ВидОбработки;
	Если Установить Тогда
		ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.БлокировкаРегламентныхЗаданийУстановить;		
	Иначе 
		ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.БлокировкаРегламентныхЗаданийСнять;
	КонецЕсли;
	
	ТекстСостояния = ЗадачиНаСервере.ПолучитьТекстСостояния(ПараметрыОбработки);
	
	Если ОбщегоНазначенияСервер.ДопустимоИспользованиеФайловыхЗаданий() И ПараметрыОбработки.ВидОбработки = ВидОбработкиВнешний Тогда
		ПараметрыФоновогоЗадания = Новый Массив;
		ПараметрыФоновогоЗадания.Добавить(ПараметрыОбработки);
		ПараметрыФоновогоЗадания.Добавить(Установить);
		ПараметрыФоновогоЗадания.Добавить(Неопределено);
		ФоновыеЗадания.Выполнить("ЗадачиНаСервере.ВыполнитьУстановкуБлокировкиРегламентныхЗаданий", ПараметрыФоновогоЗадания, ТекстСостояния);
		Результат = Истина;
	Иначе
		Результат = ЗадачиНаСервере.ВыполнитьУстановкуБлокировкиРегламентныхЗаданий(ПараметрыОбработки, Установить, ИнформационнаяБаза_Объект);		
	КонецЕсли;	
	
	ПараметрыОбработки.ВидОбработки = ВидОбработкиВнешний;
	
	Возврат Результат;
КонецФункции

&НаСервере
//
//
Функция ВыполнитьУстановкуБлокировкиРегламентныхЗаданий(ПараметрыОбработки, Установить = Ложь, ИнформационнаяБаза_Объект = Неопределено, ТолькоЧтение = Ложь) Экспорт	
	
	Результат = Истина;
	
	Если ПараметрыОбработки.ИнформационнаяБаза.ТипИБ = Перечисления.ТипыИБ.Файловая Тогда Возврат Результат; КонецЕсли;
	
	ВидОбработкиВнешний = ПараметрыОбработки.ВидОбработки;	
	Если Установить Тогда
		ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.БлокировкаРегламентныхЗаданийУстановить;		
	Иначе 
		ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.БлокировкаРегламентныхЗаданийСнять;
	КонецЕсли;	
	
	Если ПараметрыОбработки.ВидОбработки = ВидОбработкиВнешний Тогда
		Результат = ЗадачиНаСервере.УстановитьБлокировкуНаЗаписьИБ(ПараметрыОбработки, Истина);
	КонецЕсли;
	
	Если Результат Тогда
		Результат = Ложь;
		
		Если МенеджерRAS.СуществуютИсполняемыеФайлыRASRAC(ПараметрыОбработки) Тогда			
			ДетальнаяИнформацияПоБазеКластера = МенеджерRAS.ПолучитьДетальнуюИнформациюПоБазеКластера(ПараметрыОбработки);
			Если НЕ ДетальнаяИнформацияПоБазеКластера = Неопределено Тогда
				
				Если ПараметрыОбработки.СостояниеБлокировкиРегламентныхЗаданийДоНачалаОбработки = Неопределено Тогда
					ПараметрыОбработки.СостояниеБлокировкиРегламентныхЗаданийДоНачалаОбработки = ДетальнаяИнформацияПоБазеКластера.scheduled_jobs_deny;
				КонецЕсли;					
				
				Если НЕ ТолькоЧтение Тогда
					Результат = МенеджерRAS.УстановитьБлокировкуРегламентныхЗаданий(ПараметрыОбработки, Установить);			
				КонецЕсли;				
				
				Если ИнформационнаяБаза_Объект <> Неопределено Тогда					
					ДетальнаяИнформацияПоБазеКластера = МенеджерRAS.ПолучитьДетальнуюИнформациюПоБазеКластера(ПараметрыОбработки);
					Если НЕ ДетальнаяИнформацияПоБазеКластера = Неопределено Тогда
						ИнформационнаяБаза_Объект.УстановленаБлокировкаРегламентныхЗаданий = ДетальнаяИнформацияПоБазеКластера.scheduled_jobs_deny;					
						Результат = Истина;
					Иначе 
						Результат = Ложь;
					КонецЕсли;
				ИначеЕсли ТолькоЧтение И ИнформационнаяБаза_Объект = Неопределено Тогда
					Результат = Истина;
				КонецЕсли;				
				
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Результат Тогда
			ДанныеПодключенияКСерверу = ЗадачиНаСервере.СоздатьОбъектПодключенияКРабочемуПроцессу(ПараметрыОбработки);    
			Если НЕ ДанныеПодключенияКСерверу.AgentConnection = Неопределено Тогда
				Для Каждого ТекущиЭлементМассиваСоединенийСРабочимПроцессом Из ДанныеПодключенияКСерверу.МассивСоединениеСРабочимПроцессом Цикл
					ОбъектПодключенияКРабочемуПроцессу = ТекущиЭлементМассиваСоединенийСРабочимПроцессом.WorkingProcessConnection;
					Если ОбъектПодключенияКРабочемуПроцессу = Неопределено Тогда Продолжить; КонецЕсли;
					//МассивОписанийБаз = ДанныеПодключенияКСерверу.AgentConnection.GetInfoBases(ТекущиЭлементМассиваСоединенийСРабочимПроцессом.Cluster);
					МассивОписанийБаз = ОбъектПодключенияКРабочемуПроцессу.GetInfoBases();
					НайденноеОписаниеИБ = Неопределено;
					Для Каждого ОписаниеИБ из МассивОписанийБаз Цикл
						Если НРег(ОписаниеИБ.Name) = НРег(СокрЛП(ПараметрыОбработки.ИнформационнаяБаза.ИмяКаталогИБ)) Тогда
							НайденноеОписаниеИБ = ОписаниеИБ;
							Прервать;
						КонецЕсли;
					КонецЦикла;	
					Если НайденноеОписаниеИБ <> Неопределено Тогда
						
						Если ПараметрыОбработки.СостояниеБлокировкиРегламентныхЗаданийДоНачалаОбработки = Неопределено Тогда
							ПараметрыОбработки.СостояниеБлокировкиРегламентныхЗаданийДоНачалаОбработки = НайденноеОписаниеИБ.ScheduledJobsDenied;
						КонецЕсли;
						
						Если НЕ ТолькоЧтение Тогда
							
							//Если Установить Тогда
							//	ПараметрыОбработки.Вставить("КэшСостояниеБлокировкиРегламентныхЗаданий", НайденноеОписаниеИБ.ScheduledJobsDenied);
							//Иначе
							//	КэшСостояниеБлокировкиРегламентныхЗаданий = Неопределено;
							//	Если ПараметрыОбработки.Свойство("КэшСостояниеБлокировкиРегламентныхЗаданий", КэшСостояниеБлокировкиРегламентныхЗаданий) Тогда
							//		Установить = КэшСостояниеБлокировкиРегламентныхЗаданий;
							//	КонецЕсли;
							//КонецЕсли;
							
							НайденноеОписаниеИБ.ScheduledJobsDenied = Установить;
							ОбъектПодключенияКРабочемуПроцессу.UpdateInfoBase(НайденноеОписаниеИБ);		
							
						КонецЕсли;
						
						Если ИнформационнаяБаза_Объект <> Неопределено Тогда
							ИнформационнаяБаза_Объект.УстановленаБлокировкаРегламентныхЗаданий = НайденноеОписаниеИБ.ScheduledJobsDenied;
						КонецЕсли;
						
						Результат = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ДанныеПодключенияКСерверу = Неопределено;
			ОбъектПодключенияКРабочемуПроцессу = Неопределено;
			МассивОписанийБаз = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Результат Тогда
		ПараметрыОбработки.ОписаниеОшибки = "Ошибка установки блокировки регламентных заданий информационной базы <" + ПараметрыОбработки.ИнформационнаяБаза + ">";
		ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
	ИначеЕсли НЕ ТолькоЧтение Тогда
		ПараметрыОбработки.ОписаниеОшибки = ?(Установить, "Установлена", "Снята") + " блокировка регламентных заданий информационной базы <" + ПараметрыОбработки.ИнформационнаяБаза + ">";
		ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
	КонецЕсли;	
	
	Если ПараметрыОбработки.ВидОбработки = ВидОбработкиВнешний И НЕ ТолькоЧтение Тогда		
		
		ЗадачиНаСервере.ВыполнитьОбновлениеИнформацииПоБазе(ПараметрыОбработки, Ложь);
		
		ЗадачиНаСервере.УстановитьБлокировкуНаЗаписьИБ(ПараметрыОбработки, Ложь);
		
	КонецЕсли;
	
	ПараметрыОбработки.ВидОбработки = ВидОбработкиВнешний;
	
	Возврат Результат;
КонецФункции

&НаСервере
//
//
Функция УстановитьБлокировкуСеансовИБ(ПараметрыОбработки, Установить = Ложь) Экспорт
	
	Результат = Ложь;
	
	ВидОбработкиВнешний = ПараметрыОбработки.ВидОбработки;
	Если Установить Тогда
		ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.БлокировкаСеансовУстановить;		
	Иначе 
		ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.БлокировкаСеансовСнять;
	КонецЕсли;	
	
	ТекстСостояния = ЗадачиНаСервере.ПолучитьТекстСостояния(ПараметрыОбработки);
	
	Если ОбщегоНазначенияСервер.ДопустимоИспользованиеФайловыхЗаданий() И ПараметрыОбработки.ВидОбработки = ВидОбработкиВнешний Тогда
		ПараметрыФоновогоЗадания = Новый Массив;
		ПараметрыФоновогоЗадания.Добавить(ПараметрыОбработки);
		ПараметрыФоновогоЗадания.Добавить(Установить);		
		ФоновыеЗадания.Выполнить("ЗадачиНаСервере.ВыполнитьУстановкуБлокировкиСеансовИБ", ПараметрыФоновогоЗадания, ТекстСостояния);
		Результат = Истина;
	Иначе
		Результат = ЗадачиНаСервере.ВыполнитьУстановкуБлокировкиСеансовИБ(ПараметрыОбработки, Установить);		
	КонецЕсли;	
	
	ПараметрыОбработки.ВидОбработки = ВидОбработкиВнешний;
	
	Возврат Результат;

КонецФункции

&НаСервере
//
//
Функция ВыполнитьУстановкуБлокировкиСеансовИБ(ПараметрыОбработки, Установить = Ложь) Экспорт
	
	Результат = Истина;
	
	ВидОбработкиВнешний = ПараметрыОбработки.ВидОбработки;
	Если Установить Тогда
		ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.БлокировкаСеансовУстановить;		
	Иначе 
		ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.БлокировкаСеансовСнять;
	КонецЕсли;
	
	Если ПараметрыОбработки.ВидОбработки = ВидОбработкиВнешний Тогда
		Результат = ЗадачиНаСервере.УстановитьБлокировкуНаЗаписьИБ(ПараметрыОбработки, Истина);
	КонецЕсли;
	
	Если Результат Тогда
		Результат = Ложь;		
	КонецЕсли;
	
	Если Не Результат Тогда			
		
		Попытка
			
			Если МенеджерRAS.СуществуютИсполняемыеФайлыRASRAC(ПараметрыОбработки) Тогда			
				Результат = МенеджерRAS.УстановитьБлокировкуСеансовИБ(ПараметрыОбработки, Установить);
				Если Результат Тогда
					ПараметрыОбработки.ОписаниеОшибки = "Успешно выполнена команда RAS";
					ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ Результат Тогда
				ИнформационнаяБаза_ОбъектПодключения = ЗадачиНаСервере.СоздатьОбъектПодключения(ПараметрыОбработки);
				Если НЕ ИнформационнаяБаза_ОбъектПодключения = Неопределено Тогда					
					
					Если ПараметрыОбработки.СостояниеБлокировкиСеансовДоНачалаОбработки = Неопределено Тогда
						ИнформационнаяБаза_ОбъектПодключения_Блокировка = ИнформационнаяБаза_ОбъектПодключения.ПолучитьБлокировкуСеансов();	 
						ПараметрыОбработки.СостояниеБлокировкиСеансовДоНачалаОбработки = ИнформационнаяБаза_ОбъектПодключения_Блокировка.Установлена;
					КонецЕсли;
					
					Если Установить Тогда 
						ИнформационнаяБаза_ОбъектПодключения_Блокировка = ИнформационнаяБаза_ОбъектПодключения.NewObject("БлокировкаСеансов");
						ИнформационнаяБаза_ОбъектПодключения_Блокировка.КодРазрешения = ПараметрыОбработки.ИнформационнаяБаза.Пользователь.КодБлокировкиСеансов;
						ИнформационнаяБаза_ОбъектПодключения_Блокировка.Сообщение = "Выполняется обновление конфигурации!";
						ИнформационнаяБаза_ОбъектПодключения_Блокировка.Установлена = Истина;				
						ИнформационнаяБаза_ОбъектПодключения.УстановитьБлокировкуСеансов(ИнформационнаяБаза_ОбъектПодключения_Блокировка);		
						ИнформационнаяБаза_ОбъектПодключения_Блокировка = Неопределено;
						Результат = Истина;
					Иначе
						ИнформационнаяБаза_ОбъектПодключения_Блокировка = ИнформационнаяБаза_ОбъектПодключения.ПолучитьБлокировкуСеансов();
						ИнформационнаяБаза_ОбъектПодключения_Блокировка.Установлена = Ложь;			
						ИнформационнаяБаза_ОбъектПодключения.УстановитьБлокировкуСеансов(ИнформационнаяБаза_ОбъектПодключения_Блокировка);
						ИнформационнаяБаза_ОбъектПодключения_Блокировка = Неопределено;
						Результат = Истина;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			ПараметрыОбработки.ОписаниеОшибки = ?(Установить, "Установлена", "Снята") + " блокировка сеансов информационной базы <" + ПараметрыОбработки.ИнформационнаяБаза + ">";
			ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
			
		Исключение
			Результат = Ложь;		
			ПараметрыОбработки.ОписаниеОшибки = "Ошибка " + ?(Установить, "установки", "снятия") + " блокировки сеансов информационной базы <" + ПараметрыОбработки.ИнформационнаяБаза + ">: " + ОписаниеОшибки();
			ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
		КонецПопытки;	
		
		Если Установить И Результат Тогда
			ЗадачиНаСервере.ВыполнитьОтключениеСеансов(ПараметрыОбработки);
		КонецЕсли;			
		
		ИнформационнаяБаза_ОбъектПодключения = Неопределено;					
	КонецЕсли;
	
	Если ПараметрыОбработки.ВидОбработки = ВидОбработкиВнешний Тогда
		
		ЗадачиНаСервере.ВыполнитьОбновлениеИнформацииПоБазе(ПараметрыОбработки, Ложь);
		
		ЗадачиНаСервере.УстановитьБлокировкуНаЗаписьИБ(ПараметрыОбработки, Ложь);
		
	КонецЕсли;
	
	ПараметрыОбработки.ВидОбработки = ВидОбработкиВнешний;
	
	Возврат Результат;
КонецФункции

&НаСервере
//
//
Функция ОбновитьИнформациюПоБазе(ПараметрыОбработки) Экспорт 	
	
	Результат = Ложь;
	
	ВидОбработкиВнешний = ПараметрыОбработки.ВидОбработки;
	ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.ОбновлениеИнформации;
	
	ТекстСостояния = ЗадачиНаСервере.ПолучитьТекстСостояния(ПараметрыОбработки);
	
	Если ОбщегоНазначенияСервер.ДопустимоИспользованиеФайловыхЗаданий() И ПараметрыОбработки.ВидОбработки = ВидОбработкиВнешний Тогда
		ПараметрыФоновогоЗадания = Новый Массив;
		ПараметрыФоновогоЗадания.Добавить(ПараметрыОбработки);
		ПараметрыФоновогоЗадания.Добавить(Истина);
		ФоновыеЗадания.Выполнить("ЗадачиНаСервере.ВыполнитьОбновлениеИнформацииПоБазе", ПараметрыФоновогоЗадания, ТекстСостояния);
		Результат = Истина;
	Иначе
		Результат = ЗадачиНаСервере.ВыполнитьОбновлениеИнформацииПоБазе(ПараметрыОбработки, Истина);
	КонецЕсли;	
	
	ПараметрыОбработки.ВидОбработки = ВидОбработкиВнешний;
	
	Возврат Результат;
КонецФункции

&НаСервере
//
//
Функция ПодготовитьВыполнениеОперации(ПараметрыОбработки, ВидОбработкиВнешний, Результат = Истина, ВыполнитьВыгрузкуАрхива = Истина) Экспорт
	
	Если ПараметрыОбработки.ВидОбработки = ВидОбработкиВнешний Тогда
		
		ЖурналЛоговСервер.СформироватьДанныеФайлаЛога(ПараметрыОбработки);		
		
		Результат = Результат И ?(Результат, ЗадачиНаСервере.УстановитьБлокировкуНаЗаписьИБ(ПараметрыОбработки, Истина), Результат);		
		
		Результат = Результат И ?(Результат, ЗадачиНаСервере.ВыполнитьУстановкуБлокировкиРегламентныхЗаданий(ПараметрыОбработки, Истина,, НЕ ПараметрыОбработки.ОтключатьСеансы), Результат);			
		
		Если ПараметрыОбработки.ОтключатьСеансы Тогда
			
			Результат = Результат И ?(Результат, ЗадачиНаСервере.ВыполнитьУстановкуБлокировкиСеансовИБ(ПараметрыОбработки, Истина), Результат); 		
			
			Результат = Результат И ?(Результат, ЗадачиНаСервере.ПроверитьВозможностьМонопольногоЗапуска(ПараметрыОбработки), Результат);
			
		КонецЕсли;    
		
		ОбщегоНазначенияСервер.Пауза(2);
		
		Если ВыполнитьВыгрузкуАрхива Тогда 
			
			Результат = Результат И ?(Результат, ЗадачиНаСервере.ВыполнитьВыгрузкуАрхива(ПараметрыОбработки), Результат);
			
			ОбщегоНазначенияСервер.Пауза(2);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
//
//
Функция ЗавершитьВыполнениеОперации(ПараметрыОбработки, ВидОбработкиВнешний, Результат = Истина,
	СниматьБлокировкуСеансов = Истина, СниматьБлокировкуРегламентныхЗаданий = Истина,
	ВыполнитьОбновлениеИнформацииПоБазе = Истина, СнятьБлокировкуНаЗаписьИБ = Истина) Экспорт
	
	Если ПараметрыОбработки.ВидОбработки = ВидОбработкиВнешний Тогда		
		
		Если СниматьБлокировкуСеансов Тогда ЗадачиНаСервере.ВыполнитьУстановкуБлокировкиСеансовИБ(ПараметрыОбработки, Ложь); КонецЕсли;
		
		Если СниматьБлокировкуРегламентныхЗаданий Тогда ЗадачиНаСервере.ВыполнитьУстановкуБлокировкиРегламентныхЗаданий(ПараметрыОбработки, Ложь); КонецЕсли;
		
		Если ВыполнитьОбновлениеИнформацииПоБазе Тогда ЗадачиНаСервере.ВыполнитьОбновлениеИнформацииПоБазе(ПараметрыОбработки); КонецЕсли;
		
		Если СнятьБлокировкуНаЗаписьИБ Тогда ЗадачиНаСервере.УстановитьБлокировкуНаЗаписьИБ(ПараметрыОбработки, Ложь); КонецЕсли;
		
		ЖурналЛоговСервер.ЗаписатьВАрхивЛогов(ПараметрыОбработки, Результат);
		
	КонецЕсли;
	
	ПараметрыОбработки.ВидОбработки = ВидОбработкиВнешний;
	
	Возврат Результат;
КонецФункции

&НаСервере
//
//
Функция РедакцияПоНомеруРелиза(НомерРелиза) Экспорт
	Редакция = Неопределено;
	МассивЧастей = ОбщегоНазначенияСервер.РазложитьСтрокуВМассивПодстрок(НомерРелиза, ".");
	Если МассивЧастей.Количество() > 0 Тогда
		Редакция = МассивЧастей[0];
	КонецЕсли;
	Возврат Редакция;
КонецФункции

&НаСервере
//
//
Функция ВыполнитьОбновлениеИнформацииПоБазе(ПараметрыОбработки, УстанавливатьБлокировкуНаЗаписьИБ = Ложь) Экспорт 	
	
	Результат = Истина;
	
	ВидОбработкиВнешний = ПараметрыОбработки.ВидОбработки;	
	ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.ОбновлениеИнформации;
	
	Если УстанавливатьБлокировкуНаЗаписьИБ Тогда
		Результат = ЗадачиНаСервере.ПодготовитьВыполнениеОперации(ПараметрыОбработки, ВидОбработкиВнешний, Результат);	
	КонецЕсли;
	
	Если Результат Тогда
		
		Результат = Ложь;						
		ИнформационнаяБаза_ОбъектПодключения = ЗадачиНаСервере.СоздатьОбъектПодключения(ПараметрыОбработки);
		Если ИнформационнаяБаза_ОбъектПодключения = Неопределено Тогда 
			
			Результат = Ложь;
			
		Иначе			
			
			ИнформационнаяБаза_ОбъектПодключения_Метаданные = ИнформационнаяБаза_ОбъектПодключения.Метаданные;
			ИнформационнаяБаза_Объект = ПараметрыОбработки.ИнформационнаяБаза.ПолучитьОбъект();	
			СтрокаВидКонфигурации = СокрЛП(ИнформационнаяБаза_ОбъектПодключения_Метаданные.Имя);
			Редакция = ЗадачиНаСервере.РедакцияПоНомеруРелиза(ИнформационнаяБаза_ОбъектПодключения_Метаданные.Версия);
			ИнформационнаяБаза_ОбъектВидКонфигурации = ОбщегоНазначенияСервер.ПолучитьДанныеПоОбъекту(ИнформационнаяБаза_Объект.ВидКонфигурации);
			ИнформационнаяБаза_ОбъектВидКонфигурацииНаименование = Неопределено;
			ИнформационнаяБаза_ОбъектВидКонфигурацииРедакция = Неопределено;
			Если ЗначениеЗаполнено(ИнформационнаяБаза_ОбъектВидКонфигурации) Тогда
				ИнформационнаяБаза_ОбъектВидКонфигурацииНаименование = СокрЛП(ИнформационнаяБаза_ОбъектВидКонфигурации.Наименование);
				ИнформационнаяБаза_ОбъектВидКонфигурацииРедакция = СокрЛП(ИнформационнаяБаза_ОбъектВидКонфигурации.Редакция);
			КонецЕсли;
			Если СтрокаВидКонфигурации <> ИнформационнаяБаза_ОбъектВидКонфигурацииНаименование  
				ИЛИ Редакция <> ИнформационнаяБаза_ОбъектВидКонфигурацииРедакция Тогда				
				ИнформационнаяБаза_Объект.ВидКонфигурации = ПолучитьВидКонфигурацииПоНаименованию(СтрокаВидКонфигурации, Редакция);
			КонецЕсли;
			ИнформационнаяБаза_Объект.РелизОбновления = ПолучитьРелизПоНомеру(ИнформационнаяБаза_Объект.ВидКонфигурации ,ИнформационнаяБаза_ОбъектПодключения_Метаданные.Версия);
			
			ПолученаИнформацияПоБлокировкам = Ложь;			
			ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);	
			Если МенеджерRAS.СуществуютИсполняемыеФайлыRASRAC(ПараметрыОбработки) Тогда				
				ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);	
				ДетальнаяИнформацияПоБазеКластера = МенеджерRAS.ПолучитьДетальнуюИнформациюПоБазеКластера(ПараметрыОбработки);
				Если НЕ ДетальнаяИнформацияПоБазеКластера = Неопределено Тогда
					
					Если ПараметрыОбработки.СостояниеБлокировкиРегламентныхЗаданийДоНачалаОбработки = Неопределено Тогда
						ПараметрыОбработки.СостояниеБлокировкиРегламентныхЗаданийДоНачалаОбработки = ДетальнаяИнформацияПоБазеКластера.scheduled_jobs_deny;
					КонецЕсли;					
					
					Если ПараметрыОбработки.СостояниеБлокировкиСеансовДоНачалаОбработки = Неопределено Тогда
						ПараметрыОбработки.СостояниеБлокировкиСеансовДоНачалаОбработки = ДетальнаяИнформацияПоБазеКластера.sessions_deny;
					КонецЕсли;								
					
					ИнформационнаяБаза_Объект.УстановленаБлокировкаРегламентныхЗаданий = ДетальнаяИнформацияПоБазеКластера.scheduled_jobs_deny;				
					ИнформационнаяБаза_Объект.УстановленаБлокировкаCеансов = ДетальнаяИнформацияПоБазеКластера.sessions_deny;
					
					ПолученаИнформацияПоБлокировкам = Истина;
					
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ПолученаИнформацияПоБлокировкам Тогда
				
				ИнформационнаяБаза_ОбъектПодключения_Блокировка = ИнформационнаяБаза_ОбъектПодключения.ПолучитьБлокировкуСеансов();	 
				ИнформационнаяБаза_Объект.УстановленаБлокировкаCеансов = ИнформационнаяБаза_ОбъектПодключения_Блокировка.Установлена;
				
				Если ПараметрыОбработки.СостояниеБлокировкиСеансовДоНачалаОбработки = Неопределено Тогда
					ПараметрыОбработки.СостояниеБлокировкиСеансовДоНачалаОбработки = ИнформационнаяБаза_ОбъектПодключения_Блокировка.Установлена;
				КонецЕсли;
				
				ЗадачиНаСервере.ВыполнитьУстановкуБлокировкиРегламентныхЗаданий(ПараметрыОбработки, ,ИнформационнаяБаза_Объект, Истина);		
			КонецЕсли;
			
			ИнформационнаяБаза_Объект.Записать();
			
			ИнформационнаяБаза_ОбъектПодключения_Метаданные = Неопределено;
			ИнформационнаяБаза_ОбъектПодключения_Блокировка = Неопределено;
			ИнформационнаяБаза_ОбъектПодключения = Неопределено;	
			ИнформационнаяБаза_Объект = Неопределено;
			
			Результат = Истина;
			
		КонецЕсли;
		
		
	КонецЕсли;
	
	ПараметрыОбработки.ОписаниеОшибки = ?(Результат, "Успешно обновлены сведения","Ошибка обновления сведений") + " информационной базы <" + ПараметрыОбработки.ИнформационнаяБаза + ">";
	ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);	
	
	//Если УстанавливатьБлокировкуНаЗаписьИБ Тогда
		ВыполняетсяТолькоОбновлениеИнформации = (ВидОбработкиВнешний = ПараметрыОбработки.ВидОбработки);
		ЗадачиНаСервере.ЗавершитьВыполнениеОперации(ПараметрыОбработки, ВидОбработкиВнешний, Результат,
		НЕ ВыполняетсяТолькоОбновлениеИнформации, НЕ ВыполняетсяТолькоОбновлениеИнформации,
		НЕ ВыполняетсяТолькоОбновлениеИнформации, УстанавливатьБлокировкуНаЗаписьИБ);
	//КонецЕсли;
	
	ОбработкаОповещенийССервераСервер.ОтправитьСообщениеССервера(Перечисления.ТипыОповещенийССервера.ИнформационныеБазыОбновитьФормаСписка, Неопределено);
	
	Возврат Результат;
КонецФункции

&НаСервере
//
//
Функция КомандаЗапуститьТестированиеИсправление(ПараметрыОбработки) Экспорт 	
	
	Результат = Ложь;
	
	ВидОбработкиВнешний = ПараметрыОбработки.ВидОбработки;
	ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.Тестирование;
	
	ТекстСостояния = ЗадачиНаСервере.ПолучитьТекстСостояния(ПараметрыОбработки);
	
	Если ОбщегоНазначенияСервер.ДопустимоИспользованиеФайловыхЗаданий() И ПараметрыОбработки.ВидОбработки = ВидОбработкиВнешний Тогда
		ПараметрыФоновогоЗадания = Новый Массив;
		ПараметрыФоновогоЗадания.Добавить(ПараметрыОбработки);
		ФоновыеЗадания.Выполнить("ЗадачиНаСервере.ВыполнитьТестированиеИсправление", ПараметрыФоновогоЗадания, ТекстСостояния);
		Результат = Истина;
	Иначе
		Результат = ЗадачиНаСервере.ВыполнитьТестированиеИсправление(ПараметрыОбработки);
	КонецЕсли;	
	
	ПараметрыОбработки.ВидОбработки = ВидОбработкиВнешний;
	
	Возврат Результат;
КонецФункции

//
//
Функция ВыполнитьТестированиеИсправление(ПараметрыОбработки) Экспорт
	Результат = Истина;
	
	ВидОбработкиВнешний = ПараметрыОбработки.ВидОбработки;
	ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.Тестирование;
	
	ТекстСостояния = ЗадачиНаСервере.ПолучитьТекстСостояния(ПараметрыОбработки);		
	
	ЖурналЛоговСервер.СформироватьДанныеФайлаЛога(ПараметрыОбработки);
	
	Если ПараметрыОбработки.ПараметрыТестирования = Неопределено Тогда
		Результат = Ложь;
		ПараметрыОбработки.ОписаниеОшибки = "Не заданы параметры тестирования для <" + ПараметрыОбработки.ИнформационнаяБаза + ">!";
		ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
	КонецЕсли;
	
	Результат = ЗадачиНаСервере.ПодготовитьВыполнениеОперации(ПараметрыОбработки, ВидОбработкиВнешний, Результат);
	
	Если Результат Тогда
		
		КодВозврата = -1;				
		
		ЗадачиНаСервере.ЗапуститьПриложениеСервер(ПараметрыОбработки, ЗадачиНаСервере.ПолучитьКомандуТестированиеИсправление(ПараметрыОбработки), КодВозврата);				
		
		Если КодВозврата = 0 Тогда					
			Результат = Истина;
		Иначе 
			ПараметрыОбработки.ОписаниеОшибки = "Ошибка при выполнении операции ТИИ <" + ПараметрыОбработки.ИнформационнаяБаза + ">!";
			ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
		КонецЕсли;								
		
	КонецЕсли;	
	
	СниматьБлокировкуСеансов = ?(НЕ ПараметрыОбработки.СостояниеБлокировкиСеансовДоНачалаОбработки = Неопределено, НЕ ПараметрыОбработки.СостояниеБлокировкиСеансовДоНачалаОбработки, Истина);
	СниматьБлокировкуРегламентныхЗаданий = ?(НЕ ПараметрыОбработки.СостояниеБлокировкиРегламентныхЗаданийДоНачалаОбработки = Неопределено, НЕ ПараметрыОбработки.СостояниеБлокировкиРегламентныхЗаданийДоНачалаОбработки, Истина);
	ЗадачиНаСервере.ЗавершитьВыполнениеОперации(ПараметрыОбработки, ВидОбработкиВнешний, Результат, СниматьБлокировкуСеансов, СниматьБлокировкуРегламентныхЗаданий);	
	
	Возврат Результат
КонецФункции

//
//
Функция ЗагрузитьАрхив(ПараметрыОбработки) Экспорт	
	
	Результат = Ложь;
	
	ВидОбработкиВнешний = ПараметрыОбработки.ВидОбработки;	
	ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.ЗагрузкаАрхива;			
	
	ТекстСостояния = ЗадачиНаСервере.ПолучитьТекстСостояния(ПараметрыОбработки);	
	
	Если ОбщегоНазначенияСервер.ДопустимоИспользованиеФайловыхЗаданий() И ПараметрыОбработки.ВидОбработки = ВидОбработкиВнешний Тогда
		ПараметрыФоновогоЗадания = Новый Массив;
		ПараметрыФоновогоЗадания.Добавить(ПараметрыОбработки);		
		ФоновыеЗадания.Выполнить("ЗадачиНаСервере.ВыполнитьЗагрузкуАрхива", ПараметрыФоновогоЗадания, ТекстСостояния);
		Результат = Истина;
	Иначе
		Результат = ЗадачиНаСервере.ВыполнитьЗагрузкуАрхива(ПараметрыОбработки);		
	КонецЕсли;		
	
	ПараметрыОбработки.ВидОбработки = ВидОбработкиВнешний;
	
	Возврат Результат;
КонецФункции

//
//
Функция ВыполнитьЗагрузкуАрхива(ПараметрыОбработки) Экспорт
	
	Результат = Истина;
	
	ВидОбработкиВнешний = ПараметрыОбработки.ВидОбработки;	
	ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.ЗагрузкаАрхива;			
	
	ТекстСостояния = ЗадачиНаСервере.ПолучитьТекстСостояния(ПараметрыОбработки);
	
	Результат = ЗадачиНаСервере.ПодготовитьВыполнениеОперации(ПараметрыОбработки, ВидОбработкиВнешний, Результат, Ложь);
	
	Если Результат И ПараметрыОбработки.ИмяАрхива <> Неопределено Тогда		
		
		ПараметрыОбработки.ОписаниеОшибки = "Начало загрузки архива " + ПараметрыОбработки.ИнформационнаяБаза;
		ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
		
		Если ПараметрыОбработки.ТипАрхива = Перечисления.ТипыФайловАрхива.АрхивSQL Тогда
			
			Результат = ЗадачиНаСервере.ЗагрузитьАрхивSQL(ПараметрыОбработки);
			
		Иначе 
			
			КодВозврата = -1;
			
			ЗадачиНаСервере.ЗапуститьПриложениеСервер(ПараметрыОбработки, ЗадачиНаСервере.ПолучитьКомандуЗагрузкиДанныхИБ(ПараметрыОбработки), КодВозврата);						
			
			Результат = (КодВозврата = 0);		
	
		КонецЕсли;
		
		ПараметрыОбработки.ОписаниеОшибки = "Окончание загрузки архива " + ПараметрыОбработки.ИнформационнаяБаза;
		ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
		
	Иначе 
		
		ПараметрыОбработки.ОписаниеОшибки = "Ошибка при определении имени файла архива! " + ПараметрыОбработки.ИнформационнаяБаза;
		ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);			
		
	КонецЕсли;	
	
	Если НЕ ПараметрыОбработки.ЗагружаемВнешнийФайл Тогда
		ЗадачиНаСервере.УдалитьФайлЧерезСервер(ПараметрыОбработки.ИмяАрхива);
	КонецЕсли;

	СниматьБлокировкуСеансов = ?(НЕ ПараметрыОбработки.СостояниеБлокировкиСеансовДоНачалаОбработки = Неопределено, НЕ ПараметрыОбработки.СостояниеБлокировкиСеансовДоНачалаОбработки, Истина);
	СниматьБлокировкуРегламентныхЗаданий = ?(НЕ ПараметрыОбработки.СостояниеБлокировкиРегламентныхЗаданийДоНачалаОбработки = Неопределено, НЕ ПараметрыОбработки.СостояниеБлокировкиРегламентныхЗаданийДоНачалаОбработки, Истина);
	ЗадачиНаСервере.ЗавершитьВыполнениеОперации(ПараметрыОбработки, ВидОбработкиВнешний, Результат, СниматьБлокировкуСеансов, СниматьБлокировкуРегламентныхЗаданий);
	
	Возврат Результат;
КонецФункции

//
//
Функция ВыгрузитьАрхив(ПараметрыОбработки) Экспорт
	
	Результат = Ложь;
	
	ВидОбработкиВнешний = ПараметрыОбработки.ВидОбработки;	
	ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.ВыгрузкаАрхива;			
	
	ТекстСостояния = ЗадачиНаСервере.ПолучитьТекстСостояния(ПараметрыОбработки);	
	
	Если ОбщегоНазначенияСервер.ДопустимоИспользованиеФайловыхЗаданий() И ПараметрыОбработки.ВидОбработки = ВидОбработкиВнешний Тогда
		ПараметрыФоновогоЗадания = Новый Массив;
		ПараметрыФоновогоЗадания.Добавить(ПараметрыОбработки);
		ФоновыеЗадания.Выполнить("ЗадачиНаСервере.ВыполнитьВыгрузкуАрхива", ПараметрыФоновогоЗадания, ТекстСостояния);
		Результат = Истина;
	Иначе
		Результат = ЗадачиНаСервере.ВыполнитьВыгрузкуАрхива(ПараметрыОбработки);		
	КонецЕсли;
	
	ПараметрыОбработки.ВидОбработки = ВидОбработкиВнешний;
	
	Возврат Результат;
КонецФункции

&НаСервере
//
//
Функция ВыполнитьВыгрузкуАрхива(ПараметрыОбработки) Экспорт
	
	Результат = Истина;
	
	Если ПараметрыОбработки.ВыгружатьАрхив Тогда		
		
		ВидОбработкиВнешний = ПараметрыОбработки.ВидОбработки;	
		ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.ВыгрузкаАрхива;			
		
		ТекстСостояния = ЗадачиНаСервере.ПолучитьТекстСостояния(ПараметрыОбработки);
		
		Результат = ЗадачиНаСервере.ПодготовитьВыполнениеОперации(ПараметрыОбработки, ВидОбработкиВнешний, Результат, Ложь);
		
		ПараметрыОбработки.ИмяАрхива = ЗадачиНаСервере.СформироватьИмяАрхива(ПараметрыОбработки);
		Если ПараметрыОбработки.ИмяАрхива <> Неопределено Тогда
			
			Если ЗадачиНаСервере.УдалитьДублирубщийПоИмениФайлАрхива(ПараметрыОбработки) Тогда 
				
				Если ПараметрыОбработки.ТипАрхива = Перечисления.ТипыФайловАрхива.Архив1С Тогда									
					
					КодВозврата = -1;
					Если ЗадачиНаСервере.ЗапуститьПриложениеСервер(ПараметрыОбработки, ЗадачиНаСервере.ПолучитьКомандуВыгрузкиДанныхИБ(ПараметрыОбработки), КодВозврата) Тогда
						
						Результат = ЗадачиНаСервере.ВыполнитьОбработкуФайлаАрхива(ПараметрыОбработки);						 
						
						ПараметрыОбработки.ОписаниеОшибки = "<" + ПараметрыОбработки.ИнформационнаяБаза + "> Операция выгрузки архива выполнена успешно";
						ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
						
					Иначе 
						
						Результат = Ложь;
						ПараметрыОбработки.ОписаниеОшибки = "<" + ПараметрыОбработки.ИнформационнаяБаза + "> Операция выгрузки архива не выполнена: " + ОписаниеОшибки();
						ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
						
					КонецЕсли;
					
				Иначе 
					
					Если ПараметрыОбработки.ИнформационнаяБаза.ТипИБ = ПредопределенноеЗначение("Перечисление.ТипыИБ.Файловая") Тогда 		
						ПараметрыОбработки.ОписаниеОшибки = "<" + ПараметрыОбработки.ИнформационнаяБаза + "> Операция выгрузки SQL-архива недоступна для файловой ИБ!";
						ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
					Иначе 
						
						//ПараметрыОбработки.ИмяАрхива = ЗадачиНаСервере.СформироватьИмяФайлаАрхива(ПараметрыОбработки.ИнформационнаяБаза);
						Результат = ЗадачиНаСервере.ВыгрузитьАрхивSQL(ПараметрыОбработки);
						Если Результат Тогда
							Результат = ЗадачиНаСервере.ВыполнитьОбработкуФайлаАрхива(ПараметрыОбработки);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СниматьБлокировкуСеансов = ?(НЕ ПараметрыОбработки.СостояниеБлокировкиСеансовДоНачалаОбработки = Неопределено, НЕ ПараметрыОбработки.СостояниеБлокировкиСеансовДоНачалаОбработки, Истина);
		СниматьБлокировкуРегламентныхЗаданий = ?(НЕ ПараметрыОбработки.СостояниеБлокировкиРегламентныхЗаданийДоНачалаОбработки = Неопределено, НЕ ПараметрыОбработки.СостояниеБлокировкиРегламентныхЗаданийДоНачалаОбработки, Истина);
		ЗадачиНаСервере.ЗавершитьВыполнениеОперации(ПараметрыОбработки, ВидОбработкиВнешний, Результат, СниматьБлокировкуСеансов, СниматьБлокировкуРегламентныхЗаданий);		
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
	
&НаСервере
//
//
Функция ВыгрузитьАрхивSQL(ПараметрыОбработки) Экспорт
	
	Результат = ВыполнитьЗапросSQL(ПараметрыОбработки, "USE " + СокрЛП(ПараметрыОбработки.ИнформационнаяБаза.ИмяБДSQL) + ";		
		|BACKUP DATABASE " + СокрЛП(ПараметрыОбработки.ИнформационнаяБаза.ИмяБДSQL) + "
		|TO DISK = '" + ПараметрыОбработки.ИнформационнаяБаза.КаталогАрхиваSQL + ?(Прав(СокрЛП(ПараметрыОбработки.ИнформационнаяБаза.КаталогАрхиваSQL), 1) = "\", "", "\") + ПараметрыОбработки.ИмяАрхива + ".bak" + "'
		|WITH INIT, COMPRESSION
		|;");	
	
	Возврат Результат.Выполнено;
КонецФункции

&НаСервере
//
//
Функция ЗагрузитьАрхивSQL(ПараметрыОбработки) Экспорт
	
	Результат = ВыполнитьЗапросSQL(ПараметрыОбработки, "USE " + СокрЛП(ПараметрыОбработки.ИнформационнаяБаза.ИмяБДSQL) + ";  
		|GO""
		|RESTORE DATABASE " + СокрЛП(ПараметрыОбработки.ИнформационнаяБаза.ИмяБДSQL) + "
		|FROM DISK = '" + ПараметрыОбработки.ИнформационнаяБаза.КаталогАрхиваSQL + ?(Прав(СокрЛП(ПараметрыОбработки.ИнформационнаяБаза.КаталогАрхиваSQL), 1) = "\", "", "\") + ПараметрыОбработки.ИмяАрхива + ".bak" + "'
		|WITH REPLACE
		|;"); 
	
	Возврат Результат.Выполнено;
КонецФункции

&НаСервере
//
//
Функция КонвертироватьRecordSetВТаблицуЗначений(RecordSet) Экспорт		
	Результат = Новый Массив;
	
	
	Пока RecordSet.Fields.Count > 0 Цикл
		
		Результат.Добавить(Новый ТаблицаЗначений);
		ТекущийИндекс = Результат.Количество() - 1;
		
		Для НомерКолонки = 0 По RecordSet.Fields.Count-1 Цикл
			Результат[ТекущийИндекс].Колонки.Добавить("_" + ЗадачиНаСервере.ЗаменитьСпецсимволыНаПодчеркивание(RecordSet.Fields.Item(НомерКолонки).Name), ,RecordSet.Fields.Item(НомерКолонки).Name);
		КонецЦикла;
		
		RecordSet.MoveFirst();
		Пока НЕ RecordSet.EOF() Цикл
			СтрокаТаблицыЗначений = Результат[ТекущийИндекс].Добавить();
			Для НомерКолонки = 0 По RecordSet.Fields.Count-1 Цикл
				СтрокаТаблицыЗначений[НомерКолонки] = RecordSet.Fields(RecordSet.Fields.Item(НомерКолонки).Name).Value;
			КонецЦикла;
			RecordSet.MoveNext(); 
		КонецЦикла;		
		
		RecordSet = RecordSet.NextRecordset();
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
//
//
Функция ВыполнитьЗапросSQL(ПараметрыОбработки, ТекстЗапроса) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("МассивДанных", Неопределено);	
	
	Попытка
		
		COMОбъектSQL = ЗадачиНаСервере.СоздатьПодключениеSQL(ПараметрыОбработки);
		Если COMОбъектSQL = Неопределено Тогда
			Результат.Выполнено = Ложь;
		Иначе 
			
			//КоммандаSQL = Новый COMObject("ADODB.Command");
			//КоммандаSQL.ActiveConnection = COMОбъектSQL;
			//КоммандаSQL.NamedParameters = True;
			//КоммандаSQL.CommandText = ТекстЗапроса;
			//КоммандаSQL.CommandType = 1;
			////СоединениеSQL.Prepared = Истина;		
			////Param1 = СоединениеSQL.CreateParameter("n",3,1,1,1);
			////СоединениеSQL.Parameters.Append(Param1);		//
			////Param2 = СоединениеSQL.CreateParameter("ДатаПриходаС",200,1,8,Формат(НачалоПериода,"ДФ=ггггММдд"));//Формат(НачалоПериода,"ДФ=ггггММдд"));
			////СоединениеSQL.Parameters.Append(Param2);		//
			////Param3 = СоединениеSQL.CreateParameter("ДатаПриходаПо",200,1,8,Формат(КонецПериода,"ДФ=ггггММдд"));
			////СоединениеSQL.Parameters.Append(Param3);
			////
			////СоединениеSQL.Parameters.Refresh();				
			//
			//Результат.МассивДанных = КонвертироватьRecordSetВТаблицуЗначений(КоммандаSQL.Execute());
			
			Результат.МассивДанных = КонвертироватьRecordSetВТаблицуЗначений(COMОбъектSQL.Execute(ТекстЗапроса));
			Результат.Выполнено = Истина;		
			
		КонецЕсли;
		
	Исключение
		ПараметрыОбработки.ОписаниеОшибки = "Ошибка при выполнении SQL-запроса: " + ОписаниеОшибки();
		ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
		Результат.Выполнено = Ложь;
	КонецПопытки;
	
	Попытка
		COMОбъектSQL.Close();
	Исключение
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

&НаСервере
//
//
Функция ЗапуститьПриложениеСервер(ПараметрыОбработки, КомандаЗапуска, КодВозврата = -1) Экспорт
	Результат = Истина;	
	
	Попытка
		
		КодВозврата = 0;
		//Попытка
		//	WshShell = Новый COMОбъект("WScript.Shell");
		//	WshShell.Run(КомандаЗапуска, , 1);			
		//Исключение
			ЗапуститьПриложение(КомандаЗапуска, , Истина, КодВозврата);		
		//КонецПопытки;
		
	Исключение
		ПараметрыОбработки.ОписаниеОшибки = "Ошибка при выполнении приложения! " + ПараметрыОбработки.ИнформационнаяБаза + Символы.ПС + ОписаниеОшибки();
		ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
	КонецПопытки;
	
	Если КодВозврата <> 0 Тогда
		Результат = Ложь;
		ПараметрыОбработки.ОписаниеОшибки = "Ошибка при выполнении инструкции запуска приложения! " + ПараметрыОбработки.ИнформационнаяБаза;
		ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
//
//
Функция ПроверитьКорректностьОбновленияРекурсивно(ПараметрыОбработки, УстановитьРелизОбновления, МассивОбновлений = Неопределено, ГлубинаРекурсии = 0) Экспорт
	
	Результат = Ложь;	
	
	ГлубинаРекурсии = ГлубинаРекурсии + 1;
	Если ГлубинаРекурсии > 500 Тогда Возврат Результат; КонецЕсли;
	
	Если МассивОбновлений = Неопределено Тогда МассивОбновлений = Новый Массив; КонецЕсли;	
	
	Если ПараметрыОбработки.ИнформационнаяБаза.ОтключитьПроверкуСоответствияРелизов Тогда
		Результат = Истина;
	Иначе 
		НомерРелизаИБ = СокрЛП(ПараметрыОбработки.ИнформационнаяБаза.РелизОбновления);
		UpdInfo = УстановитьРелизОбновления.UpdInfo;
		Если НЕ ЗначениеЗаполнено(UpdInfo) ИЛИ ПараметрыОбработки.ИнформационнаяБаза.ВидКонфигурации <> УстановитьРелизОбновления.ВидКонфигурации Тогда 
			Результат = Ложь;
		ИначеЕсли ЗначениеЗаполнено(UpdInfo) И СтрЧислоВхождений(UpdInfo, НомерРелизаИБ) > 0 Тогда
			Результат = Истина;
		ИначеЕсли ЗначениеЗаполнено(ПараметрыОбработки.Обработчик) Тогда 
			UpdInfo = СтрЗаменить(НРег(UpdInfo), "fromversions=", "");
			МассивНомеровРелизов = ОбщегоНазначенияСервер.РазложитьСтрокуВМассивПодстрок(UpdInfo, ";");		
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	РелизыОбновлений.Ссылка,
			|	РелизыОбновлений.Наименование КАК Представление,
			|	ВЫРАЗИТЬ(РелизыОбновлений.UpdInfo КАК СТРОКА(100)) КАК UpdInfo
			|ИЗ
			|	Справочник.РелизыОбновлений КАК РелизыОбновлений
			|ГДЕ
			|	РелизыОбновлений.Наименование В(&НомерРелизаСпецификации)
			|	И РелизыОбновлений.ВидКонфигурации = &ВидКонфигурации
			|	И НЕ РелизыОбновлений.ПометкаУдаления
			|
			|УПОРЯДОЧИТЬ ПО
			|	РелизыОбновлений.Наименование УБЫВ";
			
			Запрос.УстановитьПараметр("НомерРелизаСпецификации", МассивНомеровРелизов);
			Запрос.УстановитьПараметр("ВидКонфигурации", УстановитьРелизОбновления.ВидКонфигурации);
			
			ТаблицаРелизов = ПолучитьУпорядоченнуюТаблицуРелизов(Запрос.Выполнить().Выгрузить());
			
			Для Каждого ТекущаяСтрокаТаблицаРелизов Из ТаблицаРелизов Цикл					
				РелизСпецификации = ТекущаяСтрокаТаблицаРелизов.Ссылка;					
				Если НЕ ЗначениеЗаполнено(РелизСпецификации) ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(ТекущаяСтрокаТаблицаРелизов.UpdInfo))
					ИЛИ Лев(НомерРелизаИБ, СтрЧислоВхождений(НомерРелизаИБ, ".")) <> Лев(РелизСпецификации, СтрЧислоВхождений(НомерРелизаИБ, ".")) Тогда
					Продолжить;
				КонецЕсли;
				Результат = ПроверитьКорректностьОбновленияРекурсивно(ПараметрыОбработки, РелизСпецификации, МассивОбновлений, ГлубинаРекурсии);
				Прервать;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(МассивОбновлений) = Тип("Массив") И Результат И МассивОбновлений.Найти(УстановитьРелизОбновления) = Неопределено Тогда
		МассивОбновлений.Добавить(УстановитьРелизОбновления);
	КонецЕсли;	
	
	Возврат Результат;
КонецФункции

&НаСервере
//
//
Функция ПолучитьУпорядоченнуюТаблицуРелизов(ТаблицаРелизов)
	
	Для Каждого ТекущаяСтрокаТаблицаРелизов Из ТаблицаРелизов Цикл
		НовоеПредставление = "";
		МассивСоставляющихНомераРелиза = ОбщегоНазначенияСервер.РазложитьСтрокуВМассивПодстрок(ТекущаяСтрокаТаблицаРелизов.Представление, ".");
		Для Каждого ЭлементМассивСоставляющихНомераРелиза Из МассивСоставляющихНомераРелиза Цикл
			ДлинаСоставляющейНомераРелиза = СтрДлина(ЭлементМассивСоставляющихНомераРелиза);
			Пока ДлинаСоставляющейНомераРелиза < 5 Цикл
				ЭлементМассивСоставляющихНомераРелиза = "0" + ЭлементМассивСоставляющихНомераРелиза;
				ДлинаСоставляющейНомераРелиза = СтрДлина(ЭлементМассивСоставляющихНомераРелиза);
			КонецЦикла;
			НовоеПредставление = НовоеПредставление + ЭлементМассивСоставляющихНомераРелиза + ".";
		КонецЦикла;
		ТекущаяСтрокаТаблицаРелизов.Представление = НовоеПредставление;
	КонецЦикла;	
	ТаблицаРелизов.Сортировать("Представление ВОЗР");
	
	Возврат ТаблицаРелизов;
КонецФункции

&НаСервере
//
//
Функция НайтиДопустимыеРелизыОбновления(ПараметрыОбработки, МассивОбновлений = Неопределено) Экспорт
	Если МассивОбновлений = Неопределено Тогда МассивОбновлений = Новый Массив; КонецЕсли;	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РелизыОбновлений.Ссылка,
	|	РелизыОбновлений.Наименование КАК Представление,
	|	ВЫРАЗИТЬ(РелизыОбновлений.UpdInfo КАК СТРОКА(100)) КАК UpdInfo
	|ИЗ
	|	Справочник.РелизыОбновлений КАК РелизыОбновлений
	|ГДЕ
	|	РелизыОбновлений.ВидКонфигурации = &ВидКонфигурации
	|	И НЕ РелизыОбновлений.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА &ОтборПоРедакции = ИСТИНА
	|				ТОГДА ВЫБОР
	|						КОГДА РелизыОбновлений.Наименование ПОДОБНО &РедакцияВидаКонфигурации
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	РелизыОбновлений.Наименование УБЫВ";		
	Запрос.УстановитьПараметр("ВидКонфигурации", ПараметрыОбработки.ИнформационнаяБаза.ВидКонфигурации);
	РедакцияВидаКонфигурации = СокрЛП(ПараметрыОбработки.ИнформационнаяБаза.ВидКонфигурации.Редакция);
	Запрос.УстановитьПараметр("ОтборПоРедакции", ЗначениеЗаполнено(РедакцияВидаКонфигурации));
	Запрос.УстановитьПараметр("РедакцияВидаКонфигурации", РедакцияВидаКонфигурации + "%");
	МассивОбновленийВременный = Новый Массив;	
	ТаблицаРелизов = ПолучитьУпорядоченнуюТаблицуРелизов(Запрос.Выполнить().Выгрузить());
	Для Каждого ТекущаяСтрокаТаблицаРелизов Из ТаблицаРелизов Цикл
		Если НЕ ЗначениеЗаполнено(СокрЛП(ТекущаяСтрокаТаблицаРелизов.UpdInfo)) Тогда Продолжить; КонецЕсли;		
		Если ЗадачиНаСервере.ПроверитьКорректностьОбновленияРекурсивно(ПараметрыОбработки, ТекущаяСтрокаТаблицаРелизов.Ссылка, МассивОбновленийВременный) Тогда
			Для Каждого ЭлементВременный ИЗ МассивОбновленийВременный Цикл
				Если МассивОбновлений.Найти(ЭлементВременный) = Неопределено Тогда
					МассивОбновлений.Добавить(ЭлементВременный);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		МассивОбновленийВременный.Очистить();
	КонецЦикла;

	Возврат МассивОбновлений;
КонецФункции

&НаСервере
//
//
Функция ВыполнитьОбработкуФайлаАрхива(ПараметрыОбработки) Экспорт
	Результат = Истина;
	Если ПараметрыОбработки.ХранитьВБазеСсылкиНаВнешниеФайлыАрхивов ИЛИ ПараметрыОбработки.ВариантХраненияФайлаАрхиваВБазе <> Перечисления.ВариантыХраненияАрхиваВБазе.НеЗагружать Тогда
		ДатаСобытия = ТекущаяДатаСеанса();
				
		НаборЗаписей = РегистрыСведений.ХранилищеАрхивов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДатаСобытия.Установить(ДатаСобытия);
		НаборЗаписей.Отбор.ИнформационнаяБаза.Установить(ПараметрыОбработки.ИнформационнаяБаза);
		НаборЗаписей.Отбор.ТипАрхива.Установить(ПараметрыОбработки.ТипАрхива);
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ДатаСобытия = ДатаСобытия;
		НоваяЗапись.ИнформационнаяБаза = ПараметрыОбработки.ИнформационнаяБаза;
		НоваяЗапись.ТипАрхива = ПараметрыОбработки.ТипАрхива; 
		Если ПараметрыОбработки.ХранитьВБазеСсылкиНаВнешниеФайлыАрхивов Тогда
			НоваяЗапись.ПутьКАрхиву = ПараметрыОбработки.ИмяАрхива;
		КонецЕсли;
		НаборЗаписей.Записать(Истина);				
		
		Если ПараметрыОбработки.ВариантХраненияФайлаАрхиваВБазе <> Перечисления.ВариантыХраненияАрхиваВБазе.НеЗагружать Тогда
			Попытка
				РегистрыСведений.ХранилищеАрхивов.ЗагрузитьДвоичныеДанныеАрхиваИзФайла(ПараметрыОбработки.ИнформационнаяБаза, ДатаСобытия, ПараметрыОбработки.ИмяАрхива, ПараметрыОбработки.ХранитьВБазеСсылкиНаВнешниеФайлыАрхивов);
				Если ПараметрыОбработки.ВариантХраненияФайлаАрхиваВБазе = Перечисления.ВариантыХраненияАрхиваВБазе.ПереноситьВБазу Тогда
					УдалитьФайлы(ПараметрыОбработки.ИмяАрхива);
					ПараметрыОбработки.ОписаниеОшибки = "Архив успешно перемещен в хранилище.";
				Иначе
					ПараметрыОбработки.ОписаниеОшибки = "Архив успешно скопирован в хранилище.";
				КонецЕсли;
				ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
			Исключение
				ПараметрыОбработки.ОписаниеОшибки = "Ошибка при загрузке архива! " + ПараметрыОбработки.ИнформационнаяБаза + Символы.ПС + ОписаниеОшибки();				
				ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
				Результат = Ложь;
			КонецПопытки;
		КонецЕсли;		
		
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаСервере
//
//
Функция ПолучитьОсновнойКаталогАрхива() Экспорт
	Возврат Константы.ОсновнойКаталогАрхива.Получить();
КонецФункции

&НаСервере
//
//
Функция УдалитьФайлЧерезСервер(ПутьКФайлу) Экспорт
	Результат = Истина;
	Попытка
		УдалитьФайлы(ПутьКФайлу);
	Исключение		
		Результат = Ложь;
		ЗаписьЖурналаРегистрации("УдалениеФайлаВыгрузки", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка: " + ОписаниеОшибки());
	КонецПопытки;
	Возврат Результат;
КонецФункции

&НаСервере
//
//
Функция ПолучитьИмяВременногоКаталогаРелизаОбновления(РелизОбновления, Префикс = "") Экспорт
	Возврат КаталогВременныхФайлов() + "tmp" + Префикс + ЗаменитьСпецсимволыНаПодчеркивание(СокрЛП(РелизОбновления)) + "\";
КонецФункции

&НаСервере
//
//
Функция ПолучитьКаталогОбновленияРелиза(ПараметрыОбработки, РелизОбновления) Экспорт
	ИмяФайлаОбновления = "";
	КаталогРелизаОбновления = РелизОбновления.Каталог;
	
	КопироватьВоВременныйКаталог = Ложь;
	ИмяВременногоКаталогаРелизаОбновления = ЗадачиНаСервере.ПолучитьИмяВременногоКаталогаРелизаОбновления(РелизОбновления, СокрЛП(ПараметрыОбработки.ИнформационнаяБаза.УникальныйИдентификатор()));
	
	АрхивРелизаИзХранилища = РегистрыСведений.ХранилищеРелизовОбновлений.ПолучитьПолныеДанныеЗаписи(РелизОбновления);
	Если АрхивРелизаИзХранилища.АрхивЗагруженВХранилище И ЗначениеЗаполнено(АрхивРелизаИзХранилища.ДвоичныеДанныеФайлаАрхива) И (ТипЗнч(АрхивРелизаИзХранилища.ДвоичныеДанныеФайлаАрхива.Получить()) = Тип("ДвоичныеДанные")) Тогда
		ВыгрузкаВыполненаУспешно = РегистрыСведений.ХранилищеРелизовОбновлений.СохранитьДвоичныеДанныеФайлаВыгрузкиВКаталог(РелизОбновления, ИмяВременногоКаталогаРелизаОбновления);
		Если ВыгрузкаВыполненаУспешно И (НайтиФайлы(ИмяВременногоКаталогаРелизаОбновления, "*.cf", Ложь).Количество() > 0 ИЛИ НайтиФайлы(ИмяВременногоКаталогаРелизаОбновления, "*.cfu", Ложь).Количество() > 0) Тогда
			КаталогРелизаОбновления = ИмяВременногоКаталогаРелизаОбновления;
		КонецЕсли;
	Иначе
		КопироватьВоВременныйКаталог = Истина;
	КонецЕсли;
	
	КаталогРелизаОбновления = КаталогРелизаОбновления + ?(Прав(КаталогРелизаОбновления, 1) = "\", "", "\");
	
	ФайлыКонфигураций = НайтиФайлы(КаталогРелизаОбновления, "*.cf", Ложь);
	ФайлыОбновлений = НайтиФайлы(КаталогРелизаОбновления, "*.cfu", Ложь);
	
	ТипОбновления = ПараметрыОбработки.ИнформационнаяБаза.ТипОбновления;
	Если ФайлыОбновлений.Количество() > 0
		И (ТипОбновления = ПредопределенноеЗначение("Перечисление.ТипыОбновлений.Приоритет_cfu")
		ИЛИ ТипОбновления = ПредопределенноеЗначение("Перечисление.ТипыОбновлений.Приоритет_cf")
		ИЛИ ТипОбновления = ПредопределенноеЗначение("Перечисление.ТипыОбновлений.Только_cfu")
		ИЛИ НЕ ЗначениеЗаполнено(ТипОбновления))
		И НЕ ТипОбновления = ПредопределенноеЗначение("Перечисление.ТипыОбновлений.Только_cf") Тогда
		
		ИмяФайлаОбновления = КаталогРелизаОбновления + ФайлыОбновлений[0].Имя;
		
	КонецЕсли;
	
	Если ФайлыКонфигураций.Количество() > 0
		И НЕ (ТипОбновления = ПредопределенноеЗначение("Перечисление.ТипыОбновлений.Приоритет_cfu") И ЗначениеЗаполнено(ИмяФайлаОбновления)) 
		И ((ТипОбновления = ПредопределенноеЗначение("Перечисление.ТипыОбновлений.Приоритет_cf")
		ИЛИ ТипОбновления = ПредопределенноеЗначение("Перечисление.ТипыОбновлений.Только_cf")))
		И НЕ ТипОбновления = ПредопределенноеЗначение("Перечисление.ТипыОбновлений.Только_cfu") Тогда
		
		ИмяФайлаОбновления = КаталогРелизаОбновления + ФайлыКонфигураций[0].Имя;
		
	КонецЕсли;
	
	Если КопироватьВоВременныйКаталог Тогда
		
		Попытка
			
			КаталогНаДиске = Новый Файл(ИмяВременногоКаталогаРелизаОбновления);
			Если НЕ КаталогНаДиске.Существует() Тогда				
				СоздатьКаталог(ИмяВременногоКаталогаРелизаОбновления);				
			КонецЕсли;			
			
			ИмяВременнойКопииФайлаОбновления = ИмяВременногоКаталогаРелизаОбновления + СтрЗаменить(ИмяФайлаОбновления, КаталогРелизаОбновления, "");
			
			ДвоичныеДанныеРелиза = Новый ДвоичныеДанные(ИмяФайлаОбновления);			
			ДвоичныеДанныеРелиза.Записать(ИмяВременнойКопииФайлаОбновления);
			
			ИмяФайлаОбновления = ИмяВременнойКопииФайлаОбновления
			
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ИмяФайлаОбновления;
КонецФункции

&НаСервере
//
//
Функция ПолучитьСтрокуПодключенияКИБ(ИнформационнаяБаза) Экспорт
	Результат = "";
	Если ИнформационнаяБаза.ТипИБ = Перечисления.ТипыИБ.Файловая Тогда
		Результат = "File=""" + ИнформационнаяБаза.ИмяКаталогИБ + """;";
	Иначе
		СерверИБ = ИнформационнаяБаза.СерверИБ;
		Результат = "Srvr=""" + СерверИБ.Наименование + ?(СерверИБ.ПортКластера = 1541, "", ":" + Формат(СерверИБ.ПортКластера, "ЧГ=0")) + """;Ref=""" + ИнформационнаяБаза.ИмяКаталогИБ + """;";
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаСервере
//
//
Функция ПолучитьПараметрыИзСтрокиПодключенияКСерверу(СтрокаПодключения) Экспорт
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("ПортКластера", "");
	ПараметрыПодключения.Вставить("ПортСервера", "");
	ПараметрыПодключения.Вставить("ПортСервераАдминистрирования", "");
	ПараметрыПодключения.Вставить("ИмяСервера", "");
	ПараметрыПодключения.Вставить("ИмяБазы", "");	
	ВременнаяСтрока = СтрЗаменить(НРег(СтрокаПодключения), "srvr=""", "");
	ПозицияОкончанияПолногоИмениСервера = Найти(ВременнаяСтрока, """;ref=""") - 1;
	ПозицияОкончанияПолногоИмениСервера = ?(ПозицияОкончанияПолногоИмениСервера <= 0, СтрДлина(СтрокаПодключения), ПозицияОкончанияПолногоИмениСервера);
	ПолноеИмяСервера = Лев(ВременнаяСтрока, ПозицияОкончанияПолногоИмениСервера);
	ПозицияПортаКластера = Найти(ПолноеИмяСервера, ":");
	Если ПозицияПортаКластера = 0 Тогда
		ПараметрыПодключения.ИмяСервера = ПолноеИмяСервера;
	Иначе 
		ПараметрыПодключения.ИмяСервера = Лев(ПолноеИмяСервера, Найти(ПолноеИмяСервера, ":") - 1);
		ПараметрыПодключения.ПортКластера = СтрЗаменить(ПолноеИмяСервера, ПараметрыПодключения.ИмяСервера + ":", "");
		ПараметрыПодключения.ПортСервера = Лев(ПараметрыПодключения.ПортКластера, СтрДлина(ПараметрыПодключения.ПортКластера) - 1) + Строка(Число(Прав(ПараметрыПодключения.ПортКластера, 1)) - 1);
	КонецЕсли;
	ПараметрыПодключения.ИмяБазы = СтрЗаменить(СтрЗаменить(Сред(ВременнаяСтрока, ПозицияОкончанияПолногоИмениСервера + СтрДлина(""";ref=""")), ";", ""), """", "");
	Возврат ПараметрыПодключения;
КонецФункции

&НаСервере
//
//
Функция РаспарситьСписокБаз(ДанныеФайла) Экспорт
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Наименование");
	ТаблицаДанных.Колонки.Добавить("Connect");
	ТаблицаДанных.Колонки.Добавить("ID");
	ТаблицаДанных.Колонки.Добавить("OrderInList");
	ТаблицаДанных.Колонки.Добавить("OrderInTree");
	ТаблицаДанных.Колонки.Добавить("Folder");	
	ТаблицаДанных.Колонки.Добавить("ClientConnectionSpeed");
	ТаблицаДанных.Колонки.Добавить("External");	
	ТаблицаДанных.Колонки.Добавить("WA");
	ТаблицаДанных.Колонки.Добавить("Version");
	ТаблицаДанных.Колонки.Добавить("AdditionalParameters");	
	ТаблицаДанных.Колонки.Добавить("App");
	ТаблицаДанных.Колонки.Добавить("DefaultApp");	
	
	
	ТекущаяСтрокаТаблицыДанных = Неопределено;
	МассивСтрок = ОбщегоНазначенияСервер.РазложитьСтрокуВМассивПодстрок(ДанныеФайла, Символы.ПС);	
	Для Каждого Стр Из МассивСтрок Цикл		
		Если Лев(Стр, 1) = "[" Тогда 
			ТекущаяСтрокаТаблицыДанных = ТаблицаДанных.Добавить();
			ТекущаяСтрокаТаблицыДанных.Наименование = Сред(Стр, 2); //СтрЗаменить(СтрЗаменить(Стр, "[",""), "]","");
			ТекущаяСтрокаТаблицыДанных.Наименование = Сред(ТекущаяСтрокаТаблицыДанных.Наименование, 1, СтрДлина(ТекущаяСтрокаТаблицыДанных.Наименование) - 1); 
		Иначе
			Разделитель = "=";
			ПозицияРазделителя = Найти(Стр, Разделитель);
			Если ПозицияРазделителя > 0 Тогда
				ПараметрИмя = СокрЛП(Лев(Стр, ПозицияРазделителя - 1));
				ПараметрЗначение = СокрЛП(СтрЗаменить(Стр, ПараметрИмя + Разделитель, ""));
				Попытка
					ТекущаяСтрокаТаблицыДанных[ПараметрИмя] = ПараметрЗначение;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;				
	КонецЦикла;
	
	Возврат ТаблицаДанных;
КонецФункции

&НаСервере
//
//
Функция ПолучитьТаблицуИБСоСтрокойПодключения() Экспорт
	ТаблицаЗагруженныхБаз = Новый ТаблицаЗначений;
	ТаблицаЗагруженныхБаз.Колонки.Добавить("ИнформационнаяБаза");
	ТаблицаЗагруженныхБаз.Колонки.Добавить("СтрокаПодключения");
	
	ТаблицаЗагруженныхБаз.Индексы.Добавить("СтрокаПодключения");
	
	Выборка = Справочники.ИнформационныеБазы.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаЗагруженныхБаз.Добавить();
		НоваяСтрока.ИнформационнаяБаза = Выборка.Ссылка;
		НоваяСтрока.СтрокаПодключения = НРег(ЗадачиНаСервере.ПолучитьПараметрПутиПоТипуИБ(НоваяСтрока.ИнформационнаяБаза));
	КонецЦикла;
	
	Возврат ТаблицаЗагруженныхБаз;
КонецФункции

&НаСервере
//
//
Функция ОповеститьОВыполненииОперации(ПараметрыОбработки, ВыполненоУспешно = Ложь) Экспорт	
	
	НаборЗаписей = РегистрыСведений.РезультатВыполненияПоследнейОперации.СоздатьНаборЗаписей();	
	НаборЗаписей.Отбор.ИнформационнаяБаза.Установить(ПараметрыОбработки.ИнформационнаяБаза);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		НоваяЗапись = НаборЗаписей[0];
	Иначе 
		НоваяЗапись = НаборЗаписей.Добавить();
	КонецЕсли;
	
	//ЗаполнитьЗначенияСвойств(НоваяЗапись, ПараметрыОбработки);	
	НоваяЗапись.ИнформационнаяБаза = ПараметрыОбработки.ИнформационнаяБаза;	
	НоваяЗапись.Сообщение = ПараметрыОбработки.ЖурналВыполнения;
	НоваяЗапись.ВыполненоУспешно = ВыполненоУспешно;
	НаборЗаписей.Записать(Истина);
	
	Возврат Истина;
КонецФункции

&НаСервере
//
//
Функция ПолучитьРезультатПоследнейОперации(ИнформационнаяБаза) Экспорт 
	
	Результат = Новый Структура("ВыполненоУспешно, Сообщение", Истина, "Операции не выполнялись");
	
	НаборЗаписей = РегистрыСведений.РезультатВыполненияПоследнейОперации.СоздатьНаборЗаписей();	
	НаборЗаписей.Отбор.ИнформационнаяБаза.Установить(ИнформационнаяБаза);
	НаборЗаписей.Прочитать();	
	
	Если НаборЗаписей.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Результат, НаборЗаписей[0]);	
	КонецЕсли;
	
	Возврат Результат
КонецФункции

&НаСервере
//
//
Функция ПроверитьПрименимостьПравилОбъединения(ПравилаОбъединения, ОсновнаяКонфигурация, ВтораяКонфигурация) Экспорт 
	
	Результат = (ОсновнаяКонфигурация = ПравилаОбъединения.ОсновнаяКонфигурация И ВтораяКонфигурация = ПравилаОбъединения.ВтораяКонфигурация);
	Возврат Результат;
	
КонецФункции

