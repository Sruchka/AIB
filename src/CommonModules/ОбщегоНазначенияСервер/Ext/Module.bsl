
// Общий модуль
//

//
//
Процедура ВывестиСообщение(ТекстСообщения, ИдентификаторНазначения = Неопределено, КлючДанных = Неопределено, Поле = Неопределено, ПутьКДанным = Неопределено, Объект = Неопределено) Экспорт
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Если ИдентификаторНазначения <> Неопределено Тогда
		Сообщение.ИдентификаторНазначения = ИдентификаторНазначения;
	КонецЕсли;
	Если КлючДанных <> Неопределено Тогда
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	Если Поле <> Неопределено Тогда
		Сообщение.Поле = Поле;
	КонецЕсли;
	Если ПутьКДанным <> Неопределено Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
	Если Объект <> Неопределено Тогда
		Сообщение.УстановитьДанные(Объект);
	КонецЕсли;
	Сообщение.Сообщить();	
КонецПроцедуры

//
//
Функция ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "") Экспорт
	Если ПустаяСтрока(СтрокаСоединенияИнформационнойБазы) Тогда
		СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;
	ДанныеСоединенияИнформационнойБазы = РаспарситьСтрокуСоединенияИнформационнойБазы(СтрокаСоединенияИнформационнойБазы);
	Возврат НЕ ОбщегоНазначенияСервер.ПолучитьЗначениеСвойства(ДанныеСоединенияИнформационнойБазы, "File") = Неопределено; //Найти(Врег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;      
КонецФункции

//
//
Функция РаспарситьСтрокуСоединенияИнформационнойБазы(СтрокаСоединенияИнформационнойБазы) Экспорт
		
	ДанныеРезультата = ОбщегоНазначенияСервер.РазложитьСтрокуВМассивПодстрок(СтрокаСоединенияИнформационнойБазы, ";");
	Результат = Новый Структура;
	Для Каждого ТекущаяСтрока Из ДанныеРезультата Цикл			
		ДанныеТекущаяСтрока = ОбщегоНазначенияСервер.РазложитьСтрокуВМассивПодстрок(ТекущаяСтрока, "=");		
		Ключ = МенеджерRAS.ПодготовитьИмяПараметра(ДанныеТекущаяСтрока[0]);
		Значение = СокрЛП(СтрЗаменить(ОбщегоНазначенияСервер.ПолучитьЭлементМассива(ДанныеТекущаяСтрока, 1), """", ""));
		Результат.Вставить(Ключ, Значение);			
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция "расщепляет" строку на подстроки, используя заданный 
//		разделитель. Разделитель может иметь любую длину. 
//		Если в качестве разделителя задан пробел, рядом стоящие пробелы 
//		считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//		игнорируются.
//		Например, 
//		РазложитьСтрокуВМассивПодстрок(",строка 1,,,строка 2", ",") возвратит массив значений из пяти элементов, 
//		три из которых - пустые строки, а 
//		РазложитьСтрокуВМассивПодстрок(" строка1   строка 2", " ") возвратит массив значений из двух элементов
//
//	Параметры: 
//		Стр - 			строка, которую необходимо разложить на подстроки. 
//						Параметр передается по значению.
//		Разделитель - 	строка-разделитель, по умолчанию - запятая.
//
//
//	Возвращаемое значение:
//		массив значений, элементы которого - подстроки
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	ДлинаРазделителя = СтрДлина(Разделитель);
	Пока 1=1 Цикл
		Поз = Найти(Стр,Разделитель);
		Если Поз=0 Тогда
			Если ЗначениеЗаполнено(СокрЛП(Стр)) Тогда
				МассивСтрок.Добавить(Стр);
			КонецЕсли;			
			Возврат МассивСтрок;
		КонецЕсли;
		Значение = Лев(Стр,Поз-1);
		Если ЗначениеЗаполнено(СокрЛП(Значение)) Тогда
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
		КонецЕсли;
		Стр = Сред(Стр,Поз+ДлинаРазделителя);
	КонецЦикла;
	
	
КонецФункции

//
//
Функция ОбъединитьИдентичныеТаблицы(Таблица1, Таблица2) Экспорт
	
	ТаблицаРезультат = Таблица1.Скопировать();
	
	Для Каждого СтрокаТаблицы Из Таблица2 Цикл
		НоваяСтрока = ТаблицаРезультат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
КонецФункции
	 
//
//
Функция ПолучитьПользователяПараметрыАвторизацииОСТекущегоПользователя() Экспорт
	Возврат ПользователиИнформационнойБазы.ТекущийПользователь().ПользовательОС;
КонецФункции
 
//
//
Функция Пауза(ЗадержкаСекунд) Экспорт
	Результат = Ложь;
	Попытка
		//scr = Новый COMОбъект("WScript.Shell"); 
		//scr.Run("ping 127.0.0.1 -n " + Формат(Число(ЗадержкаСекунд), "ЧГ="), 0, 1);
		Соединение = Новый HTTPСоединение("1.1.1.1",,,,, ЗадержкаСекунд);
		Соединение.Получить(Новый HTTPЗапрос(Соединение.Сервер));
		Результат = Истина;
	Исключение
	КонецПопытки;
	Возврат Результат;
КонецФункции
 
//
//
Функция ПолучитьДанныеПоОбъекту(Объект) Экспорт
	
	Результат = Неопределено;
	
	ЗапросРеквизитов = Новый Запрос;
	ЗапросРеквизитов.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ " + ОбщегоНазначенияСервер.ПолучитьВидОбъекта(Объект) + "." + Объект.Метаданные().Имя + " КАК Объект ГДЕ Объект.Ссылка = &Объект";
	ЗапросРеквизитов.Параметры.Вставить("Объект", Объект);
	ТаблицаДанных = ЗапросРеквизитов.Выполнить().Выгрузить();
	Если ТаблицаДанных.Количество() > 0 Тогда 
		Результат = Новый Структура();
		Для Каждого ТекущаяКолонка Из ТаблицаДанных.Колонки Цикл
			Результат.Вставить(ТекущаяКолонка.Имя, ТаблицаДанных[0].Получить(ТаблицаДанных.Колонки.Индекс(ТекущаяКолонка)));
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
 
//
//
Функция ПолучитьВидОбъекта(Объект) Экспорт
	Результат = Неопределено;
	ТипЗначенияОбъект = ТипЗнч(Объект);
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗначенияОбъект) Тогда
		Результат = "Справочник";
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗначенияОбъект) Тогда
		Результат = "Документ";
	КонецЕсли;
	Возврат Результат;
КонецФункции
 
//
//
Функция ДопустимоИспользованиеФайловыхЗаданийВФайловомВарианте() Экспорт
		
	лСвойстваОбъектовРежимСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости;
	НедоступныеРежимы = Новый Массив;
	НедоступныеРежимы.Добавить("Версия8_1");
	НедоступныеРежимы.Добавить("Версия8_2_13");
	НедоступныеРежимы.Добавить("Версия8_2_16");
	НедоступныеРежимы.Добавить("Версия8_3_1");
	НедоступныеРежимы.Добавить("Версия8_3_2");
	
	Результат = (НедоступныеРежимы.Найти(СокрЛП(Метаданные.РежимСовместимости)) = Неопределено);
	
	Возврат Результат;
	
КонецФункции
 
//
//
Функция ДопустимоИспользованиеФайловыхЗаданий() Экспорт
			
	Возврат НЕ ОбщегоНазначенияСервер.ИнформационнаяБазаФайловая() ИЛИ ОбщегоНазначенияСервер.ДопустимоИспользованиеФайловыхЗаданийВФайловомВарианте();
	
КонецФункции
 
//
//
Функция ДопустимоИспользованиеПравилОбъединения(НомерРелизаПлатформы) Экспорт
			
	Возврат ОбщегоНазначенияСервер.ДополнитьНулямиЧисловыеЗначенияСтрокиРелиза(НомерРелизаПлатформы) >= ОбщегоНазначенияСервер.ДополнитьНулямиЧисловыеЗначенияСтрокиРелиза("8.3.8.1652");
	
КонецФункции

//
//
Функция УдалитьТегXML(ДанныеXML, Тег) Экспорт
	Возврат СтрЗаменить(СтрЗаменить(ДанныеXML, "<" + Тег + ">", ""), "</" + Тег + ">", "");
КонецФункции

//
//
Функция ПолучитьНаборДанныхПоТегуXML(ДанныеXML, Тег) Экспорт
	РезультатXML = "";
	// ищем начало и конец блока по тегу
	НачалоБлока = "<" + Тег + ">"; КонецБлока = "</" + Тег + ">";
	НачалоНабора = Найти(ДанныеXML, НачалоБлока); КонецНабора = Найти(ДанныеXML, КонецБлока);
	Если НачалоНабора > 0 И КонецНабора > 0 И КонецНабора > НачалоНабора Тогда 
		// выбираем содержимое блока по тегу
		СодержимоеТега = Сред(ДанныеXML, НачалоНабора, КонецНабора + СтрДлина(КонецБлока) - НачалоНабора);
		РезультатXML = УдалитьТегXML(СодержимоеТега, Тег);
		ДанныеXML = СтрЗаменить(ДанныеXML, СодержимоеТега, "");
	КонецЕсли;
	Возврат РезультатXML;
КонецФункции

//
//
Функция ДополнитьНулямиЧисловыеЗначенияСтрокиРелиза(ИсходнаяСтрока, РазмерДополнения = 10, Разделитель = ".") Экспорт
	
	Результат = "";
	МассивПодстрок = ОбщегоНазначенияСервер.РазложитьСтрокуВМассивПодстрок(ИсходнаяСтрока, Разделитель);
	Если МассивПодстрок.Количество() > 0 Тогда
		Для Каждого ЭлементМассивПодстрок Из МассивПодстрок Цикл		
			КоличествоЗнаков = СтрДлина(ЭлементМассивПодстрок);
			КоличествоЗнаков = Макс(КоличествоЗнаков, РазмерДополнения) - КоличествоЗнаков;
			Пока КоличествоЗнаков > 0 Цикл
				Результат = Результат + "0";
				КоличествоЗнаков = КоличествоЗнаков - 1;
			КонецЦикла;
			Результат = Результат + ЭлементМассивПодстрок + Разделитель;
		КонецЦикла;
	Иначе
		Результат = ИсходнаяСтрока;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//
//
Функция ДополнитьЗначениеСимволомСправа(Значение, Символ = "\") Экспорт
	Возврат Значение + ?(Прав(Значение,1) = "\", "", "\");
КонецФункции

//
//
Функция ПолучитьПолноеИмяВременногоФайла(Расширение = "txt", ПрефиксКаталога = "") Экспорт 
	
	ИмяВременногоФайла = СокрЛП(Новый УникальныйИдентификатор) + "." + Расширение;
	ПолноИмяВременногоФайла = ОбщегоНазначенияСервер.ДополнитьЗначениеСимволомСправа(КаталогВременныхФайлов()) + ПрефиксКаталога + ИмяВременногоФайла;	
	
	Возврат ПолноИмяВременногоФайла;
	
КонецФункции

//
//
Функция ПолучитьЭлементМассива(Массив, Индекс) Экспорт
	
	Возврат ?(Индекс < Массив.Количество(), Массив[Индекс], Неопределено);
	
КонецФункции

//
//
Функция ПолучитьЗначениеСвойства(Структура, ИмяСвойства, Контейнер = Неопределено, ОчищатьКонтейнер = Ложь) Экспорт
	ЗначениеСвойства = Неопределено;
	Если ЗначениеЗаполнено(Структура) Тогда
		Контейнер = ?(ОчищатьКонтейнер ИЛИ Контейнер = Неопределено, Неопределено, Контейнер);
		Если ТипЗнч(Структура) = Тип("Структура") Тогда
			Если Структура.Свойство(ИмяСвойства, ЗначениеСвойства) Тогда
				Контейнер = ЗначениеСвойства;
			КонецЕсли;
		Иначе 
			ЗначениеСвойства = Структура[ИмяСвойства];
			Контейнер = ЗначениеСвойства;
		КонецЕсли;
	КонецЕсли;
	Возврат ЗначениеСвойства;
КонецФункции

//
//
Функция ЗаполнитьШаблонПараметрами(ТекстШаблона, ПараметрыЗаполнения, ПрефикПараметров = "%", ПостфиксПараметров = "%") Экспорт
	
	Результат = ТекстШаблона;
	
	Для Каждого ТекущийПараметр Из ПараметрыЗаполнения Цикл
		ИмяМараметра = ПрефикПараметров + ТекущийПараметр.Ключ + ПостфиксПараметров;
		Пока СтрЧислоВхождений(Результат, ИмяМараметра) > 0 Цикл
			Результат = СтрЗаменить(Результат, ИмяМараметра, ТекущийПараметр.Значение);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

//
//
Функция ПолучитьОбщийМакетПоИмени(ИмяМакета) Экспорт
	Возврат ПолучитьОбщийМакет(ИмяМакета);
КонецФункции