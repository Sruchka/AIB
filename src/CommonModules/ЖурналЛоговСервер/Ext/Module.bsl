
// Общий модуль
//

&НаСервере
//
//
Функция ВывестиСообщениеВЛог(ПараметрыОбработки) Экспорт
	                                                           
	Если ПараметрыОбработки.ОтображатьТрассировкуСообщений Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "-------------------------------------------------------------------------" + Символы.ПС + ПараметрыОбработки.ОписаниеОшибки;
		Сообщение.Сообщить();
		
	КонецЕсли;	
	
	ПараметрыОбработки.ЖурналВыполнения = ПараметрыОбработки.ЖурналВыполнения + ПараметрыОбработки.ОписаниеОшибки + Символы.ПС;
	
	Если ЗначениеЗаполнено(ПараметрыОбработки.ФайлТехнологическогоЛога) Тогда
		ПозицияЗаписиТекущегоЛога = ЖурналЛоговСервер.ПолучитьПозициюЗаписиТекущегоЛога(ПараметрыОбработки);
		ПозицияЗаписиТекущегоЛога.ЗаписьЛогов.Сообщение = ПараметрыОбработки.ЖурналВыполнения;		
		ПозицияЗаписиТекущегоЛога.НаборЗаписей.Записать(Истина);
		
		ЗадачиНаСервере.ОповеститьОВыполненииОперации(ПараметрыОбработки, Истина);
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
//
//
Функция СформироватьДанныеФайлаЛога(ПараметрыОбработки) Экспорт
	
	Результат = Истина;	
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОбработки.ФайлТехнологическогоЛога) Тогда
		
		ПараметрыОбработки.ОписаниеОшибки = "------------ НАЧАЛО ОБРАБОТКИ " + ТекущаяДатаСеанса() + " ОПЕРАЦИЯ " + ПараметрыОбработки.ВидОбработки;
		ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
	
		ПараметрыОбработки.ФайлТехнологическогоЛога = КаталогВременныхФайлов() + СокрЛП(ПараметрыОбработки.ИнформационнаяБаза.УникальныйИдентификатор()) + ".techlog";
		
	КонецЕсли;
	
	Если НЕ Результат Тогда 
		
		ПараметрыОбработки.ОписаниеОшибки = "Ошибка формирования файла логов! Логирование для текущей операции отключено." + Символы.ПС + ПараметрыОбработки.ОписаниеОшибки;
		ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
//
//
Функция ПолучитьСодержимоеФайлаЛога(ИмяФайлаЛогов) Экспорт
	ДанныеЛога = "";
	ФайлЛога = Новый Файл(ИмяФайлаЛогов);		
	Если ФайлЛога.Существует() Тогда
		Попытка
			ЧтениеЛога = Новый ЧтениеТекста(ИмяФайлаЛогов, КодировкаТекста.Системная, , , Ложь);
			ТекущаяСтрока = ЧтениеЛога.ПрочитатьСтроку();
			Пока ТекущаяСтрока <> Неопределено Цикл
				ДанныеЛога = ДанныеЛога + Символы.ПС + СокрЛП(ТекущаяСтрока);
				ТекущаяСтрока = ЧтениеЛога.ПрочитатьСтроку()
			КонецЦикла;
			ЧтениеЛога.Закрыть();
		Исключение
			ДанныеЛога = "Ошибка чтения содержимого технологического журнала: " + ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	Возврат ДанныеЛога;
КонецФункции

&НаСервере
//
//
Функция ЗагрузитьДанныеФайлаЛога(ПараметрыОбработки) Экспорт
	ПараметрыОбработки.ОписаниеОшибки = "Технологический лог: " + Символы.ПС + ЖурналЛоговСервер.ПолучитьСодержимоеФайлаЛога(ПараметрыОбработки.ФайлТехнологическогоЛога);	
	ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
	Попытка			
		УдалитьФайлы(ПараметрыОбработки.ФайлТехнологическогоЛога);
	Исключение
	КонецПопытки;	
	Возврат Истина;
КонецФункции

&НаСервере
//
//
Функция ПолучитьПозициюЗаписиТекущегоЛога(ПараметрыОбработки) Экспорт
	Результат = Новый Структура("НаборЗаписей, ЗаписьЛогов", Неопределено, Неопределено);
	Результат.НаборЗаписей = РегистрыСведений.ЖурналЛогов.СоздатьНаборЗаписей();
	Результат.НаборЗаписей.Отбор.ДатаСобытия.Установить(ПараметрыОбработки.ПериодЖурнала);
	Результат.НаборЗаписей.Отбор.ИнформационнаяБаза.Установить(ПараметрыОбработки.ИнформационнаяБаза);
	//Результат.НаборЗаписей.Отбор.ВидОбработки.Установить(ПараметрыОбработки.ВидОбработки);
	Результат.НаборЗаписей.Прочитать();
	Если Результат.НаборЗаписей.Количество() = 0 Тогда 
		Результат.ЗаписьЛогов = Результат.НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Результат.ЗаписьЛогов, ПараметрыОбработки);		
		Результат.ЗаписьЛогов.ДатаСобытия = ПараметрыОбработки.ПериодЖурнала;
	Иначе 
		Результат.ЗаписьЛогов = Результат.НаборЗаписей[0];
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаСервере
//
//
Функция ЗаписатьВАрхивЛогов(ПараметрыОбработки, ВыполненоУспешно = Истина) Экспорт
	
	Результат = Истина;
	
	ДатаСобытия = ТекущаяДатаСеанса();
	
	ЖурналЛоговСервер.ЗагрузитьДанныеФайлаЛога(ПараметрыОбработки);
	
	ПараметрыОбработки.ОписаниеОшибки = "------------ КОНЕЦ ОБРАБОТКИ " + ДатаСобытия + " ОПЕРАЦИЯ " + ПараметрыОбработки.ВидОбработки;
	ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
	
	Если ЗначениеЗаполнено(ПараметрыОбработки.ЖурналВыполнения) Тогда 		
		ПозицияЗаписиТекущегоЛога = ЖурналЛоговСервер.ПолучитьПозициюЗаписиТекущегоЛога(ПараметрыОбработки);
		ПозицияЗаписиТекущегоЛога.ЗаписьЛогов.Сообщение = ПараметрыОбработки.ЖурналВыполнения;
		ПозицияЗаписиТекущегоЛога.ЗаписьЛогов.ВыполненоУспешно = ВыполненоУспешно;
		ПозицияЗаписиТекущегоЛога.НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
	Если НЕ Результат Тогда 
		ПараметрыОбработки.ОписаниеОшибки = "Ошибка формирования файла логов! Логирование для текущей операции отключено." + Символы.ПС + ПараметрыОбработки.ОписаниеОшибки;
		ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
	КонецЕсли;
	
	ЗадачиНаСервере.ОповеститьОВыполненииОперации(ПараметрыОбработки, ВыполненоУспешно);
	
	Возврат Результат;
КонецФункции    
