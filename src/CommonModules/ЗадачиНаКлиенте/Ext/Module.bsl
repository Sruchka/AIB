// Общий модуль
//

//
//
Процедура ВывестиСостояние(ТекстСостояния) Экспорт
	#Если КЛИЕНТ Тогда
		Состояние(ТекстСостояния);
	#КонецЕсли
КонецПроцедуры
 
//
//
Процедура СформироватьФайлЛога(ПараметрыОбработки, ВидОбработкиВнешний, Результат) Экспорт
	Если НЕ ЗначениеЗаполнено(ВидОбработкиВнешний) Тогда
		ВывестиСостояние("Формирование файла логов <" + ПараметрыОбработки.ИнформационнаяБаза + ">");		
		ЖурналЛоговСервер.СформироватьДанныеФайлаЛога(ПараметрыОбработки);
	КонецЕсли;
КонецПроцедуры
 
//
//
Процедура ЗаписатьФайлЛога(ПараметрыОбработки, ВидОбработкиВнешний, Результат) Экспорт
	Если НЕ ЗначениеЗаполнено(ВидОбработкиВнешний) Тогда
		ВывестиСостояние("Загрузка данных логов <" + ПараметрыОбработки.ИнформационнаяБаза + ">");
		Если НЕ ЖурналЛоговСервер.ЗаписатьВАрхивЛогов(ПараметрыОбработки, Результат) Тогда					
			ПараметрыОбработки.ОписаниеОшибки = "Ошибка формирования файла логов! Логирование для текущей операции отключено." + Символы.ПС + ПараметрыОбработки.ОписаниеОшибки;
			ЖурналЛоговКлиент.ВывестиПредупреждение(ПараметрыОбработки);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
 
//
//
Функция ПолучитьИмяФайлаАрхиваИзПолногоПути(ПолныйПуть) Экспорт
	ПолноеИмяФайлаАрхива = "";
	КоличествоСимволов = СтрДлина(ПолныйПуть);		
	Пока КоличествоСимволов > 0 Цикл
		ТекущийСимвол = Сред(ПолныйПуть, КоличествоСимволов, 1);
		Если ТекущийСимвол <> "\" Тогда 
			ПолноеИмяФайлаАрхива = ТекущийСимвол + ПолноеИмяФайлаАрхива;
			КоличествоСимволов = КоличествоСимволов - 1;
		Иначе 
			КоличествоСимволов = 0;
		КонецЕсли;
	КонецЦикла;
	Возврат ПолноеИмяФайлаАрхива;
КонецФункции
 
//
//
Функция ОтключитьСеансы(ПараметрыОбработки) Экспорт
	
	Результат = Ложь;
	
	ВидОбработкиВнешний = ПараметрыОбработки.ВидОбработки;
	ПараметрыОбработки.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.ОтключитьСеансы");
	
	ТекстСостояния = ЗадачиНаСервере.ПолучитьТекстСостояния(ПараметрыОбработки);	
	ВывестиСостояние(ТекстСостояния);
	
	Результат = ЗадачиНаСервере.ОтключитьСеансы(ПараметрыОбработки);	
	
	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ПараметрыОбработки.ИнформационнаяБаза));
	
	ПараметрыОбработки.ВидОбработки = ВидОбработкиВнешний;
	
	Возврат Результат;
КонецФункции
 
//
//
Функция УстановитьБлокировкуРегламентныхЗаданий(ПараметрыОбработки, Установить = Ложь) Экспорт
	
	Результат = Ложь;
	
	ВидОбработкиВнешний = ПараметрыОбработки.ВидОбработки;
	Если Установить Тогда
		ПараметрыОбработки.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.БлокировкаРегламентныхЗаданийУстановить");
	Иначе 
		ПараметрыОбработки.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.БлокировкаРегламентныхЗаданийСнять");
	КонецЕсли;
	
	Результат = ЗадачиНаСервере.УстановитьБлокировкуРегламентныхЗаданий(ПараметрыОбработки, Установить);	
	
	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ПараметрыОбработки.ИнформационнаяБаза));
	
	ПараметрыОбработки.ВидОбработки = ВидОбработкиВнешний;
	
	Возврат Результат;
КонецФункции
 
//
//
Функция УстановитьБлокировкуСеансовИБ(ПараметрыОбработки, Установить = Ложь) Экспорт	
	
	Результат = Ложь;
	
	ВидОбработкиВнешний = ПараметрыОбработки.ВидОбработки;
	Если Установить Тогда
		ПараметрыОбработки.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.БлокировкаСеансовУстановить");		
	Иначе 
		ПараметрыОбработки.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.БлокировкаСеансовСнять");
	КонецЕсли;	
	
	ТекстСостояния = ЗадачиНаСервере.ПолучитьТекстСостояния(ПараметрыОбработки);
	ВывестиСостояние(ТекстСостояния);
	
	Результат = ЗадачиНаСервере.УстановитьБлокировкуСеансовИБ(ПараметрыОбработки, Установить);	
	
	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ПараметрыОбработки.ИнформационнаяБаза));
	
	ПараметрыОбработки.ВидОбработки = ВидОбработкиВнешний;
	
	Возврат Результат;
КонецФункции
 
//
//
Функция ОбновитьИнформациюПоБазе(ПараметрыОбработки) Экспорт 	
	
	Результат = Ложь;
	
	ПараметрыОбработки.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.ОбновлениеИнформации");
	
	ТекстСостояния = ЗадачиНаСервере.ПолучитьТекстСостояния(ПараметрыОбработки);	
	ВывестиСостояние(ТекстСостояния);
	
	Результат = ЗадачиНаСервере.ОбновитьИнформациюПоБазе(ПараметрыОбработки);			
	
	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ПараметрыОбработки.ИнформационнаяБаза));
	
	Возврат Результат;
КонецФункции
 
//
//
Функция ЗагрузитьАрхив(ПараметрыОбработки) Экспорт
	
	Результат = Ложь;
	
	ВидОбработкиВнешний = ПараметрыОбработки.ВидОбработки;
	ПараметрыОбработки.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.ЗагрузкаАрхива");
	
	ТекстСостояния = ЗадачиНаСервере.ПолучитьТекстСостояния(ПараметрыОбработки);	
	ВывестиСостояние(ТекстСостояния);
	
	Результат = ЗадачиНаСервере.ЗагрузитьАрхив(ПараметрыОбработки);		
	
	ПараметрыОбработки.ВидОбработки = ВидОбработкиВнешний;

	Возврат Результат;
КонецФункции
 
//
//
Функция ВыгрузитьАрхив(ПараметрыОбработки) Экспорт
	
	Результат = Ложь;
	
	ВидОбработкиВнешний = ПараметрыОбработки.ВидОбработки;
	ПараметрыОбработки.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.ВыгрузкаАрхива");
	
	ТекстСостояния = ЗадачиНаСервере.ПолучитьТекстСостояния(ПараметрыОбработки);	
	ВывестиСостояние(ТекстСостояния);	
	
	Результат = ЗадачиНаСервере.ВыгрузитьАрхив(ПараметрыОбработки);
	
	ПараметрыОбработки.ВидОбработки = ВидОбработкиВнешний;

	Возврат Результат;
КонецФункции
 
//
//
Функция УстановитьОбновление(ПараметрыОбработки, РелизОбновления) Экспорт	
	
	Результат = Ложь;
	
	УстановкаИзХранилища = (ТипЗнч(РелизОбновления) = Тип("СправочникСсылка.Сервера"));
	
	ВидОбработкиВнешний = ПараметрыОбработки.ВидОбработки;
	Если НЕ УстановкаИзХранилища Тогда
		ПараметрыОбработки.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.ОбновлениеИБ");
	Иначе
		ПараметрыОбработки.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.ОбновлениеИБИзХранилищаКонфигураций");
	КонецЕсли;
	
	ТекстСостояния = ЗадачиНаСервере.ПолучитьТекстСостояния(ПараметрыОбработки);	
	ВывестиСостояние(ТекстСостояния);
	
	Результат = ЗадачиНаСервере.УстановитьОбновление(ПараметрыОбработки, РелизОбновления);
	
	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ПараметрыОбработки.ИнформационнаяБаза));							
	
	Оповестить("ИнформационныеБазы.Обновить.ФормаСписка");	
	
	ПараметрыОбработки.ВидОбработки = ВидОбработкиВнешний;
		
	Возврат Результат;
КонецФункции
 
//
//
Функция ЗапуститьОбработчик(ПараметрыОбработки) Экспорт
	
	Результат = Ложь;
	
	ВидОбработкиВнешний = ПараметрыОбработки.ВидОбработки;
	ПараметрыОбработки.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.ВыполнениеОбработчика");
	
	ТекстСостояния = ЗадачиНаСервере.ПолучитьТекстСостояния(ПараметрыОбработки);	
	ВывестиСостояние(ТекстСостояния);	
	
	Результат = ЗадачиНаСервере.ЗапуститьОбработчик(ПараметрыОбработки);	
	
	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ПараметрыОбработки.ИнформационнаяБаза));										
	
	Оповестить("ИнформационныеБазы.Обновить.ФормаСписка");
	
	Возврат Результат
КонецФункции

 
//
//
Процедура ДиалогЗагрузкиАрхива(ПараметрыОбработки, ЭтаФорма = Неопределено) Экспорт
	
	#Если КЛИЕНТ Тогда
		ПараметрыОповещения = Новый Структура("ПараметрыОбработки, ЭтаФорма", ПараметрыОбработки, ЭтаФорма);
		ПоказатьВопрос(Новый ОписаниеОповещения("ДиалогЗагрузкиАрхиваПодтверждениеОписаниеОповещения", ЗадачиНаКлиенте, ПараметрыОповещения), "Вы уверены, что хотите загрузить данные из архива?" + Символы.ПС + "Все имеющиеся данные ИБ будут удалены.", РежимДиалогаВопрос.ДаНет);
	#КонецЕсли

КонецПроцедуры

 
//
//
Процедура ДиалогЗагрузкиАрхиваПодтверждениеОписаниеОповещения(РезультатОповещения, ПараметрыОповещения) Экспорт
	
	#Если КЛИЕНТ Тогда
		Если РезультатОповещения = КодВозвратаДиалога.Нет Тогда Возврат; КонецЕсли;
		
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораВариантаЗагрузкиАрхива", Новый Структура("ПараметрыОбработки", ПараметрыОповещения.ПараметрыОбработки), 
		ПараметрыОповещения.ЭтаФорма,,,, Новый ОписаниеОповещения("ДиалогЗагрузкиАрхиваВыборВариантаЗагрузкиАрхиваОписаниеОповещения", ЗадачиНаКлиенте, Новый Структура("ПараметрыОбработки", ПараметрыОповещения.ПараметрыОбработки)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	#КонецЕсли
		
КонецПроцедуры

 
//
//
Процедура ДиалогЗагрузкиАрхиваВыборВариантаЗагрузкиАрхиваОписаниеОповещения(РезультатОповещения, ПараметрыОповещения) Экспорт
	
	Если НЕ ЗначениеЗаполнено(РезультатОповещения) Тогда Возврат; КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПараметрыОповещения.ПараметрыОбработки, РезультатОповещения);
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОповещения.ПараметрыОбработки) Тогда Возврат; КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыОповещения.ПараметрыОбработки.ИмяАрхива) Тогда Возврат; КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыОповещения.ПараметрыОбработки.ТипАрхива) Тогда Возврат; КонецЕсли;
	
	ЗадачиНаКлиенте.ЗагрузитьАрхив(ПараметрыОповещения.ПараметрыОбработки);
	
КонецПроцедуры

 
//
//
Функция ДиалогВыбораРелизаОбновления(Источник, ПараметрыОбработки) Экспорт 
	
	#Если КЛИЕНТ Тогда
		
		Отбор = Новый Структура;
		РелизОбновления = ЗадачиНаСервере.ПолучитьЗначениеРеквизита(ПараметрыОбработки.ИнформационнаяБаза, "РелизОбновления");
		Если НЕ ЗадачиНаСервере.ПолучитьЗначениеРеквизита(ПараметрыОбработки.ИнформационнаяБаза, "ОтключитьПроверкуСоответствияРелизов") Тогда 		
			
			МассивРелизовОбновления = Новый Массив;
			ВывестиСостояние("Формируем список допустимых к установке релизов...");
			ЗадачиНаСервере.НайтиДопустимыеРелизыОбновления(ПараметрыОбработки, МассивРелизовОбновления);
			
			СписокРелизовОбновления = Новый СписокЗначений;
			СписокРелизовОбновления.ЗагрузитьЗначения(МассивРелизовОбновления);
			
			Отбор.Вставить("Ссылка", СписокРелизовОбновления);
			
		Иначе
			
			Отбор.Вставить("ВидКонфигурации", ЗадачиНаСервере.ПолучитьЗначениеРеквизита(РелизОбновления, "ВидКонфигурации"));
			
		КонецЕсли;
		
		ОткрытьФорму("Справочник.РелизыОбновлений.ФормаВыбора", Новый Структура("Отбор", Отбор), Источник,,,, Новый ОписаниеОповещения("ДиалогВыбораРелизаОбновления_ОбработкаОповещения", Источник), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс); 		
		
	#КонецЕсли

КонецФункции

 
//
//
Функция КомандаЗапуститьТестированиеИсправление(ПараметрыОбработки) Экспорт
	Результат = Ложь;
	
	ВидОбработкиВнешний = ПараметрыОбработки.ВидОбработки;
	ПараметрыОбработки.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.Тестирование");
	
	ТекстСостояния = ЗадачиНаСервере.ПолучитьТекстСостояния(ПараметрыОбработки);		
							
	ВывестиСостояние(ТекстСостояния);
	
	ЗадачиНаСервере.КомандаЗапуститьТестированиеИсправление(ПараметрыОбработки);
	
	ПараметрыОбработки.ВидОбработки = ВидОбработкиВнешний;
	
	ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(ПараметрыОбработки.ИнформационнаяБаза));
		
	Возврат Результат
КонецФункции

 
//
//
Функция КомандаЗапуститьКонфигуратор(ИнформационнаяБаза) Экспорт
	
	#ЕСЛИ НЕ ВебКлиент ТОГДА
		ПараметрыОбработки = ЗадачиНаСервере.ПолучитьСтруктуруПараметровОбработки(ИнформационнаяБаза);	
		ПараметрыОбработки.АвтоматическоеПодключениеКХранилищуПриЗапускеКонфигуратора = ЗадачиНаСервере.ПолучитьЗначениеРеквизита(ИнформационнаяБаза, "АвтоматическоеПодключениеКХранилищуПриЗапускеКонфигуратора");
		ЗапуститьПриложение(ЗадачиНаСервере.ПолучитьКомандуОткрытияВРежимеКонфигуратора(ПараметрыОбработки), , Ложь);
	#ИНАЧЕ
	    ОбщегоНазначенияСервер.ВывестиСообщение("Данная функция недоступна при работе через Веб-клиент.");
	#КОНЕЦЕСЛИ
		
КонецФункции

 
//
//
Функция КомандаЗапуститьПредприятие(ИнформационнаяБаза = Неопределено, ПараметрыОбработки = Неопределено) Экспорт
	
	#ЕСЛИ НЕ ВебКлиент ТОГДА
		Если ПараметрыОбработки = Неопределено Тогда
			ПараметрыОбработки = ЗадачиНаСервере.ПолучитьСтруктуруПараметровОбработки(ИнформационнаяБаза);	
		КонецЕсли;
		ПараметрыОбработки.КлиентскийЗапуск = Истина;
		ЗапуститьПриложение(ЗадачиНаСервере.ПолучитьКомандуОткрытияВРежимеПредприятия(ПараметрыОбработки), , Ложь);	
	#ИНАЧЕ
	   ОбщегоНазначенияСервер.ВывестиСообщение("Данная функция недоступна при работе через Веб-клиент.");
	#КОНЕЦЕСЛИ
	
КонецФункции

&НаКлиенте
//
//
Процедура ПоказатьТекстовуюИнформацию(Заголовок, ТекстРезультат) Экспорт
	
	ОткрытьФорму("ОбщаяФорма.ФормаПредпросмотраТекстовойИнформации", Новый Структура("Заголовок, ТекстРезультат", Заголовок, ТекстРезультат));
	
КонецПроцедуры