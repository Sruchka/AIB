
&НаКлиенте
//
//
Процедура СнятьБлокировку(Команда)
	
	Для Каждого ИнформационнаяБаза Из Элементы.Список.ВыделенныеСтроки Цикл
		
		Если ТипЗнч(ИнформационнаяБаза) <> Тип("СправочникСсылка.ИнформационныеБазы") Тогда Возврат; КонецЕсли;	
		ПараметрыОбработки = ЗадачиНаСервере.ПолучитьСтруктуруПараметровОбработки(ИнформационнаяБаза);
		ПараметрыОбработки.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.БлокировкаСеансовСнять");
		ЗадачиНаКлиенте.УстановитьБлокировкуСеансовИБ(ПараметрыОбработки, Ложь);
		
	КонецЦикла;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура УстановитьБлокировкуСеансовИБ(Команда)
	
	Для Каждого ИнформационнаяБаза Из Элементы.Список.ВыделенныеСтроки Цикл
		
		Если ТипЗнч(ИнформационнаяБаза) <> Тип("СправочникСсылка.ИнформационныеБазы") Тогда Возврат; КонецЕсли;	
		ПараметрыОбработки = ЗадачиНаСервере.ПолучитьСтруктуруПараметровОбработки(ИнформационнаяБаза);
		ПараметрыОбработки.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.БлокировкаСеансовУстановить");		
		ЗадачиНаКлиенте.УстановитьБлокировкуСеансовИБ(ПараметрыОбработки, Истина);
		
	КонецЦикла;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ВыгрузитьАрхив(Команда)
	
	МассивПараметрыОбработки = Новый Массив;
	Для Каждого ИнформационнаяБаза Из Элементы.Список.ВыделенныеСтроки Цикл
		
		Если ТипЗнч(ИнформационнаяБаза) <> Тип("СправочникСсылка.ИнформационныеБазы") Тогда Возврат; КонецЕсли;	
		ПараметрыОбработки = ЗадачиНаСервере.ПолучитьСтруктуруПараметровОбработки(ИнформационнаяБаза);
		
		Если Команда = ЭтаФорма.Команды.Найти("ВыгрузитьАрхивSQL") Тогда 
			ПараметрыОбработки.ТипАрхива = ПредопределенноеЗначение("Перечисление.ТипыФайловАрхива.АрхивSQL");
		Иначе
			ПараметрыОбработки.ТипАрхива = ПредопределенноеЗначение("Перечисление.ТипыФайловАрхива.Архив1С");
		КонецЕсли;		
		ПараметрыОбработки.ВыгружатьАрхив = Истина;
		
		МассивПараметрыОбработки.Добавить(ПараметрыОбработки);
		
	КонецЦикла;

	ПараметрыОповещения = Новый Структура("МассивПараметрыОбработки", МассивПараметрыОбработки);
	
	Если ЗадачиНаСервере.ПолучитьЗначениеРеквизита(ИнформационнаяБаза, "ТипИБ") = ПредопределенноеЗначение("Перечисление.ТипыИБ.Серверная") Тогда 	
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ВыгрузитьАрхивОписаниеОповещения", ЭтаФорма, ПараметрыОповещения), "Отключать сеансы активных пользователей?", РежимДиалогаВопрос.ДаНетОтмена, 10, КодВозвратаДиалога.Отмена, "Выгрузка архива");		
		
	Иначе
		
		ВыгрузитьАрхивОписаниеОповещения(КодВозвратаДиалога.Нет, ПараметрыОповещения);	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ВыгрузитьАрхивОписаниеОповещения(РезультатОповещения, ПараметрыОповещения) Экспорт	
	
	Для Каждого ПараметрыОбработки Из ПараметрыОповещения.МассивПараметрыОбработки Цикл
		
		Если РезультатОповещения = КодВозвратаДиалога.Да Тогда 
			ПараметрыОбработки.ОтключатьСеансы = Истина;
		ИначеЕсли РезультатОповещения = КодВозвратаДиалога.Отмена Тогда 
			Возврат;
		КонецЕсли;
		
		ЗадачиНаКлиенте.ВыгрузитьАрхив(ПараметрыОбработки);	
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
//
//
Процедура ОбновитьИнформациюПоБазамСервер()
	Перем ОписаниеОшибки;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнформационныеБазы.Ссылка
		|ИЗ
		|	Справочник.ИнформационныеБазы КАК ИнформационныеБазы
		|ГДЕ
		|	НЕ ИнформационныеБазы.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИнформационныеБазы.ВидКонфигурации,
		|	ИнформационныеБазы.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПорядковыйНомер = 0;
	КоличествоЭлементовОбработки = Выборка.Количество();
	Пока Выборка.Следующий() Цикл 				
		
		ПараметрыОбработки = ЗадачиНаСервере.ПолучитьСтруктуруПараметровОбработки(Выборка.Ссылка);
		ПараметрыОбработки.ТихийРежим = Истина;		
		ЗадачиНаСервере.ОбновитьИнформациюПоБазе(ПараметрыОбработки);		
		
		ПорядковыйНомер = ПорядковыйНомер + 1;
	КонецЦикла; 	
	
КонецПроцедуры

&НаСервере
//
//
Процедура ОбновитьИнформациюПоБазеНаСервере(ИнформационнаяБаза)
	ПараметрыОбработки = ЗадачиНаСервере.ПолучитьСтруктуруПараметровОбработки(ИнформационнаяБаза);
	ПараметрыОбработки.ТихийРежим = Истина;		
	ЗадачиНаСервере.ОбновитьИнформациюПоБазе(ПараметрыОбработки);		
КонецПроцедуры

&НаКлиенте
//
//
Процедура ОбновитьИнформациюПоБазе(Команда)
	
	Для Каждого ИнформационнаяБаза Из Элементы.Список.ВыделенныеСтроки Цикл 
		
		Если ТипЗнч(ИнформационнаяБаза) <> Тип("СправочникСсылка.ИнформационныеБазы") Тогда Продолжить; КонецЕсли;	
		Состояние("Обновление информации по базе <" + ИнформационнаяБаза + ">");
		
		ПараметрыОбработки = ЗадачиНаСервере.ПолучитьСтруктуруПараметровОбработки(ИнформационнаяБаза);
		ЗадачиНаКлиенте.ОбновитьИнформациюПоБазе(ПараметрыОбработки);
		
	КонецЦикла;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ОбновитьИнформациюПоБазам(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОбновитьИнформациюПоБазамОписаниеОповещения", ЭтаФорма), "Операция может занять продолжительное время! Продолжить?", РежимДиалогаВопрос.ДаНет);			
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ОбновитьИнформациюПоБазамОписаниеОповещения(РезультатОповещения, ПараметрыОповещения) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Нет Тогда Возврат; КонецЕсли;
			
	ОбновитьИнформациюПоБазамСервер();
		
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура УстановитьОбновление(Команда)
	Перем ОписаниеОшибки;
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() > 1 Тогда
		ПоказатьПредупреждение(,"Операция не применима для множественного выбора!");
		Возврат;
	КонецЕсли;
	
	ИнформационнаяБаза = Элементы.Список.ТекущаяСтрока;
	Если ТипЗнч(ИнформационнаяБаза) <> Тип("СправочникСсылка.ИнформационныеБазы") Тогда Возврат; КонецЕсли;
		
	ОткрытьФорму("ОбщаяФорма.ФормаПараметрыУстановкиОбновления", Новый Структура("ИнформационнаяБаза, ВидыГрупповойОбработки", ИнформационнаяБаза, ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.ОбновлениеИБ")), 
	ЭтаФорма,,,, Новый ОписаниеОповещения("УстановитьОбновлениеОповещениеУстановкаПараметров", ЭтаФорма, Новый Структура("ПараметрыОбработки", ЗадачиНаСервере.ПолучитьСтруктуруПараметровОбработки(ИнформационнаяБаза))), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
//
//
Процедура УстановитьОбновлениеОповещениеУстановкаПараметров(РезультатОповещения, ПараметрыОповещения) Экспорт
	
	Если РезультатОповещения = Неопределено Тогда Возврат; КонецЕсли;		
	
	ЗадачиНаКлиенте.УстановитьОбновление(РезультатОповещения.ПараметрыОбработки, РезультатОповещения.РелизОбновления);	
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ОткрытьКонфигуратор(Команда)
	КомандаОткрытьПриложение(1);	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ОткрытьПредприятие(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() > 1 Тогда
		ПоказатьПредупреждение(,"Операция не применима для множественного выбора!");
		Возврат;
	КонецЕсли;
	
	КомандаОткрытьПриложение(0);
	
КонецПроцедуры

&НаКлиенте
//
Процедура ОткрытьПредприятиеОтИмениПользователя(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() > 1 Тогда
		ПоказатьПредупреждение(,"Операция не применима для множественного выбора!");
		Возврат;
	КонецЕсли;
	
	КомандаОткрытьПриложение(0, , Истина);
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ОткрытьКонфигураторОтИмениПользователя(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() > 1 Тогда
		ПоказатьПредупреждение(,"Операция не применима для множественного выбора!");
		Возврат;
	КонецЕсли;
	
	КомандаОткрытьПриложение(1, , Истина);
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура КомандаОткрытьПриложение(ВидПриложения, ВидРежимаЗапуска = Неопределено, ВыбиратьПараметрыАвторизации = Ложь)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() > 1 Тогда
		ПоказатьПредупреждение(,"Операция не применима для множественного выбора!");
		Возврат;
	КонецЕсли;
	
	ИнформационнаяБаза = Элементы.Список.ТекущаяСтрока;
	Если ТипЗнч(ИнформационнаяБаза) <> Тип("СправочникСсылка.ИнформационныеБазы") Тогда Возврат; КонецЕсли;
	
	ПараметрыОбработки = ЗадачиНаСервере.ПолучитьСтруктуруПараметровОбработки(ИнформационнаяБаза);	
	Если НЕ ВидРежимаЗапуска = Неопределено Тогда
		ПараметрыОбработки.ВидРежимаЗапуска = ВидРежимаЗапуска;
	КонецЕсли;
	
	Если ВыбиратьПараметрыАвторизации Тогда
		ОткрытьФорму("ОбщаяФорма.ФормаВыбораПараметровАвторизации", Новый Структура("ИнформационнаяБаза", ИнформационнаяБаза), 
		ЭтаФорма,,,, Новый ОписаниеОповещения("КомандаОткрытьПриложениеОписаниеОповещения", ЭтаФорма, Новый Структура("ИнформационнаяБаза, ПараметрыОбработки, ВидПриложения", ИнформационнаяБаза, ПараметрыОбработки, ВидПриложения)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		КомандаОткрытьПриложениеВыполнитьЗапуск(ИнформационнаяБаза, ПараметрыОбработки, ВидПриложения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура КомандаОткрытьПриложениеОписаниеОповещения(РезультатОповещения, ПараметрыОповещения) Экспорт
	
	Если РезультатОповещения = Неопределено Тогда Возврат; КонецЕсли;
	
	ПараметрыОбработки = ПараметрыОповещения.ПараметрыОбработки;
	ПараметрыОбработки.Пользователь = РезультатОповещения;
	ПараметрыОбработки.ВидРежимаЗапуска = РезультатОповещения.ВидРежимаЗапуска;
		
	КомандаОткрытьПриложениеВыполнитьЗапуск(ПараметрыОповещения.ИнформационнаяБаза, ПараметрыОповещения.ПараметрыОбработки, ПараметрыОповещения.ВидПриложения);
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура КомандаОткрытьПриложениеВыполнитьЗапуск(ИнформационнаяБаза, ПараметрыОбработки, ВидПриложения)
	
	Если ВидПриложения = 0 Тогда			
		ЗадачиНаКлиенте.КомандаЗапуститьПредприятие(ИнформационнаяБаза, ПараметрыОбработки);
	Иначе
		ЗадачиНаКлиенте.КомандаЗапуститьКонфигуратор(ИнформационнаяБаза);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ОткрытьПредприятиеОбычноеПриложение(Команда)
	КомандаОткрытьПриложение(0, ПредопределенноеЗначение("Перечисление.ВидыРежимовЗапуска.ТолстыйКлиент"));
КонецПроцедуры

&НаКлиенте
//
//
Процедура ОткрытьПредприятиеУправляемоеПриложение(Команда)
	КомандаОткрытьПриложение(0, ПредопределенноеЗначение("Перечисление.ВидыРежимовЗапуска.ТонкийКлиент"));
КонецПроцедуры

&НаКлиенте
//
//
Процедура ТестированиеИсправление(Команда)
	
	МассивПараметрыОбработки = Новый Массив;
	Для Каждого ИнформационнаяБаза Из Элементы.Список.ВыделенныеСтроки Цикл
		Если ТипЗнч(ИнформационнаяБаза) <> Тип("СправочникСсылка.ИнформационныеБазы") Тогда Возврат; КонецЕсли;		
		МассивПараметрыОбработки.Добавить(ЗадачиНаСервере.ПолучитьСтруктуруПараметровОбработки(ИнформационнаяБаза));
	КонецЦикла;
	
	ОткрытьФорму("ОбщаяФорма.ФормаТестированиеИИсправление", , ЭтаФорма,,,,
	Новый ОписаниеОповещения("ТестированиеИсправлениеОписаниеОповещенияУстановкаПараметров", ЭтаФорма, Новый Структура("МассивПараметрыОбработки", МассивПараметрыОбработки)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ТестированиеИсправлениеОписаниеОповещенияУстановкаПараметров(РезультатОповещения, ПараметрыОповещения) Экспорт
		
	Если РезультатОповещения = Неопределено Тогда Возврат; КонецЕсли;
	
	Для Каждого ПараметрыОбработки ИЗ ПараметрыОповещения.МассивПараметрыОбработки Цикл	
		ПараметрыОбработки.ПараметрыТестирования = РезультатОповещения;			
	КонецЦикла;
	
	Если ЗадачиНаСервере.ПолучитьЗначениеРеквизита(ПараметрыОбработки.ИнформационнаяБаза, "ТипИБ") = ПредопределенноеЗначение("Перечисление.ТипыИБ.Серверная") Тогда 
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ТестированиеИсправлениеОписаниеОповещенияОтключениеСеансов", ЭтаФорма, ПараметрыОповещения), "Отключать сеансы активных пользователей?", РежимДиалогаВопрос.ДаНетОтмена, 10, КодВозвратаДиалога.Отмена, "Выгрузка архива");
		
	Иначе 	
		
		ТестированиеИсправлениеОписаниеОповещенияОтключениеСеансов(КодВозвратаДиалога.Нет, ПараметрыОповещения)
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ТестированиеИсправлениеОписаниеОповещенияОтключениеСеансов(РезультатОповещения, ПараметрыОповещения) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда 
		Для Каждого ПараметрыОбработки ИЗ ПараметрыОповещения.МассивПараметрыОбработки Цикл
			ПараметрыОбработки.ОтключатьСеансы = Истина;
		КонецЦикла;
	ИначеЕсли РезультатОповещения = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ТестированиеИсправлениеОписаниеОповещенияВыгрузкаАрхива", ЭтаФорма, ПараметрыОповещения), "Выгрузить архив перед операцией тестирования/исправления?", РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Да, "Выгрузка архива");	
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ТестированиеИсправлениеОписаниеОповещенияВыгрузкаАрхива(РезультатОповещения, ПараметрыОповещения) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого ПараметрыОбработки ИЗ ПараметрыОповещения.МассивПараметрыОбработки Цикл
		ПараметрыОбработки.ВыгружатьАрхив = РезультатОповещения = КодВозвратаДиалога.Да;
		ЗадачиНаКлиенте.КомандаЗапуститьТестированиеИсправление(ПараметрыОбработки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИнформационныеБазы.Обновить.ФормаСписка" Тогда 
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура УстановитьБлокировкуРегламентныхЗаданий(Команда)
	
	Для Каждого ИнформационнаяБаза Из Элементы.Список.ВыделенныеСтроки Цикл
		
		Если ТипЗнч(ИнформационнаяБаза) <> Тип("СправочникСсылка.ИнформационныеБазы") Тогда Возврат; КонецЕсли;	
		ПараметрыОбработки = ЗадачиНаСервере.ПолучитьСтруктуруПараметровОбработки(ИнформационнаяБаза);
		ПараметрыОбработки.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.БлокировкаРегламентныхЗаданийУстановить");
		ЗадачиНаКлиенте.УстановитьБлокировкуРегламентныхЗаданий(ПараметрыОбработки, Истина);	
		
	КонецЦикла;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура СнятьБлокировкуРегламентныхЗаданий(Команда)
	
	Для Каждого ИнформационнаяБаза Из Элементы.Список.ВыделенныеСтроки Цикл
		
		Если ТипЗнч(ИнформационнаяБаза) <> Тип("СправочникСсылка.ИнформационныеБазы") Тогда Возврат; КонецЕсли;	
		ПараметрыОбработки = ЗадачиНаСервере.ПолучитьСтруктуруПараметровОбработки(ИнформационнаяБаза);
		ПараметрыОбработки.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.БлокировкаРегламентныхЗаданийСнять");
		ЗадачиНаКлиенте.УстановитьБлокировкуРегламентныхЗаданий(ПараметрыОбработки, Ложь);	
		
	КонецЦикла;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервере
//
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	#ЕСЛИ ВебКлиент ТОГДА
		Элементы.СписокКонтекстноеМенюОткрытьКонфигуратор.Доступность = Ложь;
		Элементы.СписокКонтекстноеМенюОткрытьПредприятие.Доступность = Ложь;
	#КОНЕЦЕСЛИ
КонецПроцедуры

&НаКлиенте
//
//
Процедура ЗагрузитьАрхив(Команда) Экспорт	
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() > 1 Тогда
		ПоказатьПредупреждение(,"Операция не применима для множественного выбора!");
		Возврат;
	КонецЕсли;
	
	ИнформационнаяБаза = Элементы.Список.ТекущаяСтрока;
	Если ТипЗнч(ИнформационнаяБаза) <> Тип("СправочникСсылка.ИнформационныеБазы") Тогда Возврат; КонецЕсли;	
	
	ПараметрыОповещения = новый Структура("ПараметрыОбработки", ЗадачиНаСервере.ПолучитьСтруктуруПараметровОбработки(ИнформационнаяБаза));		
	
	Если ЗадачиНаСервере.ПолучитьЗначениеРеквизита(ИнформационнаяБаза, "ТипИБ") = ПредопределенноеЗначение("Перечисление.ТипыИБ.Серверная") Тогда 		
		
		ПоказатьВопрос(новый ОписаниеОповещения("ЗагрузитьАрхивОписаниеОповещенияВопросОтключатьСеансы", ЭтаФорма, ПараметрыОповещения), "Отключать сеансы активных пользователей?", РежимДиалогаВопрос.ДаНетОтмена, 10, КодВозвратаДиалога.Отмена, "Загрузка архива");
		
	Иначе
		
		 ЗагрузитьАрхивОписаниеОповещенияВопросОтключатьСеансы(КодВозвратаДиалога.Нет, ПараметрыОповещения);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ЗагрузитьАрхивОписаниеОповещенияВопросОтключатьСеансы(РезультатОповещения, ПараметрыОповещения) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда 	
		
		ПараметрыОповещения.ПараметрыОбработки.ОтключатьСеансы = Истина;
		
	ИначеЕсли РезультатОповещения = КодВозвратаДиалога.Отмена Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	ЗадачиНаКлиенте.ДиалогЗагрузкиАрхива(ПараметрыОповещения.ПараметрыОбработки, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ОтключитьСеансы(Команда)
	
	МассивПараметрыОбработки = Новый Массив;
	Для Каждого ИнформационнаяБаза Из Элементы.Список.ВыделенныеСтроки Цикл
		
		Если ТипЗнч(ИнформационнаяБаза) <> Тип("СправочникСсылка.ИнформационныеБазы") Тогда Возврат; КонецЕсли;	
		
		Если ЗадачиНаСервере.ПолучитьЗначениеРеквизита(ИнформационнаяБаза, "ТипИБ") = ПредопределенноеЗначение("Перечисление.ТипыИБ.Файловая") Тогда
			ОбщегоНазначенияСервер.ВывестиСообщение("Операция для файловой базы [" + ЗадачиНаСервере.ПолучитьЗначениеРеквизита(ИнформационнаяБаза, "Наименование") + "] не поддерижвается!"); 
			Продолжить;
		КонецЕсли;
		
		ПараметрыОбработки = ЗадачиНаСервере.ПолучитьСтруктуруПараметровОбработки(ИнформационнаяБаза);
		
		МассивПараметрыОбработки.Добавить(ПараметрыОбработки);
		
	КонецЦикла;
	
	ПараметрыОповещения = новый Структура("МассивПараметрыОбработки", МассивПараметрыОбработки);
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОтключитьСеансыОписаниеОповещенияВопросУдалениеСеансов", ЭтаФорма, ПараметрыОповещения), "Вы уверены, что хотите отключить сеансы активных пользователей?", РежимДиалогаВопрос.ДаНет,,, "Отключить сеансы");	
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ОтключитьСеансыОписаниеОповещенияВопросУдалениеСеансов(РезультатОповещения, ПараметрыОповещения) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		
		Для Каждого ПараметрыОбработки Из ПараметрыОповещения.МассивПараметрыОбработки Цикл
			
			ЗадачиНаКлиенте.ОтключитьСеансы(ПараметрыОбработки);	
			
		КонецЦикла;
		
		Элементы.Список.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

//
//
&НаКлиенте
Процедура УстановитьОбновлениеИзХранилища(Команда)
	Перем ОписаниеОшибки;
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() > 1 Тогда
		ПоказатьПредупреждение(,"Операция не применима для множественного выбора!");
		Возврат;
	КонецЕсли;
	
	ИнформационнаяБаза = Элементы.Список.ТекущаяСтрока;
	Если ТипЗнч(ИнформационнаяБаза) <> Тип("СправочникСсылка.ИнформационныеБазы") Тогда Возврат; КонецЕсли;		
	
	ОткрытьФорму("ОбщаяФорма.ФормаПараметрыУстановкиОбновления", Новый Структура("ИнформационнаяБаза, ВидыГрупповойОбработки", ИнформационнаяБаза, ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.ОбновлениеИБИзХранилищаКонфигураций")), 
	ЭтаФорма,,,, Новый ОписаниеОповещения("УстановитьОбновлениеИзХранилищаОповещениеУстановкаПараметров", ЭтаФорма, Новый Структура("ПараметрыОбработки", ЗадачиНаСервере.ПолучитьСтруктуруПараметровОбработки(ИнформационнаяБаза))), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 		

КонецПроцедуры

&НаКлиенте
//
//
Процедура УстановитьОбновлениеИзХранилищаОповещениеУстановкаПараметров(РезультатОповещения, ПараметрыОповещения) Экспорт
	
	Если РезультатОповещения = Неопределено Тогда Возврат; КонецЕсли;		
	
	ЗадачиНаКлиенте.УстановитьОбновление(РезультатОповещения.ПараметрыОбработки, РезультатОповещения.ХранилищеОбновлений);
		
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент.Имя = Элементы.ВыполненоУспешно.Имя Тогда
		
		Отказ = Истина;
		
		ИнформационнаяБаза = Элементы.Список.ТекущаяСтрока;
		
		РезультатПоследнейОперации = ЗадачиНаСервере.ПолучитьРезультатПоследнейОперации(ИнформационнаяБаза);
		ОткрытьФорму("ОбщаяФорма.ФормаПредпросмотраТекстовойИнформации", Новый Структура("ТекстРезультат", РезультатПоследнейОперации.Сообщение), ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ПриОткрытии(Отказ)
	//Если НЕ ОбщегоНазначенияСервер.ИнформационнаяБазаФайловая() Тогда
		ОбработкаОповещенийССервера();
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
//
//
Процедура ОбработкаОповещенийССервера()
	ОбработкаОповещенийССервераКлиент.ОбработкаОповещенийССервера();
	ПодключитьОбработчикОжидания("ОбработкаОповещенийССервера",5, Истина);
КонецПроцедуры

&НаКлиенте
//
//
Процедура ПоказатьАктивныеСоединения(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() > 1 Тогда
		ПоказатьПредупреждение(,"Операция не применима для множественного выбора!");
		Возврат;
	КонецЕсли;
	
	ИнформационнаяБаза = Элементы.Список.ТекущаяСтрока;
	Если ТипЗнч(ИнформационнаяБаза) <> Тип("СправочникСсылка.ИнформационныеБазы") Тогда Возврат; КонецЕсли;
	
	
	МассивОбработки = Новый Массив;
	МассивОбработки.Добавить(ИнформационнаяБаза);
	ОткрытьФорму("Обработка.АктивныеСоединения.Форма.Форма", Новый Структура("МассивОбработки", МассивОбработки),
	ЭтаФорма,,,,, РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ОткрытьУправлениеПользователями(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() > 1 Тогда
		ПоказатьПредупреждение(,"Операция не применима для множественного выбора!");
		Возврат;
	КонецЕсли;
	
	ИнформационнаяБаза = Элементы.Список.ТекущаяСтрока;
	Если ТипЗнч(ИнформационнаяБаза) <> Тип("СправочникСсылка.ИнформационныеБазы") Тогда Возврат; КонецЕсли;
	
	
	МассивОбработки = Новый Массив;
	МассивОбработки.Добавить(ИнформационнаяБаза);
	ОткрытьФорму("Обработка.УправлениеПользователямиВнешнихИнформационныхБаз.Форма.Форма", Новый Структура("МассивОбработки", МассивОбработки),
	ЭтаФорма,,,,, РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры



