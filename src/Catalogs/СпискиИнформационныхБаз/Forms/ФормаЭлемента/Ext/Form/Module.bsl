
&НаКлиенте
//
//
Процедура УправлениеДоступностьюЭлементов()
	Элементы.ЭлементыСпискаИнформационныхБаз.ТолькоПросмотр = Объект.Ссылка.Пустая();
	Если Элементы.ЭлементыСпискаИнформационныхБаз.ТолькоПросмотр Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле = "Наименование";		
		Сообщение.Текст = "Запишите элемент для изменения состава списка";		
	    Сообщение.Сообщить();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
//
//
Процедура СформироватьТекстСпискаБаз(Команда)
	ТекущаяСсылка = Объект.Ссылка;
	Если ТекущаяСсылка.Пустая() Тогда
		ОбщегоНазначенияСервер.ВывестиСообщение("Необходимо записать элемент справчника!");
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("ОбщаяФорма.ФормаПредпросмотраТекстовойИнформации", Новый Структура("ТекстРезультат", WebСервисWebCommonInfoBases.СформироватьТекстСпискаБаз(ТекущаяСсылка)), ЭтаФорма);
	//ФормаПредпросмотраТекстовойИнформации = ПолучитьФорму("ОбщаяФорма.ФормаПредпросмотраТекстовойИнформации");
	//ФормаПредпросмотраТекстовойИнформации.ТекстРезультат = WebСервисWebCommonInfoBases.СформироватьТекстСпискаБаз(Объект.Ссылка);
	//ФормаПредпросмотраТекстовойИнформации.Открыть();
КонецПроцедуры

&НаСервере
//
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЭлементОтбора = ЭлементыСпискаИнформационныхБаз.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец");
    ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
    ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;			
КонецПроцедуры

&НаКлиенте
//
//
Процедура ПослеЗаписи(ПараметрыЗаписи)
	УправлениеДоступностьюЭлементов();
КонецПроцедуры

&НаКлиенте
//
//
Процедура ПриОткрытии(Отказ)
	УправлениеДоступностьюЭлементов();
КонецПроцедуры

&НаСервере
//
//
Процедура ИмпортироватьСписокБазИзВнешнегоФайлаНаСервере(ДанныеФайла)
	
	ТаблицаДанных = ЗадачиНаСервере.РаспарситьСписокБаз(ДанныеФайла);
	ТаблицаДанных.Колонки.Добавить("ИнформационнаяБаза");
	
	ТаблицаЗагруженныхБаз = ЗадачиНаСервере.ПолучитьТаблицуИБСоСтрокойПодключения();
	
	ТаблицаОтложенногоРаспределенияПоИерархии = Новый ТаблицаЗначений;
	ТаблицаОтложенногоРаспределенияПоИерархии.Колонки.Добавить("Элемент", Новый ОписаниеТипов("СправочникСсылка.ЭлементыСписковИнформационныхБаз"));
	ТаблицаОтложенногоРаспределенияПоИерархии.Колонки.Добавить("РодительНаименование", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
	
	Для Каждого ТекущаяСтрока из ТаблицаДанных Цикл
		
		ТекущаяСтрока.ИнформационнаяБаза = ТаблицаЗагруженныхБаз.Найти(НРег(ТекущаяСтрока.Connect), "СтрокаПодключения");
		
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.ИнформационнаяБаза) Тогда
			ОбщегоНазначенияСервер.ВывестиСообщение("Не идентифицирована база по строке подключения: " + ТекущаяСтрока.Connect);
		Иначе
			НовыйЭлементСписковИнформационныхБаз = Справочники.ЭлементыСписковИнформационныхБаз.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(НовыйЭлементСписковИнформационныхБаз, ТекущаяСтрока);
			НовыйЭлементСписковИнформационныхБаз.Владелец = Объект.Ссылка;
			НовыйЭлементСписковИнформационныхБаз.Записать();
			
			Folder = ТекущаяСтрока.Folder;
			Folder = СокрЛП(?(Лев(Folder, 1) = "/", Прав(Folder, СтрДлина(Folder) - 1), Folder));
			Если ЗначениеЗаполнено(Folder) Тогда
				НовыйЭлементТаблицаОтложенногоРаспределенияПоИерархии = ТаблицаОтложенногоРаспределенияПоИерархии.Добавить();
				НовыйЭлементТаблицаОтложенногоРаспределенияПоИерархии.Элемент = НовыйЭлементСписковИнформационныхБаз.Ссылка;
				НовыйЭлементТаблицаОтложенногоРаспределенияПоИерархии.РодительНаименование = Folder;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТЗ.Элемент,
	|	ТЗ.РодительНаименование
	|ПОМЕСТИТЬ втТЗ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТЗ.Элемент,
	|	втТЗ.РодительНаименование,
	|	ЭлементыСписковИнформационныхБаз.Ссылка.Родитель КАК Родитель
	|ИЗ
	|	втТЗ КАК втТЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлементыСписковИнформационныхБаз КАК ЭлементыСписковИнформационныхБаз
	|		ПО втТЗ.РодительНаименование ПОДОБНО ЭлементыСписковИнформационныхБаз.Наименование";
	Запрос.Параметры.Вставить("ТЗ", ТаблицаОтложенногоРаспределенияПоИерархии);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
			ЭлементОбъект = Выборка.Элемент.ПолучитьОбъект();
			ЭлементОбъект.Родитель = Выборка.Родитель;
			ЭлементОбъект.Записать();
		Иначе
			ОбщегоНазначенияСервер.ВывестиСообщение("Не идентифицирован родитель иерархии [" + Выборка.РодительНаименование + "] для элемента: " + Выборка.Элемент);
		КонецЕсли;
	КонецЦикла;
	
	ЭтаФорма.Прочитать();
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ИмпортироватьСписокБазИзВнешнегоФайла(Команда)
	
	ОчиститьСписок(Команда);
	ИмпортироватьСписокБазИзВнешнегоФайлаОписаниеОповещения();
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ИмпортироватьСписокБазИзВнешнегоФайлаОписаниеОповещения() Экспорт	
	
	ПолноеИмяФайла = ОбщегоНазначенияКлиент.ПолучитьПутьКФайлуСпискаИнформационныхБаз();
	Если ПолноеИмяФайла <> Неопределено Тогда
		
		ФайлСпискаБаз = Новый Файл(ПолноеИмяФайла);
		Если НЕ ФайлСпискаБаз.Существует() Тогда
			ПоказатьПредупреждение(, "Файл <" + ПолноеИмяФайла + "> не найден!");
			Возврат;
		КонецЕсли;
		ФайлСпискаБаз = Неопределено;
		
		Текст = Новый ЧтениеТекста(ПолноеИмяФайла, КодировкаТекста.UTF8);	
		ИмпортироватьСписокБазИзВнешнегоФайлаНаСервере(Текст.Прочитать());
		Текст.Закрыть();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
//
//
Процедура ОчиститьСодержимоеСпискаБаз()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлементыСписковИнформационныхБаз.Ссылка
		|ИЗ
		|	Справочник.ЭлементыСписковИнформационныхБаз КАК ЭлементыСписковИнформационныхБаз
		|ГДЕ
		|	ЭлементыСписковИнформационныхБаз.Владелец = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекущийОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ТекущийОбъект.Удалить();
	КонецЦикла;
	
	ЭтаФорма.Прочитать();
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ОчиститьСписокОписаниеОповещения(РезультатОповещения, ПараметрыОповещения) Экспорт
	
	// Запрос на очистку содержимого списка
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		ОчиститьСодержимоеСпискаБаз();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ОчиститьСписок(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьСписокОписаниеОповещения", ЭтаФорма), "Очистить список?", РежимДиалогаВопрос.ДаНет,,, "Импорт списка баз");	
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ЭлементыСпискаИнформационныхБазПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика.
КонецПроцедуры
