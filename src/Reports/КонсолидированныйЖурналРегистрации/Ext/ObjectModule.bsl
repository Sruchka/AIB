
//
//
Функция СформироватьВнешниеНаборыДанных(ПерезаполнятьТаблицуДанных = Ложь) Экспорт
	
	Если ПерезаполнятьТаблицуДанных Тогда 		
		
		ЭтотОбъект.ТаблицаДанных.Очистить();
		
		ОсновнойНаборДанных = СхемаКомпоновкиДанных.НаборыДанных.ВнешниеДанные;
		
		ПереченьПолейОтчета = "";
		ВременнаяТаблицаЖурнала = Новый ТаблицаЗначений;		
		Для Каждого Поле Из ОсновнойНаборДанных.Поля Цикл 			
			Если СокрЛП(Поле.Поле) <> "ИнформационнаяБаза" Тогда			
				ПереченьПолейОтчета = ПереченьПолейОтчета + ?(ЗначениеЗаполнено(ПереченьПолейОтчета), ", ", "") + Поле.Поле;
			КонецЕсли;
		КонецЦикла;	
				
		
		База = Неопределено;
		Для Каждого ТекущаяСтрокаТаблицаОбработки Из ЭтотОбъект.ТаблицаОбработки Цикл		
			
			ПараметрыОбработки = ЗадачиНаСервере.ПолучитьСтруктуруПараметровОбработки(ТекущаяСтрокаТаблицаОбработки.ИнформационнаяБаза);			
			
			Попытка
				ИнформационнаяБаза_ОбъектПодключения = ЗадачиНаСервере.СоздатьОбъектПодключения(ПараметрыОбработки);			
				Если ИнформационнаяБаза_ОбъектПодключения = Неопределено Тогда
					ОбщегоНазначенияСервер.ВывестиСообщение("Ошибка подключения к информационно базе <" + ТекущаяСтрокаТаблицаОбработки.ИнформационнаяБаза + ">");
					Продолжить;				
				КонецЕсли;
				
				// Создаем структуру "Фильтр", к которой применим ранее заданные переменные для условий выборки из лога:
				Фильтр = ИнформационнаяБаза_ОбъектПодключения.NewObject("Структура");
				Фильтр.Вставить("ДатаНачала", ЭтотОбъект.НачалоПериода);
				Фильтр.Вставить("ДатаОкончания", ЭтотОбъект.КонецПериода);								
				
				// Генерируем массив изменений по документам: Изменение, Удаление, Изменение периода в регистрах, Проведение, Отмена проведения
				МассивСобытий = ИнформационнаяБаза_ОбъектПодключения.NewObject("Массив");		
				Для Каждого ТекущаяСтрокаСобытияЖурнала Из ЭтотОбъект.СобытияЖурнала Цикл
					Если ТекущаяСтрокаСобытияЖурнала.Обрабатывать Тогда
						МассивСобытий.Добавить(ТекущаяСтрокаСобытияЖурнала.Событие);
					КонецЕсли;
				КонецЦикла;						
				Если МассивСобытий.Количество() > 0 Тогда
					Фильтр.Вставить("Событие", МассивСобытий);
				КонецЕсли;
				
				ВременнаяТаблицаЖурнала = ИнформационнаяБаза_ОбъектПодключения.NewObject("ТаблицаЗначений");
				Для Каждого Поле Из ОсновнойНаборДанных.Поля Цикл
					Если СокрЛП(Поле.Поле) <> "ИнформационнаяБаза" Тогда 
						ВременнаяТаблицаЖурнала.Колонки.Добавить(Поле.Поле);
					КонецЕсли;
				КонецЦикла;
				
				ИнформационнаяБаза_ОбъектПодключенияСтатусТранзакцииЗаписиЖурналаРегистрации = ИнформационнаяБаза_ОбъектПодключения.СтатусТранзакцииЗаписиЖурналаРегистрации;
				ОтображениеСтатусаТранзакции = Новый Соответствие;
				ОтображениеСтатусаТранзакции.Вставить(СокрЛП(СтатусТранзакцииЗаписиЖурналаРегистрации.Зафиксирована), ИнформационнаяБаза_ОбъектПодключенияСтатусТранзакцииЗаписиЖурналаРегистрации.Зафиксирована);
				ОтображениеСтатусаТранзакции.Вставить(СокрЛП(СтатусТранзакцииЗаписиЖурналаРегистрации.НеЗавершена), ИнформационнаяБаза_ОбъектПодключенияСтатусТранзакцииЗаписиЖурналаРегистрации.НеЗавершена);
				ОтображениеСтатусаТранзакции.Вставить(СокрЛП(СтатусТранзакцииЗаписиЖурналаРегистрации.НетТранзакции), ИнформационнаяБаза_ОбъектПодключенияСтатусТранзакцииЗаписиЖурналаРегистрации.НетТранзакции);
				ОтображениеСтатусаТранзакции.Вставить(СокрЛП(СтатусТранзакцииЗаписиЖурналаРегистрации.Отменена), ИнформационнаяБаза_ОбъектПодключенияСтатусТранзакцииЗаписиЖурналаРегистрации.Отменена);
				ИнформационнаяБаза_ОбъектПодключенияСтатусТранзакцииЗаписиЖурналаРегистрации = Неопределено;
				
				ИнформационнаяБаза_ОбъектПодключенияУровеньЖурналаРегистрации = ИнформационнаяБаза_ОбъектПодключения.УровеньЖурналаРегистрации;
				ОтображениеУровняЖурналаРегистрации = Новый Соответствие;
				ОтображениеУровняЖурналаРегистрации.Вставить(СокрЛП(УровеньЖурналаРегистрации.Информация),ИнформационнаяБаза_ОбъектПодключенияУровеньЖурналаРегистрации.Информация);
				ОтображениеУровняЖурналаРегистрации.Вставить(СокрЛП(УровеньЖурналаРегистрации.Ошибка), ИнформационнаяБаза_ОбъектПодключенияУровеньЖурналаРегистрации.Ошибка);
				ОтображениеУровняЖурналаРегистрации.Вставить(СокрЛП(УровеньЖурналаРегистрации.Предупреждение), ИнформационнаяБаза_ОбъектПодключенияУровеньЖурналаРегистрации.Предупреждение);
				ОтображениеУровняЖурналаРегистрации.Вставить(СокрЛП(УровеньЖурналаРегистрации.Примечание), ИнформационнаяБаза_ОбъектПодключенияУровеньЖурналаРегистрации.Примечание);
				ИнформационнаяБаза_ОбъектПодключенияУровеньЖурналаРегистрации = "";
				
				ИнформационнаяБаза_ОбъектПодключения.ВыгрузитьЖурналРегистрации(ВременнаяТаблицаЖурнала, Фильтр, ПереченьПолейОтчета);
				
				ИнформационнаяБаза_ОбъектПодключенияПользователиИнформационнойБазы = ИнформационнаяБаза_ОбъектПодключения.ПользователиИнформационнойБазы;
				КэшПользователиИнформационнойБазы = Новый Соответствие;
				
				ЭтотОбъектТаблицаДанных = ЭтотОбъект.ТаблицаДанных;
				Для Каждого ТекущаяСтрокаВременнаяТаблицаЖурнала Из ВременнаяТаблицаЖурнала Цикл
					НоваяСтрокаВнешниеНаборыДанных = ЭтотОбъектТаблицаДанных.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаВнешниеНаборыДанных, ТекущаяСтрокаТаблицаОбработки);
					ЗаполнитьЗначенияСвойств(НоваяСтрокаВнешниеНаборыДанных, ТекущаяСтрокаВременнаяТаблицаЖурнала);
					Попытка
						Пользователь = КэшПользователиИнформационнойБазы.Получить(ТекущаяСтрокаВременнаяТаблицаЖурнала.Пользователь);
						Если Пользователь = Неопределено Тогда 
							Пользователь = СокрЛП(ИнформационнаяБаза_ОбъектПодключения.ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ТекущаяСтрокаВременнаяТаблицаЖурнала.Пользователь).Имя);		
							КэшПользователиИнформационнойБазы.Вставить(ТекущаяСтрокаВременнаяТаблицаЖурнала.Пользователь, Пользователь);
						КонецЕсли;
						НоваяСтрокаВнешниеНаборыДанных.Пользователь = Пользователь;
					Исключение
					КонецПопытки;
					Попытка						
						НоваяСтрокаВнешниеНаборыДанных.СтатусТранзакции = ОтображениеСтатусаТранзакции.Получить(ТекущаяСтрокаВременнаяТаблицаЖурнала.СтатусТранзакции);
					Исключение
						НоваяСтрокаВнешниеНаборыДанных.СтатусТранзакции = "";
					КонецПопытки;
					Попытка
						НоваяСтрокаВнешниеНаборыДанных.Уровень = ОтображениеУровняЖурналаРегистрации.Получить(ТекущаяСтрокаВременнаяТаблицаЖурнала.Уровень);
					Исключение
						НоваяСтрокаВнешниеНаборыДанных.Уровень = "";
					КонецПопытки;
				КонецЦикла;
				
				ВременнаяТаблицаЖурнала.Очистить();
				Фильтр.Очистить();
				МассивСобытий.Очистить();
				
				ВременнаяТаблицаЖурнала = Неопределено;
				Фильтр = Неопределено;
				МассивСобытий = Неопределено;
				ИнформационнаяБаза_ОбъектПодключения = Неопределено;
				
			Исключение
				ОбщегоНазначенияСервер.ВывестиСообщение("Ошибка при обработке данных по информационной базе <" + ТекущаяСтрокаТаблицаОбработки.ИнформационнаяБаза +">: " + ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЭтотОбъект.ТаблицаДанных.Выгрузить();	
КонецФункции

//
//
Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ПерезаполнятьТаблицуДанных = Ложь) Экспорт
			
	ВнешниеНаборыДанных = Новый Структура;
    ВнешниеНаборыДанных.Вставить("ВнешниеДанные",СформироватьВнешниеНаборыДанных(ПерезаполнятьТаблицуДанных));	
	
	
	//Получаем схему из макета
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	//Из схемы возьмем настройки по умолчанию
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	
	//Помещаем в переменную данные о расшифровке данных
	ДанныеРасшифровкиСервер = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастрокаПоУмолчанию, ДанныеРасшифровкиСервер);
	
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровкиСервер);
	
	//Очищаем поле табличного документа	
	Результат.Очистить();
	
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);	
		
КонецФункции


ПостроительЗапроса = Новый ПостроительЗапроса;
ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ПолучитьМакет("ПереченьСобытийЖурнала").Область("Данные"));
ПостроительЗапроса.Выполнить();
ТаблицаСобытияЖурнала = ПостроительЗапроса.Результат.Выгрузить();
ТаблицаСобытияЖурнала.Колонки.Добавить("Обрабатывать");
ТаблицаСобытияЖурнала.ЗаполнитьЗначения(Истина, "Обрабатывать");
ЭтотОбъект.СобытияЖурнала.Загрузить(ТаблицаСобытияЖурнала);
ТаблицаСобытияЖурнала = Неопределено;
ПостроительЗапроса = Неопределено;
