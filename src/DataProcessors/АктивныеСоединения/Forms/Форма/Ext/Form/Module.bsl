
&НаСервере
//
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивОбработки = ЭтаФорма.Параметры.Свойство("МассивОбработки");
	Если МассивОбработки <> Ложь Тогда
		Для Каждого ЭлементМассиваМассивОбработки Из ЭтаФорма.Параметры.МассивОбработки Цикл 
			НоваяСтрокаТаблицаОбработки = Объект.ТаблицаОбработки.Добавить();
			НоваяСтрокаТаблицаОбработки.ИнформационнаяБаза = ЭлементМассиваМассивОбработки;
		КонецЦикла;
	КонецЕсли;    
	
	Объект.ВыполнятьВФоне = ОбщегоНазначенияСервер.ДопустимоИспользованиеФайловыхЗаданий();
	
КонецПроцедуры

&НаСервере
//
//
Процедура ОбновитьАктивныеСеансыНаСервере()
	

	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.ЗаполнитьТаблицуАктивныхСоединений();
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ОбновитьАктивныеСеансы(Команда)
	
	Если Объект.ТаблицаОбработки.Количество() = 0 Тогда
		ОбщегоНазначенияСервер.ВывестиСообщение("Не указана информационная база!");
		Возврат;
	КонецЕсли;
	
	Если Объект.ВыполнятьВФоне Тогда
		
		Результат = ФоновыеПроцессыМенеджерСервер.ПроверкаАктивностиФоновогоЗаданияСервер(Объект.КлючФоновогоЗадания);
		
		ЗаданиеАктиво = Ложь;		
		Для Каждого ТекущееЗначениеРезультат Из Результат Цикл
			ЗаданиеАктиво = ЗаданиеАктиво ИЛИ ТекущееЗначениеРезультат.Активно;
		КонецЦикла;
		
		Если ЗаданиеАктиво Тогда
			ПоказатьПредупреждение(, "Процесс уже запущен");
		Иначе			
			ЗапуститьФоновоеЗаданиеОбновленияТаблицы();
			ПодключитьОбработчикОжидания("ПроверкаАктивностиФоновогоЗаданияКлиент", 0.1, Истина);			
		КонецЕсли;		
	Иначе        		
		ОбновитьАктивныеСеансыНаСервере();   		
	КонецЕсли;	
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаАктивныеСоединения;
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ПроверкаАктивностиФоновогоЗаданияКлиент() Экспорт
	КомандаДляВыполненияНаКлиенте = Неопределено;
	Активность = ПроверкаАктивностиФоновогоЗаданияСервер(КомандаДляВыполненияНаКлиенте);
	ФоновыеПроцессыКлиент.ВыполнитьКоманду(КомандаДляВыполненияНаКлиенте, ЭтаФорма, Объект);	
	Если Активность Тогда
		ПодключитьОбработчикОжидания("ПроверкаАктивностиФоновогоЗаданияКлиент", 2, Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
//
//
Функция ПроверкаАктивностиФоновогоЗаданияСервер(КомандаДляВыполненияНаКлиенте = Неопределено) Экспорт
	Возврат ФоновыеПроцессыСервер.ПроверкаАктивностиФоновогоЗадания(ЭтаФорма, Объект, КомандаДляВыполненияНаКлиенте);
КонецФункции

&НаСервере
//
//
Процедура ЗапуститьФоновоеЗаданиеОбновленияТаблицы()	
	Элементы.ИндикаторПроцесса.МинимальноеЗначение = 0;	
	Элементы.ИндикаторПроцесса.МаксимальноеЗначение = Объект.ТаблицаОбработки.Количество();
	Объект.ИндикаторПроцесса = 0;	
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ПараметрыФоновогоПроцесса = Новый Массив;
	ПараметрыФоновогоПроцесса.Добавить(ПолучитьСтруктуруПараметровТекущейОбработки());
	Объект.КлючФоновогоЗадания = Новый УникальныйИдентификатор;
		
	ФоновыеЗадания.Выполнить("ФоновыеПроцессыСервер.ФоновыйПроцессПолучитьТаблицуАктивныхСоединений", ПараметрыФоновогоПроцесса, Объект.КлючФоновогоЗадания, ТекущийОбъект.мИмяСобытияВЖурналеРегистрации);
КонецПроцедуры

&НаСервере
//
//
Функция ПолучитьСтруктуруПараметровТекущейОбработки(ИнформационнаяБаза = Неопределено)
	Объект.АдресВременногоХранилищаДляВнутреннегоОбмена = ПоместитьВоВременноеХранилище("");
	ПараметрыОбработки = Новый Структура;	
	локТаблицаОбработки = Объект.ТаблицаОбработки.Выгрузить();
	Если ИнформационнаяБаза <> Неопределено Тогда
		локТаблицаОбработки.Очистить();
		НоваяСтрока = локТаблицаОбработки.Добавить();
		НоваяСтрока.ИнформационнаяБаза = ИнформационнаяБаза;
	КонецЕсли;	
	ПараметрыОбработки.Вставить("ТаблицаОбработки", локТаблицаОбработки);	
	ПараметрыОбработки.Вставить("ВыполнятьВФоне", Объект.ВыполнятьВФоне);	
	ПараметрыОбработки.Вставить("КлючФоновогоЗадания", Объект.КлючФоновогоЗадания);		
	ПараметрыОбработки.Вставить("АдресВременногоХранилищаДляВнутреннегоОбмена", Объект.АдресВременногоХранилищаДляВнутреннегоОбмена);	
	//ПараметрыОбработки.Вставить("Обработчики", Объект.Обработчики.Выгрузить());	
	Возврат ПараметрыОбработки;
КонецФункции

&НаКлиенте
//
//
Процедура ВыполнитьКоманду(Команда)
	Если ЗначениеЗаполнено(Команда) Тогда
		Если ФоновыеПроцессыМенеджерСервер.ОпределитьВыполнитьКомандуНаСервере(Команда) Тогда
			ВыполнитьКомандуСервер(Команда);
		Иначе 
			Попытка				
				Выполнить(Команда);
			Исключение
				ОбщегоНазначенияСервер.ВывестиСообщение(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
//
//
Процедура ВыполнитьКомандуСервер(Команда)
	Попытка				
		Выполнить(СтрЗаменить(Команда, ФоновыеПроцессыМенеджерСервер.ПрефиксИсполненияКомандыНаСервере(), ""));
	Исключение
		ОбщегоНазначенияСервер.ВывестиСообщение(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры


&НаКлиенте
//
//
Процедура УправлениеЭлементамиФормы() Экспорт 			
	
	// фоновые процессы
	Элементы.ИндикаторПроцесса.Заголовок = "Индикатор процесса";
	Элементы.ИндикаторПроцесса.Видимость = ЗначениеЗаполнено(Объект.КлючФоновогоЗадания);
	ЭтаФорма.Доступность = НЕ ЗначениеЗаполнено(Объект.КлючФоновогоЗадания);	
	
КонецПроцедуры


&НаКлиенте
//
//
Процедура ПриОткрытии(Отказ)
	
	УправлениеЭлементамиФормы();
	
	Если Объект.ТаблицаОбработки.Количество() = 0 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаТаблицаОбработки;
	Иначе
		Элементы.ГруппаТаблицаОбработки.Доступность = Ложь;
		Для Каждого ТекущаяСтрокаТаблицаОбработки Из Объект.ТаблицаОбработки Цикл
			ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " [" + ТекущаяСтрокаТаблицаОбработки.ИнформационнаяБаза + "]";
		КонецЦикла;
		ОбновитьАктивныеСеансы(Неопределено);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
//
//
Процедура ВыполнитьЗапускОтключенияСеансовСервер(ОтключитьТолькоВыделенные = Ложь)
	
	лАктивныеСоединения = Объект.АктивныеСоединения.Выгрузить();
	
	Если ОтключитьТолькоВыделенные Тогда
		лАктивныеСоединения.Очистить();
		
		Для Каждого ТекущаяВыделеннаяСтрока Из Элементы.АктивныеСоединения.ВыделенныеСтроки Цикл
			НоваяСтрокалАктивныеСоединения = лАктивныеСоединения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокалАктивныеСоединения, Объект.АктивныеСоединения[ТекущаяВыделеннаяСтрока]);
		КонецЦикла;
		
	КонецЕсли;
	
	лТаблицаОбработки = лАктивныеСоединения.Скопировать();
	лТаблицаОбработки.Свернуть("ИнформационнаяБаза");
	
	Для Каждого ТекущаяСтрокалТаблицаОбработки Из лТаблицаОбработки Цикл
		
		ПараметрыОбработки = ЗадачиНаСервере.ПолучитьСтруктуруПараметровОбработки(ТекущаяСтрокалТаблицаОбработки.ИнформационнаяБаза);
		ПараметрыОбработки.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.ОтключитьСеансы");
		ПараметрыОбработки.ОтключатьСеансы = Истина;
		ПараметрыОбработки.ТаблицаОтключаемыхСеансов = лАктивныеСоединения.Скопировать();
		ПараметрыОбработки.ТаблицаОтключаемыхСеансов.Очистить();
		
		МассивСтроклАктивныеСоединения = лАктивныеСоединения.НайтиСтроки(Новый Структура("ИнформационнаяБаза", ТекущаяСтрокалТаблицаОбработки.ИнформационнаяБаза));
		
		Для Каждого ТекущийЭлементМассивСтрок Из МассивСтроклАктивныеСоединения Цикл
			
			НоваяСтрокалТаблицаОтключаемыхСеансов = ПараметрыОбработки.ТаблицаОтключаемыхСеансов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокалТаблицаОтключаемыхСеансов, ТекущийЭлементМассивСтрок);
			
		КонецЦикла;  		
		
		ЗадачиНаСервере.ВыполнитьОтключениеСеансов(ПараметрыОбработки, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ВыполнитьЗапускОтключенияСеансов(ОтключитьТолькоВыделенные = Ложь)
	ВыполнитьЗапускОтключенияСеансовСервер(ОтключитьТолькоВыделенные);
	ОбновитьАктивныеСеансы(Неопределено);
КонецПроцедуры


&НаКлиенте
//
//
Процедура ОтключитьВыбранныеСеансы(Команда)
	ВыполнитьЗапускОтключенияСеансов(Истина);
КонецПроцедуры


&НаКлиенте
//
//
Процедура ОтключитьВсеСеансы(Команда)
	ВыполнитьЗапускОтключенияСеансов();
КонецПроцедуры

&НаКлиенте
//
//
Процедура Подбор(Команда)	
	
	ОткрытьФорму("Справочник.ИнформационныеБазы.ФормаВыбора", Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор", Ложь, Истина), ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
//
//
Процедура ДобавитьЗначениеВТаблицу(Таблица, ВыбранноеЗначение)
	Если Таблица.НайтиСтроки(Новый Структура("ИнформационнаяБаза", ВыбранноеЗначение)).Количество() = 0 Тогда
		НоваяСтрокаТаблицаОбработки = Таблица.Добавить();
		НоваяСтрокаТаблицаОбработки.ИнформационнаяБаза = ВыбранноеЗначение;
		УправлениеЭлементамиФормы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
//
//
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	ВыбранноеЗначениеТип = ТипЗнч(ВыбранноеЗначение);
	Если ВыбранноеЗначениеТип = Тип("Массив") Тогда
		Для Каждого ТекущееЗначениеМассива ИЗ ВыбранноеЗначение Цикл
			ОбработкаВыбора(ТекущееЗначениеМассива, ИсточникВыбора);
		КонецЦикла;
	ИначеЕсли ВыбранноеЗначениеТип = Тип("СправочникСсылка.ИнформационныеБазы") Тогда
		ДобавитьЗначениеВТаблицу(Объект.ТаблицаОбработки, ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

