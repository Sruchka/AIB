
&НаКлиенте
//
//
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	ПолноеИмяФайла = ОбщегоНазначенияКлиент.ПолучитьПутьКФайлуСпискаИнформационныхБаз();
	Если ПолноеИмяФайла <> Неопределено Тогда
		Объект.ПутьКФайлу = ПолноеИмяФайла;
	КонецЕсли;
	
	УправлениеДоступностьюКнопок();
КонецПроцедуры

&НаСервере
//
//
Процедура ИсключитьЗагруженныеИБ()
	
	ТаблицаЗагруженныхБаз = ЗадачиНаСервере.ПолучитьТаблицуИБСоСтрокойПодключения();
	
	Для Каждого ТекущаяСтрока из Объект.ИдентифицированныеДанные Цикл
		ТекущаяСтрока.Импортировать = (ТаблицаЗагруженныхБаз.Найти(НРег(ТекущаяСтрока.СтрокаПодключения), "СтрокаПодключения") = Неопределено);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура РаспарситьСписокБаз(Команда)
	
	ФайлСпискаБаз = Новый Файл(Объект.ПутьКФайлу);
	Если НЕ ФайлСпискаБаз.Существует() Тогда
		ПоказатьПредупреждение(, "Файл <" + Объект.ПутьКФайлу + "> не найден!");
		Возврат;
	КонецЕсли;
	ФайлСпискаБаз = Неопределено;
			
	Текст = Новый ЧтениеТекста(Объект.ПутьКФайлу, КодировкаТекста.UTF8);	
	РаспарситьСписокБазНаСервере(Текст.Прочитать());	
	Текст.Закрыть();		
	
	УправлениеДоступностьюКнопок();
	
КонецПроцедуры

&НаСервере
//
//
Процедура РаспарситьСписокБазНаСервере(ДанныеФайла)
	
	ТаблицаДанных = ЗадачиНаСервере.РаспарситьСписокБаз(ДанныеФайла);
	
	Для Каждого ТекущаяСтрокаТаблицаДанных Из ТаблицаДанных Цикл
		Если ЗначениеЗаполнено(ТекущаяСтрокаТаблицаДанных.Connect) Тогда
			НоваяСтрока = Объект.ИдентифицированныеДанные.Добавить();
			НоваяСтрока.Импортировать = Истина;
			НоваяСтрока.Наименование = ТекущаяСтрокаТаблицаДанных.Наименование;
			НоваяСтрока.СтрокаПодключения = ТекущаяСтрокаТаблицаДанных.Connect;
			
			лРелизыТехнологическойПлатформы = Справочники.РелизыТехнологическойПлатформы.НайтиПоНаименованию(ТекущаяСтрокаТаблицаДанных.Version);
			Если лРелизыТехнологическойПлатформы = Справочники.РелизыТехнологическойПлатформы.ПустаяСсылка() Тогда
				НоваяСтрока.РелизТехнологическойПлатформы = ТекущаяСтрокаТаблицаДанных.Version;
			Иначе
				НоваяСтрока.РелизТехнологическойПлатформы = лРелизыТехнологическойПлатформы;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ИсключитьЗагруженныеИБ();	
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ИмпортироватьДанные(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ИмпортироватьДанныеОписаниеОповещенияВопросНаПродолжение", ЭтаФорма), "Будет выполнена процедура импорта данных в справочник <Информационные базы>, а так же выполнена попытка подключения для идентификации релиза конфигурации." + Символы.ПС + "Операция может занять продолжительное время. Продолжить?", РежимДиалогаВопрос.ДаНет);	
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ИмпортироватьДанныеОписаниеОповещенияВопросНаПродолжение(РезультатОповещения, ПараметрыОповещения) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Нет Тогда Возврат; КонецЕсли;
	
	ИмпортироватьДанныеПроверка();
	ИмпортироватьДанныеСервер();
	
КонецПроцедуры


&НаСервере
//
//
Процедура ИмпортироватьДанныеПроверка()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Пользователь) Тогда
		//ОбщегоНазначенияСервер.ВывестиСообщение("Не задана учетная запись для подключения к базам!",,, "Пользователь", ТекущийОбъект);		
	КонецЕсли;
	
	НомерСтроки = 0;
	Для Каждого ТекущаяСтрока Из ТекущийОбъект.ИдентифицированныеДанные Цикл		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
КонецПроцедуры


&НаСервере
//
//
Процедура ИмпортироватьДанныеСервер()
	
	ИнформацияПоТекущемуРелизуПлатформы = Справочники.РелизыТехнологическойПлатформы.ПолучитьИнформациюПоТекущемуРелизуПлатформы(Истина);
	
	Для Каждого ТекущаяСтрока Из Объект.ИдентифицированныеДанные Цикл
		
		Если ТекущаяСтрока.Импортировать Тогда
			
			НачатьТранзакцию();
			Попытка
				НоваяИБ = Справочники.ИнформационныеБазы.СоздатьЭлемент();
				НоваяИБ.Наименование = СокрЛП(ТекущаяСтрока.Наименование);			
				НоваяИБ.Пользователь = Объект.Пользователь;
				НоваяИБ.СтатусПоддержки = Перечисления.СтатусыПоддержки.ТиповаяНеРедактируется;
				НоваяИБ.АвтоматическиПерезаписыватьАрхив = Истина;
				НоваяИБ.ТипОбновления = Перечисления.ТипыОбновлений.Только_cfu;
				НоваяИБ.СтатусИнформационнойБазы = Перечисления.СтатусыИнформационныхБаз.Рабочая;
				
				Если Найти(НРег(ТекущаяСтрока.СтрокаПодключения), "file=""") > 0 Тогда
					НоваяИБ.ТипИБ = Перечисления.ТипыИБ.Файловая;
					НоваяИБ.ИмяКаталогИБ = СтрЗаменить(СтрЗаменить(НРег(ТекущаяСтрока.СтрокаПодключения), "file=""", ""), """;", "");
				Иначе			
					
					ПараметрыПодключения = ЗадачиНаСервере.ПолучитьПараметрыИзСтрокиПодключенияКСерверу(ТекущаяСтрока.СтрокаПодключения);
					Сервер = Справочники.Сервера.НайтиПоНаименованию(ПараметрыПодключения.ИмяСервера, Истина);
					Если Сервер = Справочники.Сервера.ПустаяСсылка() Тогда
						Сервер = Справочники.Сервера.СоздатьЭлемент();
						Сервер.Наименование = ПараметрыПодключения.ИмяСервера;
						Если ЗначениеЗаполнено(ПараметрыПодключения.ПортКластера) Тогда
							Сервер.ПортКластера = ПараметрыПодключения.ПортКластера;
							Сервер.ПортСервера = Лев(ПараметрыПодключения.ПортКластера, СтрДлина(ПараметрыПодключения.ПортКластера) - 1) + Строка(Число(Прав(ПараметрыПодключения.ПортКластера, 1)) - 1);
						Иначе
							Сервер.ПортКластера = 1541;
							Сервер.ПортСервера = 1540;
						КонецЕсли;						
						Сервер.ТипСервера = Перечисления.ТипыСерверов.Сервер1С;
						Сервер.Записать();
					КонецЕсли;
					
					НоваяИБ.ТипИБ = Перечисления.ТипыИБ.Серверная;
					НоваяИБ.ИмяКаталогИБ = ПараметрыПодключения.ИмяБазы;
					НоваяИБ.СерверИБ = Сервер.Ссылка;				
					
				КонецЕсли;
				
				Если ТипЗнч(ТекущаяСтрока.РелизТехнологическойПлатформы) = Тип("Строка") Тогда
					лРелизыТехнологическойПлатформы = Справочники.РелизыТехнологическойПлатформы.НайтиПоНаименованию(ТекущаяСтрока.РелизТехнологическойПлатформы);
				ИначеЕсли ТипЗнч(ТекущаяСтрока.РелизТехнологическойПлатформы) = Тип("СправочникСсылка.РелизыТехнологическойПлатформы") Тогда
					лРелизыТехнологическойПлатформы = ТекущаяСтрока.РелизТехнологическойПлатформы;
				Иначе
					лРелизыТехнологическойПлатформы = ИнформацияПоТекущемуРелизуПлатформы.ТекущийРелизПлатформы;
				КонецЕсли;
					
				Если лРелизыТехнологическойПлатформы = Справочники.РелизыТехнологическойПлатформы.ПустаяСсылка() Тогда
					
					лРелизыТехнологическойПлатформы = Справочники.РелизыТехнологическойПлатформы.СоздатьЭлемент();
					лРелизыТехнологическойПлатформы.Наименование = ТекущаяСтрока.РелизТехнологическойПлатформы;
					лРелизыТехнологическойПлатформы.ТипCOMСоединителя = Справочники.РелизыТехнологическойПлатформы.ОпределитьТипCOMСоединителяПоНомеруПлатформы(лРелизыТехнологическойПлатформы.Наименование);
					лРелизыТехнологическойПлатформы.Каталог = СтрЗаменить(ИнформацияПоТекущемуРелизуПлатформы.КаталогРелизаПлатформы, ИнформацияПоТекущемуРелизуПлатформы.НомерРелизаПлатформы, лРелизыТехнологическойПлатформы.Наименование);
					лРелизыТехнологическойПлатформы.Записать();
					
					НоваяИБ.РелизТехнологическойПлатформы = лРелизыТехнологическойПлатформы.Ссылка;
					
				Иначе
					
					НоваяИБ.РелизТехнологическойПлатформы = лРелизыТехнологическойПлатформы;
					
				КонецЕсли;

				НоваяИБ.Записать();			
				
				ПараметрыОбработки = ЗадачиНаСервере.ПолучитьСтруктуруПараметровОбработки(НоваяИБ.Ссылка);
				ЗадачиНаСервере.ВыполнитьОбновлениеИнформацииПоБазе(ПараметрыОбработки, Истина);
				
				ЗафиксироватьТранзакцию();
				
				ТекущаяСтрока.Импортировать = Ложь;
			Исключение
				ОтменитьТранзакцию();
				Сообщить(ОписаниеОшибки());
			КонецПопытки;		
		КонецЕсли;		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
//
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Описание = "Мастер импорта данных ИБ из файла *.v8i (стандартный список баз)."
	+ Символы.ПС + Символы.ПС + "1. Сопоставление с уже имеющимися ИБ будет выполнено по строке подключения." + Символы.ПС + "Например: File=""C:\1CBases\BaseName""; Srvr=""ServerName"";Ref=""BaseName"";" + Символы.ПС + "ИБ с найденным соответствием по строке подключения по умолчанию не маркируются к импорту для избежания дублирования записей, но могут быть загружены принудительно."
	+ Символы.ПС + Символы.ПС + "2. Сопоставление с уже имеющимися серверами будет выполнено по наименованию(поиск точного соответствия)." + Символы.ПС + "Если сервер не найден в справочнике, то он будет создан с параметрами по умолчанию."
	+ Символы.ПС + Символы.ПС + "3. Процедура импорта устанавливает значения параметров ИБ по умолчанию, поэтому после окончания может потребоваться ручная корректировка.";
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНачало;	
КонецПроцедуры

&НаКлиенте
//
//
Процедура Далее(Команда)
	ИмяТекущейСтраницы = СокрЛП(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя);
	Если ИмяТекущейСтраницы = "ГруппаНачало" Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаИмпорт;
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаИмпорт" Тогда
		РаспарситьСписокБаз(Команда);
	КонецЕсли;
	УправлениеДоступностьюКнопок();
КонецПроцедуры

&НаКлиенте
//
//
Процедура Назад(Команда)
	ИмяТекущейСтраницы = СокрЛП(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя);
	Если ИмяТекущейСтраницы = "ГруппаНачало" Тогда
		//	
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаИмпорт" Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНачало;
	КонецЕсли;	
	УправлениеДоступностьюКнопок();
КонецПроцедуры

&НаКлиенте
//
//
Процедура УправлениеДоступностьюКнопок()
	Элементы.Далее.Доступность = Истина;
	Элементы.Назад.Доступность = Истина;
	Элементы.ИдентифицированныеДанныеИмпортироватьДанные.Доступность = Истина;
	Элементы.РаспарситьСписокБаз.Доступность = Истина;
	
	ИмяТекущейСтраницы = СокрЛП(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя);
	Если ИмяТекущейСтраницы = "ГруппаНачало" Тогда
		Элементы.Назад.Доступность = Ложь;
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаИмпорт" Тогда
		Элементы.Далее.Доступность = Ложь;
		Если НЕ ЗначениеЗаполнено(Объект.ПутьКФайлу) Тогда			
			Элементы.РаспарситьСписокБаз.Доступность = Ложь;
		КонецЕсли;
		Если Объект.ИдентифицированныеДанные.Количество() = 0 Тогда
			Элементы.ИдентифицированныеДанныеИмпортироватьДанные.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
//
//
Процедура ПользовательПриИзменении(Элемент)
	УправлениеДоступностьюКнопок();
КонецПроцедуры

&НаКлиенте
//
//
Процедура ПометитьВсе(Команда)
	УстановитьПометку(Истина);
КонецПроцедуры

&НаКлиенте
//
//
Процедура УстановитьПометку(Пометка)
	Для Каждого ТекущаяСтрока Из Объект.ИдентифицированныеДанные Цикл
		ТекущаяСтрока.Импортировать = Пометка;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
//
//
Процедура СнятьВсе(Команда)
	УстановитьПометку(Ложь);
КонецПроцедуры

&НаКлиенте
//
//
Процедура ПриОткрытии(Отказ)
	УправлениеДоступностьюКнопок();
КонецПроцедуры

&НаКлиенте
//
//
Процедура ПутьКФайлуПриИзменении(Элемент)
	УправлениеДоступностьюКнопок();
КонецПроцедуры
