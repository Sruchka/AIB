
&НаКлиенте
//
//
Процедура ВыбратьОбработчикОбновления(Команда)
	
	ОткрытьФорму("Справочник.Обработчики.ФормаВыбора",, ЭтаФорма,,,,
	Новый ОписаниеОповещения("ВыбратьОбработчикОбновленияОписаниеОповещения", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
//
//
Процедура ВыбратьОбработчикОбновленияОписаниеОповещения(РезультатОповещения, ПараметрыОповещения) Экспорт
	
	Если НЕ ЗначениеЗаполнено(РезультатОповещения) Тогда Возврат; КонецЕсли;
	
	Для Каждого СтрокаСписка Из Объект.Список Цикл
		СтрокаСписка.Обработчик = РезультатОповещения;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура СписокИБИнформационнаяБазаПриИзменении(Элемент)	
	СписокИБИнформационнаяБазаПриИзмененииКлиент(Элементы.Список.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
//
//
Процедура СписокИБИнформационнаяБазаПриИзмененииКлиент(ТекущаяСтрока) 
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ИнформационнаяБаза) Тогда 
		ТекущаяСтрока.ВидКонфигурации = ЗадачиНаСервере.ПолучитьЗначениеРеквизита(ТекущаяСтрока.ИнформационнаяБаза, "ВидКонфигурации");
		ТекущаяСтрока.РелизОбновления = ЗадачиНаСервере.ПолучитьЗначениеРеквизита(ТекущаяСтрока.ИнформационнаяБаза, "РелизОбновления");
		ТекущаяСтрока.ХранилищеКонфигураций = ЗадачиНаСервере.ПолучитьЗначениеРеквизита(ТекущаяСтрока.ИнформационнаяБаза, "ХранилищеКонфигураций");
		лОбработчик = ЗадачиНаСервере.ПолучитьЗначениеРеквизита(ТекущаяСтрока.ИнформационнаяБаза, "Обработчик");
		Если ЗначениеЗаполнено(лОбработчик) Тогда
			ТекущаяСтрока.РелизОбновления = ЗадачиНаСервере.ПолучитьЗначениеРеквизита(ТекущаяСтрока.ИнформационнаяБаза, "РелизОбновления");
		КонецЕсли;
		ТекущаяСтрока.Обрабатывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
//
//
Процедура РелизОбновленияПриИзмененииСервер()
	//Если ЗначениеЗаполнено(Объект.ПараметрРелизОбновления) Тогда 
	//	Объект.ПараметрВидКонфигурации = Объект.ПараметрРелизОбновления.ВидКонфигурации;
	//КонецЕсли;
КонецПроцедуры

&НаСервере
//
//
Процедура ЗаполнитьСервер(ПараметрыЗаполнения)
	
	Объект.Список.Загрузить(ПолучитьИзВременногоХранилища(ПараметрыЗаполнения.Список));	
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура РелизОбновленияПриИзменении(Элемент)
	РелизОбновленияПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
//
//
Процедура Заполнить(Команда)	
	
	Если Объект.Список.Количество() > 0 Тогда 
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьОписаниеОповещенияВопросОчисткаСписка", ЭтаФорма), "Список информационных баз при заполнении будет очищен. Продолжить?", РежимДиалогаВопрос.ДаНет);			
		
	Иначе
		
		ЗаполнитьОписаниеОповещенияВопросОчисткаСписка(КодВозвратаДиалога.Да, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ЗаполнитьОписаниеОповещенияВопросОчисткаСписка(РезультатОповещения, ПараметрыОповещения) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("Обработка.ГрупповаяОбработка.Форма.ФормаПараметрыЗаполнения",, ЭтаФорма,,,,
	Новый ОписаниеОповещения("ЗаполнитьОписаниеОповещенияПараметрыЗаполнения", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
//
//
Процедура ЗаполнитьОписаниеОповещенияПараметрыЗаполнения(РезультатОповещения, ПараметрыОповещения) Экспорт
	
	Если РезультатОповещения <> Неопределено Тогда 
		Если РезультатОповещения.Выполнить Тогда 
			ЗаполнитьСервер(РезультатОповещения);
			ОбновитьЗначенияСписка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
//
//
Функция ЕстьВидОперацииТИИ()
	МассивСтрокВидаОперацииТИИ = Объект.Список.НайтиСтроки(Новый Структура("ВидОбработки", Перечисления.ВидыГрупповойОбработки.Тестирование));
	Возврат МассивСтрокВидаОперацииТИИ.Количество() > 0;
КонецФункции

&НаКлиенте
//
//
Процедура ВыполнитьОбработку(Команда)
	Перем ТаблицаОбработки;
	
	ОбновитьЗначенияСписка();
	
	Если НЕ ПроверитьЗаполнение() Тогда Возврат; КонецЕсли;
	
	Если Объект.Список.Количество() = 0 Тогда 
		ОбщегоНазначенияСервер.ВывестиСообщение("Не выбранно ни одной информационной базы для обработки!");
		Возврат;
	КонецЕсли;		
	
	Если ЕстьВидОперацииТИИ() И Объект.ПараметрыТестирования = Неопределено Тогда		
		ЗаполнитьПараметрыТИИ(Неопределено); 		
	Иначе
		ВыполнитьОбработкуНаКлиенте();
	КонецЕсли;		
		
КонецПроцедуры

&НаКлиенте
//
//
Процедура ЗаполнитьПараметрыТИИ(Команда)
	
	ОткрытьФорму("ОбщаяФорма.ФормаТестированиеИИсправление", , ЭтаФорма,,,,
		Новый ОписаниеОповещения("ВыполнитьОбработкуТестированиеИИсправлениеОписаниеОповещения", ЭтаФорма, Новый Структура("ТолькУстановкаПараметров", НЕ Команда = Неопределено)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
//
//
Процедура ВыполнитьОбработкуТестированиеИИсправлениеОписаниеОповещения(РезультатОповещения, ПараметрыОповещения) Экспорт
	
	Если РезультатОповещения = Неопределено Тогда Возврат; КонецЕсли;
	
	Объект.ПараметрыТестирования = РезультатОповещения;
	
	Если НЕ ПараметрыОповещения.ТолькУстановкаПараметров И Не ЭтаФорма.РежимВыбораПараметровОбработки Тогда
		ВыполнитьОбработкуНаКлиенте();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
//
//
Процедура ВыполнитьОбработкуНаКлиенте()		
	
	ЗадачиНаКлиенте.ВывестиСостояние("Выполняется групповая обработка <" + СокрЛП(Объект.ВидОбработки) + ">");
	
	Если Объект.ВыполнятьВФоне Тогда
		
		Результат = ФоновыеПроцессыМенеджерСервер.ПроверкаАктивностиФоновогоЗаданияСервер(Объект.КлючФоновогоЗадания);
		
		ЗаданиеАктиво = Ложь;		
		Для Каждого ТекущееЗначениеРезультат Из Результат Цикл
			ЗаданиеАктиво = ЗаданиеАктиво ИЛИ ТекущееЗначениеРезультат.Активно;
		КонецЦикла;
		
		Если ЗаданиеАктиво Тогда
			ПоказатьПредупреждение(, "Процесс загрузки обновлений уже запущен");
		Иначе			
			ЗапуститьФоновоеЗаданиеГрупповойОбработки();
			ПодключитьОбработчикОжидания("ПроверкаАктивностиФоновогоЗаданияКлиент", 2, Истина);			
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуНаСервере();
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
		
КонецПроцедуры

&НаКлиенте
//
//
Процедура ПроверкаАктивностиФоновогоЗаданияКлиент() Экспорт
	КомандаДляВыполненияНаКлиенте = Неопределено;
	Активность = ПроверкаАктивностиФоновогоЗаданияСервер(КомандаДляВыполненияНаКлиенте);
	ФоновыеПроцессыКлиент.ВыполнитьКоманду(КомандаДляВыполненияНаКлиенте, ЭтаФорма, Объект);	
	Если Активность Тогда
		ПодключитьОбработчикОжидания("ПроверкаАктивностиФоновогоЗаданияКлиент", 2, Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
//
//
Функция ПроверкаАктивностиФоновогоЗаданияСервер(КомандаДляВыполненияНаКлиенте = Неопределено) Экспорт
	Возврат ФоновыеПроцессыСервер.ПроверкаАктивностиФоновогоЗадания(ЭтаФорма, Объект, КомандаДляВыполненияНаКлиенте);
КонецФункции

&НаСервере
//
//
Процедура ЗапуститьФоновоеЗаданиеГрупповойОбработки()	
	Элементы.ИндикаторПроцесса.МинимальноеЗначение = 0;	
	Элементы.ИндикаторПроцесса.МаксимальноеЗначение = Объект.Список.Количество();
	Объект.ИндикаторПроцесса = 0;	
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ПараметрыФоновогоПроцесса = Новый Массив;
	ПараметрыФоновогоПроцесса.Добавить(Обработки.ГрупповаяОбработка.СформироватьРезультатВыбораПараметровОбработки(ТекущийОбъект));
	Объект.КлючФоновогоЗадания = Новый УникальныйИдентификатор;
	
	//ФоновыеПроцессыСервер.ФоновыйПроцессОбработкиПоГрупповойОбработке(ПараметрыФоновогоПроцесса);
	
	ФоновыеЗадания.Выполнить("ФоновыеПроцессыСервер.ФоновыйПроцессОбработкиПоГрупповойОбработке", ПараметрыФоновогоПроцесса, Объект.КлючФоновогоЗадания, ТекущийОбъект.мИмяСобытияВЖурналеРегистрации);
КонецПроцедуры

&НаСервере
//
//
Процедура ВыполнитьОбработкуНаСервере()
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.ВыполнитьОбработку();
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
//
//
Процедура СписокИБУстановитьРелизОбновленияПриИзменении(Элемент)
	ПараметрыОбработки = ЗадачиНаСервере.ПолучитьСтруктуруПараметровОбработки(Элементы.Список.ТекущиеДанные.ИнформационнаяБаза);	
	ПараметрыОбработки.Обработчик = Элементы.Список.ТекущиеДанные.Обработчик;
	Если НЕ ЗадачиНаСервере.ПроверитьКорректностьОбновленияРекурсивно(ПараметрыОбработки, Элементы.Список.ТекущиеДанные.УстановитьРелизОбновления) Тогда 
		Элементы.Список.ТекущиеДанные.УстановитьРелизОбновления = "";
		ОбщегоНазначенияСервер.ВывестиСообщение("Выбранный релиз не подходит для текущей информационной базы!"); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
//
//
Процедура СписокИБУстановитьРелизОбновленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИнформационнаяБаза = Элементы.Список.ТекущиеДанные.ИнформационнаяБаза;
	Если ЗначениеЗаполнено(ИнформационнаяБаза) Тогда
		ПараметрыОбработки = ЗадачиНаСервере.ПолучитьСтруктуруПараметровОбработки(ИнформационнаяБаза);		
		ПараметрыОбработки.Обработчик = Элементы.Список.ТекущиеДанные.Обработчик;
		Если ЗначениеЗаполнено(ПараметрыОбработки.Обработчик) Тогда
			Состояние("Формируем список доступных обновлений для релиза " + "<" + Элементы.Список.ТекущиеДанные.РелизОбновления + ">");
		КонецЕсли;
		ЗадачиНаКлиенте.ДиалогВыбораРелизаОбновления(ЭтаФорма, ПараметрыОбработки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
//
//
Процедура ДиалогВыбораРелизаОбновления_ОбработкаОповещения(Результат, Параметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		Элементы.Список.ТекущиеДанные.УстановитьРелизОбновления = Результат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
//
//
Процедура ВыгружатьАрхивПриИзменении(Элемент)
	
	Если НЕ Объект.ВыгружатьАрхив Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ВыгружатьАрхивПриИзмененииВопросОтключенияИрхивации", ЭтаФорма), "Вы уверены, что хотите отключить архивацию ИБ?" + Символы.ПС + "Напоминаем, что админы делятся на тех кто уже делает архивы, и тех кто еще не делает :)", РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ВыгружатьАрхивПриИзмененииВопросОтключенияИрхивации(РезультатОповещения, ПараметрыОповещения) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Нет Тогда
		
		Объект.ВыгружатьАрхив = Истина;
		Объект.АвтоматическиПерезаписыватьАрхив = Истина;
		
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура УправлениеЭлементамиФормы() Экспорт
	
	ТекущийОбъект = ЭтаФорма.Объект;
	
	ТекущийОбъектРежимСценария = ТекущийОбъект.РежимСценария;
	
	ЭтоОперацияВыполнениеОбработчика = (ТекущийОбъект.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.ВыполнениеОбработчика"));
	ЭтоОперацияОбновления = (ТекущийОбъект.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.ОбновлениеИБ"));
	ЭтоОперацияОбновленияИБИзХранилищаКонфигураций = (ТекущийОбъект.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.ОбновлениеИБИзХранилищаКонфигураций"));
	ЭтоОперацияВыгрузкиАрхива = (ТекущийОбъект.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.ВыгрузкаАрхива"));
	ЭтоОперацияЗагрузкиАрхива = (ТекущийОбъект.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.ЗагрузкаАрхива"));
	ЭтоОперацияТИИ = (ТекущийОбъект.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.Тестирование"));
	ЭтоОперацияБлокировкаСеансовСнять = (ТекущийОбъект.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.БлокировкаСеансовСнять"));
	ЭтоОперацияБлокировкаСеансовУстановить = (ТекущийОбъект.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.БлокировкаСеансовУстановить"));
	ЭтоОперацияБлокировкаРегламентныхЗаданийСнять = (ТекущийОбъект.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.БлокировкаРегламентныхЗаданийСнять"));
	ЭтоОперацияБлокировкаРегламентныхЗаданийУстановить = (ТекущийОбъект.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.БлокировкаРегламентныхЗаданийУстановить"));
	ЭтоОперацияОтключитьСеансы = (ТекущийОбъект.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.ОтключитьСеансы"));
	
	// элементы шапки
	Элементы.ВыгружатьАрхив.Доступность = ЭтоОперацияВыполнениеОбработчика ИЛИ ЭтоОперацияОбновления ИЛИ ЭтоОперацияОбновленияИБИзХранилищаКонфигураций ИЛИ ЭтоОперацияТИИ;
	Элементы.АвтоматическиПерезаписыватьАрхив.Доступность = ТекущийОбъект.ВыгружатьАрхив;		
	
	Элементы.ОтключатьСеансы.Доступность = НЕ (ЭтоОперацияБлокировкаСеансовСнять ИЛИ ЭтоОперацияБлокировкаСеансовУстановить ИЛИ ЭтоОперацияБлокировкаРегламентныхЗаданийСнять ИЛИ ЭтоОперацияБлокировкаРегламентныхЗаданийУстановить ИЛИ ЭтоОперацияОтключитьСеансы);
	
	Элементы.ОткрыватьБазуПослеОбновления.Доступность = ЭтоОперацияОбновления ИЛИ ЭтоОперацияОбновленияИБИзХранилищаКонфигураций;	
	
	ОбновитьДоступностьВидимостьЭлементов(Элементы.АвтоОпределениеУстанавливаемогоРелизаОбновления, ЭтаФорма.РежимВыбораПараметровОбработки И ЭтоОперацияОбновления И НЕ ТекущийОбъектРежимСценария);	
	ОбновитьДоступностьВидимостьЭлементов(Элементы.СписокАвтоОпределениеУстанавливаемогоРелизаОбновления, ЭтаФорма.РежимВыбораПараметровОбработки И ТекущийОбъектРежимСценария);	
	
	
	// элементы списка
	ОбновитьДоступностьВидимостьЭлементов(Элементы.СписокОбработчик, ТекущийОбъектРежимСценария ИЛИ ЭтоОперацияОбновления ИЛИ ЭтоОперацияОбновленияИБИзХранилищаКонфигураций ИЛИ ЭтоОперацияВыполнениеОбработчика);	
	
	ОбновитьДоступностьВидимостьЭлементов(Элементы.СписокВыбратьОбработчикОбновления, ТекущийОбъектРежимСценария ИЛИ ЭтоОперацияОбновления ИЛИ ЭтоОперацияОбновленияИБИзХранилищаКонфигураций ИЛИ ЭтоОперацияВыполнениеОбработчика);	
	
	ОбновитьДоступностьВидимостьЭлементов(Элементы.СписокИБВыбратьРелизОбновления, ТекущийОбъектРежимСценария ИЛИ ЭтоОперацияОбновления);	
	
	ОбновитьДоступностьВидимостьЭлементов(Элементы.СписокИБУстановитьРелизОбновления, ТекущийОбъектРежимСценария ИЛИ ЭтоОперацияОбновления);
	
	ОбновитьДоступностьВидимостьЭлементов(Элементы.СписокВыбратьПравилаОбъединения, ТекущийОбъектРежимСценария ИЛИ ЭтоОперацияОбновления);
	
	ОбновитьДоступностьВидимостьЭлементов(Элементы.СписокПравилаОбъединения, ТекущийОбъектРежимСценария ИЛИ ЭтоОперацияОбновления);
	
	ОбновитьДоступностьВидимостьЭлементов(Элементы.СписокВыбратьХранилищеКонфигураций, ТекущийОбъектРежимСценария ИЛИ ЭтоОперацияОбновленияИБИзХранилищаКонфигураций);
	
	ОбновитьДоступностьВидимостьЭлементов(Элементы.СписокХранилищеКонфигураций, ТекущийОбъектРежимСценария ИЛИ ЭтоОперацияОбновленияИБИзХранилищаКонфигураций);	
	
	ОбновитьДоступностьВидимостьЭлементов(Элементы.СписокЗаполнитьПараметрыТИИ, ТекущийОбъектРежимСценария ИЛИ ЭтоОперацияТИИ);	
	
	// режим сценария
	Элементы.ГруппаПараметры.Доступность = НЕ ТекущийОбъектРежимСценария;
	
	ОбновитьДоступностьВидимостьЭлементов(Элементы.СписокВидОбработки, ТекущийОбъектРежимСценария);
	
	ОбновитьДоступностьВидимостьЭлементов(Элементы.СписокГруппаПараметрыРежимСценария, ТекущийОбъектРежимСценария);	
	
	// режим выбора параметров
	ОбновитьДоступностьВидимостьЭлементов(Элементы.ВыполнитьОбработку, НЕ (ЭтоОперацияЗагрузкиАрхива ИЛИ ЭтаФорма.РежимВыбораПараметровОбработки));	
	ОбновитьДоступностьВидимостьЭлементов(Элементы.СписокВыполнитьАвтоПодборУстанавливаемогоРелизаОбновления, ЭтоОперацияОбновления ИЛИ ТекущийОбъектРежимСценария);
	
	Элементы.РазрешатьМножественныйПодборОдногоЭлемента.Доступность = ТекущийОбъектРежимСценария ИЛИ ЭтоОперацияВыполнениеОбработчика;
	
	ОбновитьДоступностьВидимостьЭлементов(Элементы.КоличествоПараллельныхПроцессов, ТекущийОбъект.ВыполнятьВФоне);			
	
	// фоновые процессы
	Элементы.ИндикаторПроцесса.Заголовок = "Индикатор процесса";
	Элементы.ИндикаторПроцесса.Видимость = ЗначениеЗаполнено(Объект.КлючФоновогоЗадания);
	ЭтаФорма.Доступность = НЕ ЗначениеЗаполнено(Объект.КлючФоновогоЗадания);	
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ОбновитьДоступностьВидимостьЭлементов(Элемент, Значение)
	
	Элемент.Доступность = Значение;
	Элемент.Видимость = Значение;	
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЭтаФорма.РежимВыбораПараметровОбработки Тогда
		ВидОбработкиПриИзменении(Неопределено);
	Иначе
		УправлениеЭлементамиФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
//
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("РежимВыбораПараметровОбработки", ЭтаФорма.РежимВыбораПараметровОбработки);
	Если ЭтаФорма.РежимВыбораПараметровОбработки Тогда
		ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + "[Режим выбора параметров обработки]";		
		
		МассивПараметрыОбработки = Неопределено;
		Параметры.Свойство("МассивПараметрыОбработки", МассивПараметрыОбработки);
		Если МассивПараметрыОбработки <> Неопределено И ТипЗнч(МассивПараметрыОбработки) = Тип("Массив") Тогда
			
			ТекущийОбъект = РеквизитФормыВЗначение("Объект");
			Обработки.ГрупповаяОбработка.ЗаполнитьЗначенияРезультатаВыбораПараметровОбработки(ТекущийОбъект, МассивПараметрыОбработки);
			ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект")
			
		Иначе
			
			Инициализация();
			
		КонецЕсли;
	Иначе
		
		Инициализация();
		
	КонецЕсли;
	
	Элементы.ВыполнятьВФоне.Доступность = ОбщегоНазначенияСервер.ДопустимоИспользованиеФайловыхЗаданий();
	Объект.ВыполнятьВФоне = Элементы.ВыполнятьВФоне.Доступность;
	
КонецПроцедуры

&НаСервере
//
//
Процедура Инициализация()
	Объект.ВидОбработки = Перечисления.ВидыГрупповойОбработки.ОбновлениеИБ;
	//Объект.ВыгружатьАрхив = Истина;
	//Объект.ТихийРежим = Истина;
	//Объект.АвтоматическиПерезаписыватьАрхив = Истина;
	//Объект.ОткрыватьБазуПослеОбновления = Истина;
КонецПроцедуры

&НаСервере
//
//
Процедура ВыбратьРелизОбновленияСервер(РелизОбновления, Параметры) Экспорт	
	
	Если НЕ ЗначениеЗаполнено(РелизОбновления) Тогда 
		Возврат; 
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Объект.Список Цикл
		ПараметрыОбработки = ЗадачиНаСервере.ПолучитьСтруктуруПараметровОбработки(СтрокаТаблицы.ИнформационнаяБаза);	
		ПараметрыОбработки.Обработчик = СтрокаТаблицы.Обработчик;
		Если ЗадачиНаСервере.ПроверитьКорректностьОбновленияРекурсивно(ПараметрыОбработки, РелизОбновления) Тогда СтрокаТаблицы.УстановитьРелизОбновления = РелизОбновления; КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ВыбратьРелизОбновления(Команда)
	
	
	ОткрытьФорму("Справочник.РелизыОбновлений.ФормаВыбора",
             ,,,,, Новый ОписаниеОповещения("ВыбратьРелизОбновленияСервер", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ВыбратьПравилаОбъединенияСервер(ПравилаОбъединения, Параметры) Экспорт	
	
	Если НЕ ЗначениеЗаполнено(ПравилаОбъединения) Тогда 
		Возврат; 
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Объект.Список Цикл
		УстановитьПравилаОбъединенияСервер(ПравилаОбъединения, Параметры, СтрокаТаблицы);			
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура УстановитьПравилаОбъединенияСервер(ПравилаОбъединения, Параметры, СтрокаТаблицы = Неопределено) Экспорт	
	
	Если НЕ ЗначениеЗаполнено(ПравилаОбъединения) Тогда 
		Возврат; 
	КонецЕсли;
	
	Если СтрокаТаблицы = Неопределено Тогда СтрокаТаблицы = Элементы.Список.ТекущиеДанные; КонецЕсли;
	
	Если ОбщегоНазначенияСервер.ДопустимоИспользованиеПравилОбъединения(СокрЛП(ЗадачиНаСервере.ПолучитьЗначениеРеквизита(СтрокаТаблицы.ИнформационнаяБаза, "РелизТехнологическойПлатформы")))
		И ЗадачиНаСервере.ПроверитьПрименимостьПравилОбъединения(ПравилаОбъединения, СтрокаТаблицы.РелизОбновления, СтрокаТаблицы.УстановитьРелизОбновления) Тогда
		СтрокаТаблицы.ПравилаОбъединения = ПравилаОбъединения;
	КонецЕсли;			
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ОповещениеУстановитьПравилаОбъединенияСервер(ПравилаОбъединения, Параметры) Экспорт	
	
	Если НЕ ЗначениеЗаполнено(ПравилаОбъединения) Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПравилаОбъединенияСервер(ПравилаОбъединения, Параметры);			
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ВыбратьПравилаОбъединения(Команда)
	
	
	ОткрытьФорму("Справочник.ПравилаОбъединения.ФормаВыбора",
             ,,,,, Новый ОписаниеОповещения("ВыбратьПравилаОбъединенияСервер", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ОткрытьКонфигуратор(Команда)
	ИнформационнаяБаза = Элементы.Список.ТекущиеДанные.ИнформационнаяБаза;
	Если ТипЗнч(ИнформационнаяБаза) <> Тип("СправочникСсылка.ИнформационныеБазы") Тогда Возврат; КонецЕсли;	
	ЗадачиНаКлиенте.КомандаЗапуститьКонфигуратор(ИнформационнаяБаза);
КонецПроцедуры

&НаКлиенте
//
//
Процедура ОткрытьПредприятие(Команда)
	ИнформационнаяБаза = Элементы.Список.ТекущиеДанные.ИнформационнаяБаза;
	Если ТипЗнч(ИнформационнаяБаза) <> Тип("СправочникСсылка.ИнформационныеБазы") Тогда Возврат; КонецЕсли;	
	ЗадачиНаКлиенте.КомандаЗапуститьПредприятие(ИнформационнаяБаза);
КонецПроцедуры

&НаКлиенте
//
//
Процедура СнятьФлажки(Команда)
	УстановитьФлажкиВыполнить(Ложь);
КонецПроцедуры

&НаКлиенте
//
//
Процедура УстановитьФлажки(Команда)
	УстановитьФлажкиВыполнить(Истина);
КонецПроцедуры

&НаСервере
//
//
Процедура УстановитьФлажкиВыполнить(Флаг = Ложь)
	Для Каждого СтрокаТаблицы Из Объект.Список Цикл 
		СтрокаТаблицы.Обрабатывать = Флаг;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СписокИБВидКонфигурацииПриИзменении(Элемент)
	Если Элементы.Список.ТекущиеДанные.ВидКонфигурации <> ЗадачиНаСервере.ПолучитьЗначениеРеквизита(Элементы.Список.ТекущиеДанные.ИнформационнаяБаза, "ВидКонфигурации") Тогда
		Элементы.Список.ТекущиеДанные.ИнформационнаяБаза = "";
		Элементы.Список.ТекущиеДанные.РелизОбновления = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
//
//
Процедура ВидОбработкиПриИзменении(Элемент)
	Если Объект.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.ВыгрузкаАрхива") Тогда
		Объект.ВыгружатьАрхив = Истина;
		Объект.ОтключатьСеансы = Истина;
		Объект.ОткрыватьБазуПослеОбновления = Ложь;
	ИначеЕсли Объект.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.ЗагрузкаАрхива") Тогда
		ОбщегоНазначенияСервер.ВывестиСообщение("Групповая операция по данному виду обработки не поддреживается!");
	ИначеЕсли Объект.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.ОбновлениеИБ") Тогда
		Объект.ВыгружатьАрхив = Истина;
		Объект.ОтключатьСеансы = Истина;
		Объект.ОткрыватьБазуПослеОбновления = Ложь;
	ИначеЕсли Объект.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.ОбновлениеИБИзХранилищаКонфигураций") Тогда
		Объект.ВыгружатьАрхив = Истина;
		Объект.ОтключатьСеансы = Истина;
		Объект.ОткрыватьБазуПослеОбновления = Ложь;
	ИначеЕсли Объект.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.БлокировкаРегламентныхЗаданийСнять") Тогда
		Объект.ВыгружатьАрхив = Ложь;
		Объект.ОтключатьСеансы = Ложь;
		Объект.ОткрыватьБазуПослеОбновления = Ложь;
	ИначеЕсли Объект.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.БлокировкаРегламентныхЗаданийУстановить") Тогда
		Объект.ВыгружатьАрхив = Ложь;
		Объект.ОтключатьСеансы = Ложь;
		Объект.ОткрыватьБазуПослеОбновления = Ложь;
	ИначеЕсли Объект.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.БлокировкаСеансовСнять") Тогда
		Объект.ВыгружатьАрхив = Ложь;
		Объект.ОтключатьСеансы = Ложь;
		Объект.ОткрыватьБазуПослеОбновления = Ложь;
	ИначеЕсли Объект.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.БлокировкаСеансовУстановить") Тогда
		Объект.ВыгружатьАрхив = Ложь;
		Объект.ОтключатьСеансы = Истина;
		Объект.ОткрыватьБазуПослеОбновления = Ложь;
	ИначеЕсли Объект.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.ВыполнениеОбработчика") Тогда
		Объект.ВыгружатьАрхив = Ложь;
		Объект.ОтключатьСеансы = Ложь;
		Объект.ОткрыватьБазуПослеОбновления = Ложь;
	ИначеЕсли Объект.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.ОбновлениеИнформации") Тогда
		Объект.ВыгружатьАрхив = Ложь;
		Объект.ОтключатьСеансы = Ложь;
		Объект.ОткрыватьБазуПослеОбновления = Ложь;
	ИначеЕсли Объект.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.ОтключитьСеансы") Тогда
		Объект.ВыгружатьАрхив = Ложь;
		Объект.ОтключатьСеансы = Истина;
		Объект.ОткрыватьБазуПослеОбновления = Ложь;
	ИначеЕсли Объект.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.Тестирование") Тогда
		Объект.ВыгружатьАрхив = Истина;
		Объект.ОтключатьСеансы = Истина;
		Объект.ОткрыватьБазуПослеОбновления = Ложь;
	КонецЕсли;
	УправлениеЭлементамиФормы();
КонецПроцедуры

&НаКлиенте
//
//
Процедура Подбор(Команда)
	
	ОткрытьФорму("Справочник.ИнформационныеБазы.ФормаВыбора", Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор", Ложь, Истина), ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ВыбранноеЗначениеТип = ТипЗнч(ВыбранноеЗначение);
	Если ВыбранноеЗначениеТип = Тип("Массив") Тогда
		Для Каждого ТекущееЗначениеМассива ИЗ ВыбранноеЗначение Цикл
			ОбработкаВыбора(ТекущееЗначениеМассива, ИсточникВыбора);
		КонецЦикла;
	ИначеЕсли ВыбранноеЗначениеТип = Тип("СправочникСсылка.ИнформационныеБазы") Тогда
		Если Объект.РазрешатьМножественныйПодборОдногоЭлемента ИЛИ Объект.Список.НайтиСтроки(Новый Структура("ИнформационнаяБаза", ВыбранноеЗначение)).Количество() = 0 Тогда
			НоваяСтрокаСписок = Объект.Список.Добавить();
			НоваяСтрокаСписок.ИнформационнаяБаза = ВыбранноеЗначение;			
			СписокИБИнформационнаяБазаПриИзмененииКлиент(НоваяСтрокаСписок);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ВыбратьХранилищеКонфигураций(Команда)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ТипСервера", ПредопределенноеЗначение("Перечисление.ТипыСерверов.ХранилищеКонфигураций"));
	
	ОткрытьФорму("Справочник.Сервера.ФормаВыбора", Новый Структура("Отбор", Отбор), ЭтаФорма,,,,
	Новый ОписаниеОповещения("ВыбратьХранилищеКонфигурацийОписаниеОповещения", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ВыбратьХранилищеКонфигурацийОписаниеОповещения(РезультатОповещения, ПараметрыОповещения) Экспорт
	
	Если НЕ ЗначениеЗаполнено(РезультатОповещения) Тогда 
		Возврат; 
	КонецЕсли;
	
	ВыбратьХранилищеКонфигурацийСервер(РезультатОповещения);
	
КонецПроцедуры

&НаСервере
//
//
Процедура ВыбратьХранилищеКонфигурацийСервер(ХранилищеКонфигураций)	
	Для Каждого СтрокаТаблицы Из Объект.Список Цикл
		СтрокаТаблицы.ХранилищеКонфигураций = ХранилищеКонфигураций;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
//
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЭтаФорма.ПринудительноеЗакрытие И ЭтаФорма.РежимВыбораПараметровОбработки И ЕстьВидОперацииТИИ() И Объект.ПараметрыТестирования = Неопределено Тогда
		
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемПустыеПараметрыТИИОписаниеОповещения", ЭтаФорма), "Не заполнены параметры операции ТИИ, поэтому выполнение данной обработки не будет выполнено корректно!
		|Вы уверены, что хотите закрыть форму?", РежимДиалогаВопрос.ДаНет,,, "Отсутствуют параметры ТИИ");
		
	Иначе
		
		СтандартнаяОбработка = Ложь;
		ОбработатьЗакрытиеФормы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ПередЗакрытиемПустыеПараметрыТИИОписаниеОповещения(РезультатОповещения, ПараметрыОповещения) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Нет Тогда 
		Возврат; 
	Иначе
		ЭтаФорма.ПринудительноеЗакрытие = Истина;
	КонецЕсли;
	
	ОбработатьЗакрытиеФормы();
	
КонецПроцедуры


&НаКлиенте
//
//
Процедура ОбработатьЗакрытиеФормы()
	
	ОбновитьЗначенияСписка();
	
	Если ЭтаФорма.РежимВыбораПараметровОбработки Тогда
		ЭтаФорма.Закрыть(СформироватьРезультатВыбораПараметровОбработки());
	Иначе 
		ЭтаФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
//
//
Функция СформироватьРезультатВыбораПараметровОбработки()
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");			
	Возврат Обработки.ГрупповаяОбработка.СформироватьРезультатВыбораПараметровОбработки(ТекущийОбъект);
КонецФункции

&НаКлиенте
//
//
Процедура РежимСценарияПриИзменении(Элемент)
	Если НЕ Объект.РежимСценария Тогда Объект.РазрешатьМножественныйПодборОдногоЭлемента = Ложь; КонецЕсли;
	ОбновитьЗначенияСписка();
	УправлениеЭлементамиФормы();
КонецПроцедуры

&НаКлиенте
//
//
Процедура ОбновитьЗначенияСписка()
		
	Если НЕ Объект.РежимСценария Тогда
		
		Для Каждого ТекущаяСтрокаСписок Из Объект.Список Цикл
			ЗаполнитьЗначенияСвойств(ТекущаяСтрокаСписок, Объект);
		КонецЦикла;
		
		ЭтаФорма.ОбновитьОтображениеДанных();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
//
//
Функция ПолучитьСтруктуруПараметровТекущейОбработки()
	Объект.АдресВременногоХранилищаДляВнутреннегоОбмена = ПоместитьВоВременноеХранилище("");
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("Список", Объект.Список.Выгрузить());		
	ПараметрыОбработки.Вставить("ВыполнятьВФоне", Ложь);	
	ПараметрыОбработки.Вставить("КлючФоновогоЗадания", Объект.КлючФоновогоЗадания);	
	ПараметрыОбработки.Вставить("АдресВременногоХранилищаДляВнутреннегоОбмена", Объект.АдресВременногоХранилищаДляВнутреннегоОбмена);	
	Возврат ПараметрыОбработки;
КонецФункции

&НаСервере
//
//
Процедура ВыполнитьАвтоПодборУстанавливаемогоРелизаОбновленияНаСервере()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	ТекущийОбъект.ВыполнитьАвтоПодборУстанавливаемогоРелизаОбновления();
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ВыполнитьАвтоПодборУстанавливаемогоРелизаОбновления(Команда)
	
	Если НЕ Объект.РежимСценария Тогда
		ВременноеЗначениеАвтоОпределениеУстанавливаемогоРелизаОбновления = Объект.АвтоОпределениеУстанавливаемогоРелизаОбновления;
		Объект.АвтоОпределениеУстанавливаемогоРелизаОбновления = Истина;
	КонецЕсли;
	
	ОбновитьЗначенияСписка();
	
	ВыполнитьАвтоПодборУстанавливаемогоРелизаОбновленияНаСервере();
	
	Если НЕ Объект.РежимСценария Тогда
		Объект.АвтоОпределениеУстанавливаемогоРелизаОбновления = ВременноеЗначениеАвтоОпределениеУстанавливаемогоРелизаОбновления;
		ОбновитьЗначенияСписка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ВыполнятьВФонеПриИзменении(Элемент)
	Объект.КоличествоПараллельныхПроцессов = 1;
	УправлениеЭлементамиФормы();
КонецПроцедуры

&НаКлиенте
//
//
Процедура СписокПравилаОбъединенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Отбор = Новый Структура("ОсновнаяКонфигурация, ВтораяКонфигурация", Элементы.Список.ТекущиеДанные.РелизОбновления, Элементы.Список.ТекущиеДанные.УстановитьРелизОбновления);
	ОткрытьФорму("Справочник.ПравилаОбъединения.ФормаВыбора", Новый Структура("Отбор", Отбор)
             ,,,,, Новый ОписаниеОповещения("ОповещениеУстановитьПравилаОбъединенияСервер", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			 
КонецПроцедуры
