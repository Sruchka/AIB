
&НаКлиенте
//
//
Процедура УправлениеФормой()

	Элементы.ПараметрВидКонфигурации.Доступность = НЕ ЗначениеЗаполнено(ЭтаФорма.ПараметрРелизОбновления);	
	Элементы.КнопкаИзменитьРежим.Заголовок = ?(ЭтаФорма.РасширенныйРежим, "Простой", "Расширенный") + " режим отбора";
	Элементы.ГруппаПростойРежим.Видимость = НЕ ЭтаФорма.РасширенныйРежим;
	Элементы.ГруппаРасширенныйРежим.Видимость = ЭтаФорма.РасширенныйРежим;
	
КонецПроцедуры


&НаКлиенте
//
//
Процедура Отмена(Команда)
	ЗакрытьФорму(СформироватьПараметры(Ложь));
КонецПроцедуры

&НаКлиенте
//
//
Процедура ОК(Команда)
	
	ПараметрыЗаполнения = СформироватьПараметры(Истина);
	ПараметрыЗаполнения.Выполнить = Истина;
	
	ЗакрытьФорму(ПараметрыЗаполнения);
КонецПроцедуры

&НаКлиенте
//
//
Функция СформироватьПараметры(ПараметрВыполнить = Ложь)
	ПараметрыЗаполнения = Новый Структура;		
	ПараметрыЗаполнения.Вставить("Выполнить", ПараметрВыполнить);
	ПараметрыЗаполнения.Вставить("Список", Неопределено);
	
	Если ПараметрВыполнить Тогда
		ЗаполнитьПараметры(ПараметрыЗаполнения);
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;
КонецФункции

&НаСервере
//
//
Функция ЗаполнитьПараметры(ПараметрыЗаполнения)
	
	Результат = Неопределено;
	
	Если НЕ ЭтаФорма.РасширенныйРежим Тогда 
		Запрос = Новый Запрос();
		Запрос.Текст = ПолучитьТекстЗапроса();
		Если ЗначениеЗаполнено(ЭтаФорма.ПараметрРелизОбновления) Тогда
			Запрос.Текст = Запрос.Текст + " И ИнформационныеБазы.РелизОбновления = &ПараметрРелизОбновления ";
			Запрос.УстановитьПараметр("ПараметрРелизОбновления", ЭтаФорма.ПараметрРелизОбновления);		
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭтаФорма.ПараметрВидКонфигурации) Тогда
			Запрос.Текст = Запрос.Текст + " И ИнформационныеБазы.ВидКонфигурации = &ПараметрВидКонфигурации ";
			Запрос.УстановитьПараметр("ПараметрВидКонфигурации", ЭтаФорма.ПараметрВидКонфигурации);
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭтаФорма.ПараметрСтатусПоддержки) Тогда
			Запрос.Текст = Запрос.Текст + " И ИнформационныеБазы.СтатусПоддержки = &ПараметрСтатусПоддержки ";
			Запрос.УстановитьПараметр("ПараметрСтатусПоддержки", ЭтаФорма.ПараметрСтатусПоддержки);		
		КонецЕсли;	
		Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО ИнформационныеБазы.ВидКонфигурации, ИнформационныеБазы.Наименование";
		Результат = Запрос.Выполнить().Выгрузить();
	Иначе 
		СхемаКомпоновкиДанных=новый СхемаКомпоновкиДанных;
		источникДанных=СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
		источникДанных.Имя="ИсточникДанных1";
		источникДанных.ТипИсточникаДанных="local";
		Наборданных=СхемаКомпоновкиДанных.НаборыДанных.Добавить(тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
		Наборданных.ИсточникДанных="ИсточникДанных1";
		Наборданных.АвтоЗаполнениеДоступныхПолей=Истина;
		Наборданных.Запрос=ПолучитьТекстЗапроса();
		Наборданных.Имя="Наборданных1";
		ВременнаяКомпоновка = новый КомпоновщикНастроекКомпоновкиДанных;
		ВременнаяКомпоновка.Инициализировать(новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных,УникальныйИдентификатор)));
		ВременнаяКомпоновка.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		для каждого элемент из КомпоновщикНастроек.Настройки.Отбор.Элементы цикл
			новаястрока=ВременнаяКомпоновка.Настройки.Отбор.Элементы.Добавить(тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(новаястрока,элемент);
		КонецЦикла;
		Настройки=ВременнаяКомпоновка.Настройки;
		Настройки.Структура.Очистить();
		Настройки.Выбор.Элементы.Очистить();
		
		ПолеВыбора = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("ИнформационнаяБаза");
		ПолеВыбора.Использование = Истина;
		
		ПолеВыбора = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("РелизОбновления");
		ПолеВыбора.Использование = Истина;
		
		ПолеВыбора = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("ВидКонфигурации");
		ПолеВыбора.Использование = Истина;
		
		ПолеВыбора = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("Обработчик");
		ПолеВыбора.Использование = Истина;
		
		ПолеВыбора = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("ХранилищеКонфигураций");
		ПолеВыбора.Использование = Истина;
		
		ПолеВыбора = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("Обрабатывать");
		ПолеВыбора.Использование = Истина;
		
		ГруппировкаКомпоновкиДанных = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ГруппировкаКомпоновкиДанных.Имя = "ИнформационнаяБаза";
		ГруппировкаКомпоновкиДанных.Использование = Истина;
		ДетальныеЗаписиГруппировкиСклад = ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ДетальныеЗаписиГруппировкиСклад.Использование = Истина;
		
		Результат = Новый ТаблицаЗначений;  
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
		ВременнаяКомпоновка.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(Результат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
	КонецЕсли;
	
	ПараметрыЗаполнения.Список = ПоместитьВоВременноеХранилище(Результат);
	
	
	Возврат ПараметрыЗаполнения;
КонецФункции

&НаКлиенте
//
//
Процедура ЗакрытьФорму(ПараметрыЗаполнения)
	ЭтаФорма.Закрыть(ПараметрыЗаполнения);
КонецПроцедуры

&НаКлиенте
//
//
Процедура ПараметрРелизОбновленияПриИзменении(Элемент)
	ЭтаФорма.ПараметрВидКонфигурации = ЗадачиНаСервере.ПолучитьЗначениеРеквизита(ЭтаФорма.ПараметрРелизОбновления, "ВидКонфигурации");
	УправлениеФормой();
КонецПроцедуры

&НаСервере
//
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтаФорма.ПараметрСтатусИБ = Перечисления.СтатусыИнформационныхБаз.Рабочая;
	
	Текстзапроса = ПолучитьТекстЗапроса();
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "local";
	Наборданных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	Наборданных.ИсточникДанных = "ИсточникДанных1";
	Наборданных.АвтоЗаполнениеДоступныхПолей = Истина;
	Наборданных.Запрос = Текстзапроса;
	Наборданных.Имя = "Наборданных1";
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных,УникальныйИдентификатор)));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ПриОткрытии(Отказ)
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
//
//
Процедура КнопкаИзменитьРежим(Команда)
	ЭтаФорма.РасширенныйРежим = НЕ ЭтаФорма.РасширенныйРежим;
	УправлениеФормой();
КонецПроцедуры

&НаСервере
//
//
Функция ПолучитьТекстЗапроса()
		
	ТекстЗапроса = "ВЫБРАТЬ
	|	ИнформационныеБазы.Ссылка КАК ИнформационнаяБаза,
	|	ИнформационныеБазы.РелизОбновления,
	|	ИнформационныеБазы.ВидКонфигурации,
	|	ИнформационныеБазы.Обработчик,
	|	ИнформационныеБазы.ХранилищеКонфигураций,
	|	ИСТИНА КАК Обрабатывать
	|ИЗ
	|	Справочник.ИнформационныеБазы КАК ИнформационныеБазы
	|ГДЕ
	|	НЕ ИнформационныеБазы.ПометкаУдаления
	|	И НЕ ИнформационныеБазы.ВыполняетсяОбработка";
	
	
	Возврат ТекстЗапроса;
КонецФункции