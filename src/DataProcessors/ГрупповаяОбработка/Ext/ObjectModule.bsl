Перем мИмяСобытияВЖурналеРегистрации Экспорт;

//
//
Процедура ВыполнитьОбработку() Экспорт		
	
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.Список Цикл		
		
		ТекущийВидОбработки = СтрокаТаблицы.ВидОбработки;
		
		Если НЕ СтрокаТаблицы.Обрабатывать ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.ИнформационнаяБаза) Тогда Продолжить; КонецЕсли;		
		
		ПараметрыОбработки = ЗадачиНаСервере.ПолучитьСтруктуруПараметровОбработки(СтрокаТаблицы.ИнформационнаяБаза);			
		ЗаполнитьЗначенияСвойств(ПараметрыОбработки, ЭтотОбъект);
		ЗаполнитьЗначенияСвойств(ПараметрыОбработки, СтрокаТаблицы);		
				
		Если ТекущийВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.ОбновлениеИБ") Тогда
			
			ВыполнитьАвтоПодборУстанавливаемогоРелизаОбновленияДляСтроки(СтрокаТаблицы);
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.УстановитьРелизОбновления) Тогда
				ПараметрыОбработки.ОписаниеОшибки = "Информационная база <" + СтрокаТаблицы.ИнформационнаяБаза + "> не обновлена: не выбран релиз обновления";
				ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
				Продолжить;
			Иначе				
				Если ЗадачиНаСервере.ВыполнитьУстановкуОбновлений(ПараметрыОбработки, СтрокаТаблицы.УстановитьРелизОбновления) Тогда
					СтрокаТаблицы.РелизОбновления =СтрокаТаблицы.ИнформационнаяБаза.РелизОбновления;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТекущийВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.ОбновлениеИБИзХранилищаКонфигураций") Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ХранилищеКонфигураций) Тогда
				ПараметрыОбработки.ОписаниеОшибки = "Информационная база <" + СтрокаТаблицы.ИнформационнаяБаза + "> не обновлена: не выбрано хранилище конфигураций";
				ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);					
				Продолжить;
			Иначе				
				ЗадачиНаСервере.ВыполнитьУстановкуОбновлений(ПараметрыОбработки, СтрокаТаблицы.ХранилищеКонфигураций);				
				СтрокаТаблицы.РелизОбновления =СтрокаТаблицы.ИнформационнаяБаза.РелизОбновления;
			КонецЕсли;
			
		ИначеЕсли ТекущийВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.Тестирование") Тогда			
			
			ЗадачиНаСервере.ВыполнитьТестированиеИсправление(ПараметрыОбработки);			
			
		ИначеЕсли ТекущийВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.ВыгрузкаАрхива") Тогда			
			
			ЗадачиНаСервере.ВыполнитьВыгрузкуАрхива(ПараметрыОбработки);
			
		ИначеЕсли ТекущийВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.ОбновлениеИнформации") Тогда			
			
			ЗадачиНаСервере.ВыполнитьОбновлениеИнформацииПоБазе(ПараметрыОбработки, Истина);	
			
		ИначеЕсли ТекущийВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.БлокировкаСеансовУстановить") Тогда			
			
			ЗадачиНаСервере.ВыполнитьУстановкуБлокировкиСеансовИБ(ПараметрыОбработки, Истина);
			
		ИначеЕсли ТекущийВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.БлокировкаСеансовСнять") Тогда			
			
			ЗадачиНаСервере.ВыполнитьУстановкуБлокировкиСеансовИБ(ПараметрыОбработки, Ложь);
			
		ИначеЕсли ТекущийВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.БлокировкаРегламентныхЗаданийУстановить") Тогда						
			
			ЗадачиНаСервере.ВыполнитьУстановкуБлокировкиРегламентныхЗаданий(ПараметрыОбработки, Истина);
			
		ИначеЕсли ТекущийВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.БлокировкаРегламентныхЗаданийСнять") Тогда						
			
			ЗадачиНаСервере.ВыполнитьУстановкуБлокировкиРегламентныхЗаданий(ПараметрыОбработки, Ложь);
			
		ИначеЕсли ТекущийВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.ОтключитьСеансы") Тогда			
			
			ПараметрыОбработки.ОтключатьСеансы = Истина;
			ЗадачиНаСервере.ВыполнитьОтключениеСеансов(ПараметрыОбработки, Истина);
			
		ИначеЕсли ТекущийВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыГрупповойОбработки.ВыполнениеОбработчика") Тогда			
			
			ЗадачиНаСервере.ВыполнитьЗапускОбработчика(ПараметрыОбработки,,Истина);
			
		КонецЕсли;		
		
		СтрокаТаблицы.Обрабатывать = Ложь;		
		
	КонецЦикла;
	
КонецПроцедуры

//
//
Процедура ВыполнитьАвтоПодборУстанавливаемогоРелизаОбновления() Экспорт
	
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.Список Цикл		
		
		ВыполнитьАвтоПодборУстанавливаемогоРелизаОбновленияДляСтроки(СтрокаТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры

//
//
Процедура ВыполнитьАвтоПодборУстанавливаемогоРелизаОбновленияДляСтроки(СтрокаТаблицы) Экспорт	
	
	Если СтрокаТаблицы.ВидОбработки = Перечисления.ВидыГрупповойОбработки.ОбновлениеИБ И СтрокаТаблицы.АвтоОпределениеУстанавливаемогоРелизаОбновления Тогда
		
		СтрокаТаблицы.РелизОбновления = СтрокаТаблицы.ИнформационнаяБаза.РелизОбновления;
		
		ПараметрыОбработки = ЗадачиНаСервере.ПолучитьСтруктуруПараметровОбработки(СтрокаТаблицы.ИнформационнаяБаза);	
		ЗаполнитьЗначенияСвойств(ПараметрыОбработки, ЭтотОбъект);
		ЗаполнитьЗначенияСвойств(ПараметрыОбработки, СтрокаТаблицы);			
		
		МассивОбновлений = ЗадачиНаСервере.НайтиДопустимыеРелизыОбновления(ПараметрыОбработки);
		МассивОбновленийКоличество	= МассивОбновлений.Количество();
		Если МассивОбновленийКоличество > 0 Тогда
			
			СтрокаТаблицы.УстановитьРелизОбновления = МассивОбновлений[МассивОбновленийКоличество - 1];
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

мИмяСобытияВЖурналеРегистрации = "MultipleProcessing";
КоличествоПараллельныхПроцессов = 1;