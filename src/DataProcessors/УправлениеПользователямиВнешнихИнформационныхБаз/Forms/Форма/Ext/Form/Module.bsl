
&НаКлиенте
//
//
Процедура ИзменитьПользователяВТекущейБазе(Команда)
	ИзменитьПользователяВБазах(Объект.ИнформационнаяБаза);
КонецПроцедуры

&НаКлиенте
//
//
Процедура ИзменитьПользователяВоВсехБазах(Команда) 
	ИзменитьПользователяВБазах();
КонецПроцедуры

&НаКлиенте
//
//
Процедура ИзменитьПользователяВБазах(ИнформационнаяБаза = Неопределено)
	Если Не ЗначениеЗаполнено(Объект.Имя) Тогда
		ОбщегоНазначенияСервер.ВывестиСообщение("Не задано имя пользователя!");
		Возврат;
	КонецЕсли;
	Если Объект.ВыполнятьВФоне Тогда
		Результат = ФоновыеПроцессыМенеджерСервер.ПроверкаАктивностиФоновогоЗаданияСервер(Объект.КлючФоновогоЗадания);
		
		ЗаданиеАктиво = Ложь;		
		Для Каждого ТекущееЗначениеРезультат Из Результат Цикл
			ЗаданиеАктиво = ЗаданиеАктиво ИЛИ ТекущееЗначениеРезультат.Активно;
		КонецЦикла;
		
		Если ЗаданиеАктиво Тогда
			ОбщегоНазначенияСервер.ВывестиСообщение("Процесс загрузки обновлений уже запущен");
		Иначе			
			ЗапуститьФоновоеЗаданиеИзмененияПользователяВБазах(ИнформационнаяБаза);
			ПодключитьОбработчикОжидания("ПроверкаАктивностиФоновогоЗаданияКлиент", 2, Истина);			
		КонецЕсли;
	Иначе		
		ИзменитьПользователяВБазахНаСервере(ИнформационнаяБаза);			
	КонецЕсли;
	УправлениеЭлементамиФормы();	
КонецПроцедуры

&НаСервере
//
//
Процедура ИзменитьПользователяВБазахНаСервере(ИнформационнаяБаза = Неопределено) Экспорт
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");	
	Для Каждого СтрокаТаблицы Из ТекущийОбъект.ТаблицаОбработки Цикл		
		Если ИнформационнаяБаза <> Неопределено И СтрокаТаблицы.ИнформационнаяБаза <> ИнформационнаяБаза Тогда Продолжить; КонецЕсли;
		ТекущийОбъект.ИзменитьПользователяВБазе(СтрокаТаблицы.ИнформационнаяБаза);
	КонецЦикла;
	ТекущийОбъект.СортироватьТаблицуДоступныхПользователей();
	ТекущийОбъект.ИмяСтарое = ТекущийОбъект.Имя;
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
КонецПроцедуры

&НаСервере
//
//
Процедура ЗапуститьФоновоеЗаданиеИзмененияПользователяВБазах(ИнформационнаяБаза = Неопределено)	
	Элементы.ИндикаторПроцесса.МинимальноеЗначение = 0;	
	Элементы.ИндикаторПроцесса.МаксимальноеЗначение = Объект.ТаблицаОбработки.Количество();
	Объект.ИндикаторПроцесса = 0;	
		
	ПараметрыФоновогоПроцесса = Новый Массив;
	ПараметрыФоновогоПроцесса.Добавить(ПолучитьСтруктуруПараметровТекущейОбработки(ИнформационнаяБаза));		
	Объект.КлючФоновогоЗадания = Новый УникальныйИдентификатор;
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ФоновыеЗадания.Выполнить("ФоновыеПроцессыСервер.ФоновыйПроцессОбработкиПоИзменениюПользователяВБазах", ПараметрыФоновогоПроцесса, Объект.КлючФоновогоЗадания, ТекущийОбъект.мИмяСобытияВЖурналеРегистрации);
КонецПроцедуры

&НаСервере
//
//
Функция ПолучитьСтруктуруПараметровТекущейОбработки(ИнформационнаяБаза = Неопределено)
	Объект.АдресВременногоХранилищаДляВнутреннегоОбмена = ПоместитьВоВременноеХранилище("");
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("РежимУдаления", Объект.РежимУдаления);
	ПараметрыОбработки.Вставить("Имя", Объект.Имя);	
	ПараметрыОбработки.Вставить("ИмяСтарое", Объект.ИмяСтарое);	
	ПараметрыОбработки.Вставить("ПолноеИмя", Объект.ПолноеИмя);	
	ПараметрыОбработки.Вставить("АутентификацияСтандартная", Объект.АутентификацияСтандартная);	
	ПараметрыОбработки.Вставить("Пароль", Объект.Пароль);	
	ПараметрыОбработки.Вставить("ПоказыватьВСпискеВыбора", Объект.ПоказыватьВСпискеВыбора);	
	ПараметрыОбработки.Вставить("АутентификацияОС", Объект.АутентификацияОС);	
	ПараметрыОбработки.Вставить("ПользовательОС", Объект.ПользовательОС);	
	ПараметрыОбработки.Вставить("ПарольИзменен", Объект.ПарольИзменен);	
	ПараметрыОбработки.Вставить("РежимЗапуска", Объект.РежимЗапуска);	
	ПараметрыОбработки.Вставить("ДобавлятьПользователяПриОтсутствииВБазе", Объект.ДобавлятьПользователяПриОтсутствииВБазе);	
	ПараметрыОбработки.Вставить("ПарольИзменен", Объект.ПарольИзменен);	
	ПараметрыОбработки.Вставить("ПарольИзменен", Объект.ПарольИзменен);	
	локТаблицаОбработки = Объект.ТаблицаОбработки.Выгрузить();
	Если ИнформационнаяБаза <> Неопределено Тогда
		локТаблицаОбработки.Очистить();
		НоваяСтрока = локТаблицаОбработки.Добавить();
		НоваяСтрока.ИнформационнаяБаза = ИнформационнаяБаза;
	КонецЕсли;	
	ПараметрыОбработки.Вставить("ТаблицаОбработки", локТаблицаОбработки);	
	ПараметрыОбработки.Вставить("ДоступныеПользователи", Объект.ДоступныеПользователи.Выгрузить());
	ПараметрыОбработки.Вставить("РолиПользователей", Объект.РолиПользователей.Выгрузить());
	ПараметрыОбработки.Вставить("ДоступныеРоли", Объект.ДоступныеРоли.Выгрузить());
	ПараметрыОбработки.Вставить("ДоступныеИнтерфейсы", Объект.ДоступныеИнтерфейсы.Выгрузить());
	ПараметрыОбработки.Вставить("ДоступныеЯзыки", Объект.ДоступныеЯзыки.Выгрузить());
	ПараметрыОбработки.Вставить("ВыполнятьВФоне", Ложь);	
	ПараметрыОбработки.Вставить("КлючФоновогоЗадания", Объект.КлючФоновогоЗадания);		
	ПараметрыОбработки.Вставить("АдресВременногоХранилищаДляВнутреннегоОбмена", Объект.АдресВременногоХранилищаДляВнутреннегоОбмена);	
	ПараметрыОбработки.Вставить("Обработчики", Объект.Обработчики.Выгрузить());	
	Возврат ПараметрыОбработки;
КонецФункции

&НаКлиенте
//
//
Процедура ВыполнитьКоманду(Команда)
	Если ЗначениеЗаполнено(Команда) Тогда
		Если ФоновыеПроцессыМенеджерСервер.ОпределитьВыполнитьКомандуНаСервере(Команда) Тогда
			ВыполнитьКомандуСервер(Команда);
		Иначе 
			Попытка				
				Выполнить(Команда);
			Исключение
				ОбщегоНазначенияСервер.ВывестиСообщение(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
//
//
Процедура ВыполнитьКомандуСервер(Команда)
	Попытка				
		Выполнить(СтрЗаменить(Команда, ФоновыеПроцессыМенеджерСервер.ПрефиксИсполненияКомандыНаСервере(), ""));
	Исключение
		ОбщегоНазначенияСервер.ВывестиСообщение(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
//
//
Процедура АнализМетаданныхИнформационныхБаз()	
	Если Объект.ВыполнятьВФоне Тогда
		Результат = ФоновыеПроцессыМенеджерСервер.ПроверкаАктивностиФоновогоЗаданияСервер(Объект.КлючФоновогоЗадания);
		
		ЗаданиеАктиво = Ложь;		
		Для Каждого ТекущееЗначениеРезультат Из Результат Цикл
			ЗаданиеАктиво = ЗаданиеАктиво ИЛИ ТекущееЗначениеРезультат.Активно;
		КонецЦикла;
		
		Если ЗаданиеАктиво Тогда
			ОбщегоНазначенияСервер.ВывестиСообщение("Процесс загрузки обновлений уже запущен");
		Иначе			
			ЗапуститьФоновоеЗаданиеАнализМетаданныхИнформационныхБаз();
			ПодключитьОбработчикОжидания("ПроверкаАктивностиФоновогоЗаданияКлиент", 2, Истина);			
		КонецЕсли;
	Иначе		
		АнализМетаданныхИнформационныхБазСервер();
	КонецЕсли;
	УправлениеЭлементамиФормы();	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ПроверкаАктивностиФоновогоЗаданияКлиент() Экспорт
	КомандаДляВыполненияНаКлиенте = Неопределено;
	Активность = ПроверкаАктивностиФоновогоЗаданияСервер(КомандаДляВыполненияНаКлиенте);	
	ФоновыеПроцессыКлиент.ВыполнитьКоманду(КомандаДляВыполненияНаКлиенте, ЭтаФорма, Объект);
	Если Активность Тогда
		ПодключитьОбработчикОжидания("ПроверкаАктивностиФоновогоЗаданияКлиент", 2, Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
//
//
Функция ПроверкаАктивностиФоновогоЗаданияСервер(КомандаДляВыполненияНаКлиенте = Неопределено) Экспорт
	Возврат ФоновыеПроцессыСервер.ПроверкаАктивностиФоновогоЗадания(ЭтаФорма, Объект, КомандаДляВыполненияНаКлиенте);
КонецФункции

&НаСервере
//
//
Процедура ЗапуститьФоновоеЗаданиеАнализМетаданныхИнформационныхБаз()	
	Элементы.ИндикаторПроцесса.МинимальноеЗначение = 0;	
	Элементы.ИндикаторПроцесса.МаксимальноеЗначение = Объект.ТаблицаОбработки.Количество();
	Объект.ИндикаторПроцесса = 0;	
		
	ПараметрыФоновогоПроцесса = Новый Массив;
	ПараметрыФоновогоПроцесса.Добавить(ПолучитьСтруктуруПараметровТекущейОбработки());		
	Объект.КлючФоновогоЗадания = Новый УникальныйИдентификатор;
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ФоновыеЗадания.Выполнить("ФоновыеПроцессыСервер.ФоновыйПроцессОбработкиПоАнализМетаданныхИнформационныхБаз", ПараметрыФоновогоПроцесса, Объект.КлючФоновогоЗадания, ТекущийОбъект.мИмяСобытияВЖурналеРегистрации);
КонецПроцедуры

&НаСервере
//
//
Процедура АнализМетаданныхИнформационныхБазСервер()	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.АнализМетаданныхИнформационныхБаз();
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
//
//
Процедура Подбор(Команда)	
	
	ОткрытьФорму("Справочник.ИнформационныеБазы.ФормаВыбора", Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор", Ложь, Истина), ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ДобавитьЗначениеВТаблицу(Таблица, ВыбранноеЗначение)
	Если Таблица.НайтиСтроки(Новый Структура("ИнформационнаяБаза", ВыбранноеЗначение)).Количество() = 0 Тогда
		НоваяСтрокаТаблицаОбработки = Таблица.Добавить();
		НоваяСтрокаТаблицаОбработки.ИнформационнаяБаза = ВыбранноеЗначение;
		УправлениеЭлементамиФормы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
//
//
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	ТекущаяСтраницаИмя = СокрЛП(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя);
	ВыбранноеЗначениеТип = ТипЗнч(ВыбранноеЗначение);
	Если ВыбранноеЗначениеТип = Тип("Массив") Тогда
		Для Каждого ТекущееЗначениеМассива ИЗ ВыбранноеЗначение Цикл
			ОбработкаВыбора(ТекущееЗначениеМассива, ИсточникВыбора);
		КонецЦикла;
	ИначеЕсли ВыбранноеЗначениеТип = Тип("СправочникСсылка.ИнформационныеБазы") Тогда
		Если ТекущаяСтраницаИмя = "ГруппаНачало" Тогда
			ДобавитьЗначениеВТаблицу(Объект.ТаблицаОбработки, ВыбранноеЗначение);
		ИначеЕсли ТекущаяСтраницаИмя = "ГруппаКарточкаПользователя" Тогда
			Объект.ИнформационнаяБаза = ВыбранноеЗначение;
			УправлениеЭлементамиФормы();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
//
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивОбработки = ЭтаФорма.Параметры.Свойство("МассивОбработки");
	Если МассивОбработки <> Ложь Тогда
		Для Каждого ЭлементМассиваМассивОбработки Из ЭтаФорма.Параметры.МассивОбработки Цикл 
			НоваяСтрокаТаблицаОбработки = Объект.ТаблицаОбработки.Добавить();
			НоваяСтрокаТаблицаОбработки.ИнформационнаяБаза = ЭлементМассиваМассивОбработки;
		КонецЦикла;
	КонецЕсли;
	
	ЭтаФорма.РежимОбработки = Элементы.РежимОбработки.СписокВыбора.Получить(0).Значение;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНачало;
	Элементы.ВыполнятьВФоне.Доступность = ОбщегоНазначенияСервер.ДопустимоИспользованиеФайловыхЗаданий();
	Объект.ВыполнятьВФоне = Элементы.ВыполнятьВФоне.Доступность;	
	Объект.РежимУдаления = Ложь;
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура Далее(Команда)
	
	ТекущаяСтраницаИмя = СокрЛП(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя);
	
	Если ТекущаяСтраницаИмя = "ГруппаНачало" Тогда
		
		ПараметрыОповещения = Новый Структура("ПрерыватьВыполнениеПриОтказе", Ложь);
		
		ТекстСообщения = "Обновить данные метаданных?";
		
		Если Объект.ДоступныеПользователи.Количество() = 0 Тогда
			
			ТекстСообщения = "Будет выполнен анализ метаданных и списка пользователей выбранных информационных баз." + Символы.ПС 
			+ "Операция может занять продолжительное время. Продолжить?";
			
			ПараметрыОповещения.ПрерыватьВыполнениеПриОтказе = Истина;
			
		КонецЕсли;		
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ДалееОписаниеОповещенияВопросОбновитьМетаданные", ЭтаФорма, ПараметрыОповещения), ТекстСообщения, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли ТекущаяСтраницаИмя = "ГруппаКарточкаПользователя" Тогда
		
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ДалееОписаниеОповещенияВопросОбновитьМетаданные(РезультатОповещения, ПараметрыОповещения) Экспорт
	
	Если РезультатОповещения = КодВозвратаДиалога.Да Тогда
		АнализМетаданныхИнформационныхБаз();
	ИначеЕсли ПараметрыОповещения.ПрерыватьВыполнениеПриОтказе Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьВФормуДанныеПользователя(Объект.ИнформационнаяБаза, Объект.ИмяСтарое);				
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКарточкаПользователя;	
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

	
&НаКлиенте
//
//
Процедура Назад(Команда)
	Если СокрЛП(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя) = "ГруппаНачало" Тогда
		//
	ИначеЕсли СокрЛП(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя) = "ГруппаКарточкаПользователя" Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНачало;	
	КонецЕсли;	
	УправлениеЭлементамиФормы();
КонецПроцедуры

&НаКлиенте
//
//
Процедура УправлениеЭлементамиФормы() Экспорт
	
	Элементы.Далее.Доступность = Истина;
	Элементы.Назад.Доступность = Истина;
	Элементы.ИзменитьПользователяВТекущейБазе.Доступность = ЗначениеЗаполнено(Объект.ИнформационнаяБаза);
	Элементы.ИндикаторПроцесса.Заголовок = "Индикатор процесса";
	Элементы.ИндикаторПроцесса.Видимость = ЗначениеЗаполнено(Объект.КлючФоновогоЗадания);
	
	ИмяТекущейСтраницы = СокрЛП(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя);
	Если ИмяТекущейСтраницы = "ГруппаНачало" Тогда
		Элементы.Назад.Доступность = Ложь;
		Если Объект.ТаблицаОбработки.Количество() = 0 Тогда
			Элементы.Далее.Доступность = Ложь;
		КонецЕсли;
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаКарточкаПользователя" Тогда
		Элементы.Далее.Доступность = Ложь;
	КонецЕсли;
	
	ОбъектРежимУдаления  = Объект.РежимУдаления;			
	Элементы.ГруппаСозданиеМодификация.Доступность = НЕ ОбъектРежимУдаления;
	Элементы.ДобавлятьПользователяПриОтсутствииВБазе.Доступность = НЕ ОбъектРежимУдаления;
	Элементы.ИмяСтарое.Доступность = НЕ ОбъектРежимУдаления;
	Элементы.ГруппаРоли.Доступность = НЕ ОбъектРежимУдаления;
	Элементы.ГруппаЯзыки.Доступность = НЕ ОбъектРежимУдаления;
	Элементы.ГруппаИнтерфейсы.Доступность = НЕ ОбъектРежимУдаления;
	
	ЭтаФорма.Доступность = НЕ ЗначениеЗаполнено(Объект.КлючФоновогоЗадания);
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ТаблицаОбработкиПриИзменении(Элемент)
	УправлениеЭлементамиФормы();
КонецПроцедуры

&НаКлиенте
//
//
Процедура УбратьПометки(ТаблицаЗначений, НомерСтрокиИсключения = -1)
	НомерСтроки = 0;
	Для Каждого ТекущаяСтрока Из ТаблицаЗначений Цикл
		НомерСтроки = НомерСтроки + 1;
		Если НомерСтрокиИсключения <> НомерСтроки Тогда
			ТекущаяСтрока.Установить= Ложь;
		КонецЕсли;		
	КонецЦикла	
КонецПроцедуры

&НаСервере
//
//
Процедура УбратьПометкиСервер(ТаблицаЗначений, НомерСтрокиИсключения = -1)
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.УбратьПометкиСервер(ТаблицаЗначений, НомерСтрокиИсключения);	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ДоступныеИнтерфейсыУстановитьПриИзменении(Элемент)
	УбратьПометки(Объект.ДоступныеИнтерфейсы, Элементы.ДоступныеИнтерфейсы.ТекущиеДанные.НомерСтроки);
КонецПроцедуры

&НаКлиенте
//
//
Процедура ДоступныеЯзыкиУстановитьПриИзменении(Элемент)
	УбратьПометки(Объект.ДоступныеЯзыки, Элементы.ДоступныеЯзыки.ТекущиеДанные.НомерСтроки);
КонецПроцедуры

&НаСервере
//
//
Функция ПолучитьАдресТаблицыДоступныхПользователей()
	Возврат ПоместитьВоВременноеХранилище(Объект.ДоступныеПользователи.Выгрузить());
КонецФункции

&НаКлиенте
//
//
Процедура ВыбратьСуществующего(Команда)		
	
	ОткрытьФорму("Обработка.УправлениеПользователямиВнешнихИнформационныхБаз.Форма.ФормаВыборПользователя", Новый Структура("АдресТаблицыДоступныхПользователей", ПолучитьАдресТаблицыДоступныхПользователей()), ЭтаФорма,,,,
		Новый ОписаниеОповещения("ВыбратьСуществующегоОписаниеОповещения", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
//
//
Процедура ВыбратьСуществующегоОписаниеОповещения(РезультатОповещения, ПараметрыОповещения) Экспорт		
	
	Если РезультатОповещения <> Неопределено Тогда 
		Если РезультатОповещения.Выбран Тогда
			ЗагрузитьВФормуДанныеПользователя(РезультатОповещения.ИнформационнаяБаза, РезультатОповещения.ИмяСтарое);			
		КонецЕсли;
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ЗагрузитьВФормуДанныеПользователя(ИнформационнаяБаза, Имя)
	ОчиститьТекущиеДанныеПользователя();
	МассивСтрокДоступныеПользователи = Объект.ДоступныеПользователи.НайтиСтроки(Новый Структура("ИнформационнаяБаза, ИмяСтарое", ИнформационнаяБаза, Имя));	
	Если МассивСтрокДоступныеПользователи.Количество() > 0 Тогда 
		СтрокаДоступныеПользователи = МассивСтрокДоступныеПользователи[0];
		
		ЗаполнитьЗначенияСвойств(Объект, СтрокаДоступныеПользователи);				
		Объект.ИмяСтарое = Объект.Имя;
		
		УбратьПометки(Объект.ДоступныеРоли, -1);				
		МассивСтрокРолейПользователей = Объект.РолиПользователей.НайтиСтроки(Новый Структура("ИмяПользователя, ИнформационнаяБаза", СтрокаДоступныеПользователи.ИмяСтарое, ИнформационнаяБаза));
		Для Каждого ТекущаяСтрокаМассивСтрокРолейПользователей из МассивСтрокРолейПользователей Цикл
			НайденнаяСтрокаДоступныеРоли = Объект.ДоступныеРоли.НайтиСтроки(Новый Структура("Идентификатор", ТекущаяСтрокаМассивСтрокРолейПользователей.Идентификатор));
			Если НайденнаяСтрокаДоступныеРоли.Количество() > 0 Тогда
				НайденнаяСтрокаДоступныеРоли[0].Установить = Истина;
			КонецЕсли;			
		КонецЦикла;
		
		НайденнаяСтрокаДоступныеИнтерфейсы = Объект.ДоступныеИнтерфейсы.НайтиСтроки(Новый Структура("Идентификатор", СтрокаДоступныеПользователи.Интерфейс));
		Если НайденнаяСтрокаДоступныеИнтерфейсы.Количество() > 0 Тогда
			НайденнаяСтрокаДоступныеИнтерфейсы[0].Установить = Истина;
			УбратьПометки(Объект.ДоступныеИнтерфейсы, НайденнаяСтрокаДоступныеИнтерфейсы[0].НомерСтроки);
		КонецЕсли;
		
		НайденнаяСтрокаДоступныеЯзыки = Объект.ДоступныеЯзыки.НайтиСтроки(Новый Структура("Идентификатор", СтрокаДоступныеПользователи.Язык));
		Если НайденнаяСтрокаДоступныеЯзыки.Количество() > 0 Тогда
			НайденнаяСтрокаДоступныеЯзыки[0].Установить = Истина;
			УбратьПометки(Объект.ДоступныеЯзыки, НайденнаяСтрокаДоступныеЯзыки[0].НомерСтроки);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
//
//
Процедура ОчиститьТекущиеДанныеПользователя()
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.ОчиститьТекущиеДанныеПользователя();
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
//
//
Процедура ИмяПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.ПолноеИмя) Тогда
		Объект.ПолноеИмя = Объект.Имя;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ИмяСтарое) Тогда
		Объект.ИмяСтарое = Объект.Имя;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
//
//
Процедура ПарольПриИзменении(Элемент)
	Объект.ПарольИзменен = Истина;
КонецПроцедуры

&НаКлиенте
//
//
Процедура ПриОткрытии(Отказ)
	
	Если Объект.ТаблицаОбработки.Количество() > 0 Тогда
		Далее(Неопределено);
	Иначе 
		УправлениеЭлементамиФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//
//
Процедура ОчиститьСведенияПользователя(Команда)
	ОчиститьТекущиеДанныеПользователя()
КонецПроцедуры

&НаКлиенте
//
//
Процедура ИнформационнаяБазаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтраницаИмя = СокрЛП(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя);
	СтандартнаяОбработка = Ложь;
	МассивОтбораПоСсылке = Новый Массив;
	Для Каждого ТекущаяСтрокаТаблицаОбработки ИЗ Объект.ТаблицаОбработки Цикл
		МассивОтбораПоСсылке.Добавить(ТекущаяСтрокаТаблицаОбработки.ИнформационнаяБаза);
	КонецЦикла;
	
	ОтборКомпоновкиДанных = Новый ОтборКомпоновкиДанных;
	Если ТекущаяСтраницаИмя = "ГруппаНачало" Тогда
		// без отбора
	ИначеЕсли ТекущаяСтраницаИмя = "ГруппаКарточкаПользователя" Тогда
		НовыйЭлементОтбора = ОтборКомпоновкиДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		НовыйЭлементОтбора.ПравоеЗначение = МассивОтбораПоСсылке;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ИнформационныеБазы.ФормаВыбора", Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор, ОтборКомпоновкиДанных", Истина, Ложь,
	ОтборКомпоновкиДанных), ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	//ФормаВыбораИнформационныхБаз = ПолучитьФорму("Справочник.ИнформационныеБазы.ФормаВыбора", Новый Структура("ЗакрыватьПриВыборе", Истина), ЭтаФорма);
	//НовыйЭлементОтбора = Новый ФормаВыбораИнформационныхБаз.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	//НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	//НовыйЭлементОтбора.ПравоеЗначение = МассивОтбораПоСсылке;
	//ФормаВыбораИнформационныхБаз.Открыть();		
КонецПроцедуры

&НаКлиенте
//
//
Процедура РежимОбработкиПриИзменении(Элемент)
	Объект.РежимУдаления = (НЕ ЭтаФорма.РежимОбработки = "0");
	УправлениеЭлементамиФормы();
	Если Объект.РежимУдаления Тогда
		ПоказатьПредупреждение(, "Обратите внимание, что удаление учетных записей платформы может быть необратимо!",, "Внимание")
	КонецЕсли;
КонецПроцедуры
