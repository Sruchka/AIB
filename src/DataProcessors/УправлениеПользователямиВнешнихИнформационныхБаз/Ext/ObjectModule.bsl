Перем мИмяСобытияВЖурналеРегистрации Экспорт;

&НаСервере
//
//
Процедура ИзменитьПользователяВБазе(пИнформационнаяБаза) Экспорт
	ПараметрыОбработки = ЗадачиНаСервере.ПолучитьСтруктуруПараметровОбработки(пИнформационнаяБаза);
	ПараметрыОбработки.Обработчик = ЭтотОбъект.Обработчики.Выгрузить().ВыгрузитьКолонку("Обработчик");
	
	ИнформационнаяБазаСтруктура = ОбщегоНазначенияСервер.ПолучитьДанныеПоОбъекту(пИнформационнаяБаза);
	
	ПараметрыОбработки.ВидОбработки = Перечисления.ВидыГрупповойОбработки.ВыполнениеОбработчика;
	ЖурналЛоговСервер.СформироватьДанныеФайлаЛога(ПараметрыОбработки);		
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ИмяСтарое) Тогда
		ЭтотОбъект.ИмяСтарое = ЭтотОбъект.Имя;
	КонецЕсли;	
	
	ИнформационнаяБаза_ОбъектПодключения = ЗадачиНаСервере.СоздатьОбъектПодключения(ПараметрыОбработки);
	Если ИнформационнаяБаза_ОбъектПодключения = Неопределено Тогда		
		ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
		ОбщегоНазначенияСервер.ВывестиСообщение(ПараметрыОбработки.ОписаниеОшибки);
		ЖурналЛоговСервер.ЗаписатьВАрхивЛогов(ПараметрыОбработки, Ложь);
		Возврат;
	КонецЕсли; 	
	
	Если ЭтотОбъект.РежимУдаления Тогда
		
		УдаляемыйПользователь = ИнформационнаяБаза_ОбъектПодключения.ПользователиИнформационнойБазы.НайтиПоИмени(ЭтотОбъект.Имя);
		Если УдаляемыйПользователь = Неопределено Тогда			
			
			ПараметрыОбработки.ОписаниеОшибки = "В информационной базе <" + СокрЛП(пИнформационнаяБаза) + "> пользователь <" + ЭтотОбъект.Имя + "> не найден.";
			ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
			ОбщегоНазначенияСервер.ВывестиСообщение(ПараметрыОбработки.ОписаниеОшибки);
			Возврат;
			
		КонецЕсли;
		
		ИсходнаяТаблицаДоступныеПользователи = ЭтотОбъект.ДоступныеПользователи.Выгрузить();
		
		флВыполненоУспешно = Истина;
		Попытка
			
			МассивСтрокДоступныеПользователи = ЭтотОбъект.ДоступныеПользователи.НайтиСтроки(Новый Структура("ИмяСтарое, ИнформационнаяБаза", ЭтотОбъект.ИмяСтарое, пИнформационнаяБаза));		
			Если МассивСтрокДоступныеПользователи.Количество() > 0 Тогда
				МассивСтрокДоступныеПользователи[0].СтатусМодификации = Перечисления.СтатусыМодификации.Удален;
			Иначе
				ДобавитьСтрокуПользователяВТаблицуОбработки(пИнформационнаяБаза, ИнформационнаяБаза_ОбъектПодключения, УдаляемыйПользователь, Перечисления.СтатусыМодификации.Удален);
			КонецЕсли;
			
			УдаляемыйПользователь.Удалить();
			
			ПараметрыОбработки.ОписаниеОшибки = "В информационной базе <" + СокрЛП(пИнформационнаяБаза) + "> удален пользователь <" + ЭтотОбъект.Имя + ">.";
			ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
			ОбщегоНазначенияСервер.ВывестиСообщение(ПараметрыОбработки.ОписаниеОшибки); 			
			
		Исключение
			
			ЭтотОбъект.ДоступныеПользователи.Загрузить(ИсходнаяТаблицаДоступныеПользователи);
			
			флВыполненоУспешно = Ложь;
			ПараметрыОбработки.ОписаниеОшибки = "Ошибка при записи пользователя ИБ в базу <" + СокрЛП(пИнформационнаяБаза) + ">";
			ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
			ОбщегоНазначенияСервер.ВывестиСообщение(ПараметрыОбработки.ОписаниеОшибки);
			
		КонецПопытки;
		
	Иначе 
		
		флПерезаписывать = Ложь;
		НовыйПользователь = ИнформационнаяБаза_ОбъектПодключения.ПользователиИнформационнойБазы.НайтиПоИмени(ЭтотОбъект.ИмяСтарое);
		Если НовыйПользователь = Неопределено Тогда			
			Если ЭтотОбъект.ДобавлятьПользователяПриОтсутствииВБазе Тогда
				
				НовыйПользователь =  ИнформационнаяБаза_ОбъектПодключения.ПользователиИнформационнойБазы.СоздатьПользователя();
				флПерезаписывать = Истина;			
				
				ПараметрыОбработки.ОписаниеОшибки = "В информационной базе <" + СокрЛП(пИнформационнаяБаза) + "> создан пользователь <" + ЭтотОбъект.ИмяСтарое + ">.";
				ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
				ОбщегоНазначенияСервер.ВывестиСообщение(ПараметрыОбработки.ОписаниеОшибки);
				
			Иначе
				
				ПараметрыОбработки.ОписаниеОшибки = "В информационной базе <" + СокрЛП(пИнформационнаяБаза) + "> пользователь <" + ЭтотОбъект.ИмяСтарое + "> не найден.";			 
				ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
				ОбщегоНазначенияСервер.ВывестиСообщение(ПараметрыОбработки.ОписаниеОшибки);
				ЖурналЛоговСервер.ЗаписатьВАрхивЛогов(ПараметрыОбработки, Ложь);			
				Возврат;                                                        			
				
			КонецЕсли;
		Иначе
			
			ПараметрыОбработки.ОписаниеОшибки = "В информационной базе <" + СокрЛП(пИнформационнаяБаза) + "> обновлены параметры по пользователю <" + ЭтотОбъект.ИмяСтарое + ">.";
			ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
			ОбщегоНазначенияСервер.ВывестиСообщение(ПараметрыОбработки.ОписаниеОшибки);
			
		КонецЕсли;	
		
		флПерезаписывать = флПерезаписывать ИЛИ (НовыйПользователь.Имя <> ЭтотОбъект.Имя);
		НовыйПользователь.Имя = ЭтотОбъект.Имя;
		
		флПерезаписывать = флПерезаписывать ИЛИ (НовыйПользователь.ПолноеИмя <> ЭтотОбъект.ПолноеИмя);
		НовыйПользователь.ПолноеИмя = ЭтотОбъект.ПолноеИмя;
		
		флПерезаписывать = флПерезаписывать ИЛИ (НовыйПользователь.АутентификацияСтандартная <> ЭтотОбъект.АутентификацияСтандартная);
		НовыйПользователь.АутентификацияСтандартная = ЭтотОбъект.АутентификацияСтандартная;
		
		флПерезаписывать = флПерезаписывать ИЛИ (НовыйПользователь.ПоказыватьВСпискеВыбора <> ЭтотОбъект.ПоказыватьВСпискеВыбора);
		НовыйПользователь.ПоказыватьВСпискеВыбора = ЭтотОбъект.ПоказыватьВСпискеВыбора;
		
		НовыйПользователь.ЗапрещеноИзменятьПароль = Истина;			
		
		Если ЭтотОбъект.АутентификацияСтандартная И ЭтотОбъект.ПарольИзменен Тогда				
			
			флПерезаписывать = Истина;
			НовыйПользователь.Пароль = ИнформационнаяБаза_ОбъектПодключения.String(СокрЛП(ЭтотОбъект.Пароль));		
			
		КонецЕсли;
		
		флПерезаписывать = флПерезаписывать ИЛИ (НовыйПользователь.АутентификацияОС <> ЭтотОбъект.АутентификацияОС);
		НовыйПользователь.АутентификацияОС = ЭтотОбъект.АутентификацияОС;
		
		Если ЭтотОбъект.АутентификацияОС Тогда		
			
			флПерезаписывать = флПерезаписывать ИЛИ (НовыйПользователь.ПользовательОС <> ЭтотОбъект.ПользовательОС);
			НовыйПользователь.ПользовательОС = ЭтотОбъект.ПользовательОС;
			
		КонецЕсли;
		
		Для Каждого ТекущаяСтрокаДоступныеРоли Из ЭтотОбъект.ДоступныеРоли Цикл
			УстанавливаемаяРоль = ИнформационнаяБаза_ОбъектПодключения.Метаданные.Роли.Найти(ТекущаяСтрокаДоступныеРоли.Идентификатор);
			Если УстанавливаемаяРоль <> Неопределено Тогда
				РольУжеУстановлена = НовыйПользователь.Роли.Содержит(УстанавливаемаяРоль);
				Если ТекущаяСтрокаДоступныеРоли.Установить Тогда			
					Если НЕ РольУжеУстановлена Тогда
						флПерезаписывать = Истина;
						НовыйПользователь.Роли.Добавить(УстанавливаемаяРоль);
					КонецЕсли;
				Иначе
					Если РольУжеУстановлена Тогда
						флПерезаписывать = Истина;
						НовыйПользователь.Роли.Удалить(УстанавливаемаяРоль);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		НайденнаяСтрокаДоступныеИнтерфейсы = ЭтотОбъект.ДоступныеИнтерфейсы.НайтиСтроки(Новый Структура("Установить", Истина));
		Если НайденнаяСтрокаДоступныеИнтерфейсы.Количество() > 0 Тогда
			
			УстанавливаемыйИнтерфейс = ИнформационнаяБаза_ОбъектПодключения.Метаданные.Интерфейсы.Найти(НайденнаяСтрокаДоступныеИнтерфейсы[0].Имя);
			
			флПерезаписывать = флПерезаписывать ИЛИ (НовыйПользователь.ОсновнойИнтерфейс <> УстанавливаемыйИнтерфейс);
			НовыйПользователь.ОсновнойИнтерфейс = УстанавливаемыйИнтерфейс;
			
		Иначе
			
			флПерезаписывать = флПерезаписывать ИЛИ ЗначениеЗаполнено(НовыйПользователь.ОсновнойИнтерфейс);
			НовыйПользователь.ОсновнойИнтерфейс = Неопределено;
			
		КонецЕсли;
		
		НайденнаяСтрокаДоступныеЯзыки = ЭтотОбъект.ДоступныеЯзыки.НайтиСтроки(Новый Структура("Установить", Истина));
		Если НайденнаяСтрокаДоступныеЯзыки.Количество() > 0 Тогда			
			
			УстанавливаемыйЯзык = ИнформационнаяБаза_ОбъектПодключения.Метаданные.Языки.Найти(НайденнаяСтрокаДоступныеЯзыки[0].Имя);
			флПерезаписывать = флПерезаписывать ИЛИ (НовыйПользователь.Язык <> УстанавливаемыйЯзык);
			НовыйПользователь.Язык = УстанавливаемыйЯзык;
			
		Иначе
			
			флПерезаписывать = флПерезаписывать ИЛИ ЗначениеЗаполнено(НовыйПользователь.Язык);
			НовыйПользователь.Язык = Неопределено;
			
		КонецЕсли;
		
		лРежимЗапуска = Неопределено;
		Если ЭтотОбъект.РежимЗапуска = 0 Тогда
			
			лРежимЗапуска = ИнформационнаяБаза_ОбъектПодключения.РежимЗапускаКлиентскогоПриложения.Авто;
			
		ИначеЕсли ЭтотОбъект.РежимЗапуска = 1 Тогда
			
			лРежимЗапуска = ИнформационнаяБаза_ОбъектПодключения.РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение;
			
		ИначеЕсли ЭтотОбъект.РежимЗапуска = 2 Тогда
			
			лРежимЗапуска = ИнформационнаяБаза_ОбъектПодключения.РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение;
			
		КонецЕсли;
		
		флПерезаписывать = флПерезаписывать ИЛИ (НовыйПользователь.РежимЗапуска <> лРежимЗапуска);
		НовыйПользователь.РежимЗапуска = лРежимЗапуска;		
		
		флВыполненоУспешно = Истина;
		Попытка
			
			Если флПерезаписывать Тогда
				НовыйПользователь.Записать();					
			КонецЕсли;				
			
			МассивСтрокДоступныеПользователи = ЭтотОбъект.ДоступныеПользователи.НайтиСтроки(Новый Структура("ИмяСтарое, ИнформационнаяБаза", ЭтотОбъект.ИмяСтарое, пИнформационнаяБаза));		
			Если МассивСтрокДоступныеПользователи.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(МассивСтрокДоступныеПользователи[0], ЭтотОбъект);			
				МассивСтрокДоступныеПользователи[0].ИнформационнаяБаза = пИнформационнаяБаза;
				МассивСтрокДоступныеПользователи[0].СтатусМодификации = Перечисления.СтатусыМодификации.Изменен;
			Иначе
				ДобавитьСтрокуПользователяВТаблицуОбработки(пИнформационнаяБаза, ИнформационнаяБаза_ОбъектПодключения, НовыйПользователь, Перечисления.СтатусыМодификации.Добавлен);
			КонецЕсли;		
			
		Исключение
			
			флВыполненоУспешно = Ложь;
			ПараметрыОбработки.ОписаниеОшибки = "Ошибка при записи пользователя ИБ в базу <" + СокрЛП(пИнформационнаяБаза) + ">";
			ЖурналЛоговСервер.ВывестиСообщениеВЛог(ПараметрыОбработки);
			ОбщегоНазначенияСервер.ВывестиСообщение(ПараметрыОбработки.ОписаниеОшибки);
			
		КонецПопытки;
		
		Если флПерезаписывать И флВыполненоУспешно И ЗначениеЗаполнено(ПараметрыОбработки.Обработчик) Тогда
			
			ПараметрыОбработки.ОписаниеОшибки = "";		
			флВыполненоУспешно = флВыполненоУспешно И ЗадачиНаСервере.ВыполнитьЗапускОбработчика(ПараметрыОбработки, ИнформационнаяБаза_ОбъектПодключения);
			Если НЕ флВыполненоУспешно Тогда			
				ОбщегоНазначенияСервер.ВывестиСообщение(ПараметрыОбработки.ОписаниеОшибки);
			КонецЕсли;		
			
		КонецЕсли;
		
	КонецЕсли;
	
	СортироватьТаблицуДоступныхПользователей();
	
	ЖурналЛоговСервер.ЗаписатьВАрхивЛогов(ПараметрыОбработки, флВыполненоУспешно);
	
КонецПроцедуры

&НаСервере
//
//
Процедура АнализМетаданныхИнформационныхБаз() Экспорт	
	ЭтотОбъект.ДоступныеПользователи.Очистить();
	ЭтотОбъект.ДоступныеИнтерфейсы.Очистить();
	ЭтотОбъект.ДоступныеРоли.Очистить();
	ЭтотОбъект.ДоступныеЯзыки.Очистить();
	ЭтотОбъект.РолиПользователей.Очистить();
	ОчиститьТекущиеДанныеПользователя();	
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.ТаблицаОбработки Цикл		
		ПараметрыОбработки = ЗадачиНаСервере.ПолучитьСтруктуруПараметровОбработки(СтрокаТаблицы.ИнформационнаяБаза);		
		ИнформационнаяБаза_ОбъектПодключения = ЗадачиНаСервере.СоздатьОбъектПодключения(ПараметрыОбработки);
		Если ИнформационнаяБаза_ОбъектПодключения = Неопределено Тогда
			ОбщегоНазначенияСервер.ВывестиСообщение(ПараметрыОбработки.ОписаниеОшибки);
			Продолжить;
		КонецЕсли;		
		Метаданные_ОбъектПодключения = ИнформационнаяБаза_ОбъектПодключения.Метаданные;		
		ЗагрузитьСведенияОПользователях(СтрокаТаблицы.ИнформационнаяБаза, ИнформационнаяБаза_ОбъектПодключения);
		ЗагрузитьСведенияВТаблицу(ИнформационнаяБаза_ОбъектПодключения, ЭтотОбъект.ДоступныеРоли, Метаданные_ОбъектПодключения.Роли);
		ЗагрузитьСведенияВТаблицу(ИнформационнаяБаза_ОбъектПодключения, ЭтотОбъект.ДоступныеИнтерфейсы, Метаданные_ОбъектПодключения.Интерфейсы);
		ЗагрузитьСведенияВТаблицу(ИнформационнаяБаза_ОбъектПодключения, ЭтотОбъект.ДоступныеЯзыки, Метаданные_ОбъектПодключения.Языки);				
	КонецЦикла;
КонецПроцедуры

&НаСервере
//
//
Процедура ЗагрузитьСведенияВТаблицу(ИнформационнаяБаза_ОбъектПодключения, ТаблицаЗагрузки, КоллекцияЭлементов) Экспорт	
	ПараметрыОтбораРолей = Новый Структура("Идентификатор", "");	
	Для Каждого ТекущийЭлементКоллекции Из КоллекцияЭлементов Цикл		
		ПараметрыОтбораРолей.Идентификатор = ТекущийЭлементКоллекции.Имя;
		Если ТаблицаЗагрузки.НайтиСтроки(ПараметрыОтбораРолей).Количество() = 0 Тогда
			НоваяСтрока = ТаблицаЗагрузки.Добавить();
			НоваяСтрока.Имя = ТекущийЭлементКоллекции.Синоним;
			НоваяСтрока.Идентификатор = ТекущийЭлементКоллекции.Имя;
		КонецЕсли;
	КонецЦикла;		
КонецПроцедуры
&НаСервере
//
//
Процедура ЗагрузитьСведенияОПользователях(ИнформационнаяБаза, ИнформационнаяБаза_ОбъектПодключения) Экспорт
	ПользователиИБ_ОбъектПодключения = ИнформационнаяБаза_ОбъектПодключения.ПользователиИнформационнойБазы;	
	МассивПользователей_ОбъектПодключения = ПользователиИБ_ОбъектПодключения.ПолучитьПользователей();		
	Для Каждого ТекущийПользовательИБ_ОбъектПодключения Из МассивПользователей_ОбъектПодключения Цикл		
		ДобавитьСтрокуПользователяВТаблицуОбработки(ИнформационнаяБаза, ИнформационнаяБаза_ОбъектПодключения, ТекущийПользовательИБ_ОбъектПодключения);
	КонецЦикла;	
	СортироватьТаблицуДоступныхПользователей();
КонецПроцедуры

&НаСервере
//
//
Процедура СортироватьТаблицуДоступныхПользователей() Экспорт
	ЭтотОбъект.ДоступныеПользователи.Сортировать("ИнформационнаяБаза, Имя");
КонецПроцедуры

&НаСервере
//
//
Процедура ДобавитьСтрокуПользователяВТаблицуОбработки(пИнформационнаяБаза, ИнформационнаяБаза_ОбъектПодключения, ТекущийПользовательИБ_ОбъектПодключения, СтатусМодификации = Неопределено) Экспорт
	НоваяСтрокаДоступныеПользователи = ЭтотОбъект.ДоступныеПользователи.Добавить();	
	НоваяСтрокаДоступныеПользователи.ИнформационнаяБаза = пИнформационнаяБаза;	
	НоваяСтрокаДоступныеПользователи.Имя = ТекущийПользовательИБ_ОбъектПодключения.Имя;
	НоваяСтрокаДоступныеПользователи.ИмяСтарое = НоваяСтрокаДоступныеПользователи.Имя;
	НоваяСтрокаДоступныеПользователи.ПолноеИмя = ТекущийПользовательИБ_ОбъектПодключения.ПолноеИмя;
	НоваяСтрокаДоступныеПользователи.АутентификацияСтандартная = ТекущийПользовательИБ_ОбъектПодключения.АутентификацияСтандартная;
	Если ТекущийПользовательИБ_ОбъектПодключения.ПарольУстановлен Тогда			
		НоваяСтрокаДоступныеПользователи.Пароль = "*********************";
	КонецЕсли;
	НоваяСтрокаДоступныеПользователи.ПоказыватьВСпискеВыбора = ТекущийПользовательИБ_ОбъектПодключения.ПоказыватьВСпискеВыбора;
	НоваяСтрокаДоступныеПользователи.АутентификацияОС = ТекущийПользовательИБ_ОбъектПодключения.АутентификацияОС;
	НоваяСтрокаДоступныеПользователи.ПользовательОС = ТекущийПользовательИБ_ОбъектПодключения.ПользовательОС;		
	Попытка
		НоваяСтрокаДоступныеПользователи.Интерфейс = ТекущийПользовательИБ_ОбъектПодключения.ОсновнойИнтерфейс.Имя;
	Исключение
		НоваяСтрокаДоступныеПользователи.Интерфейс = "";
	КонецПопытки;
	Попытка
		НоваяСтрокаДоступныеПользователи.Язык = ТекущийПользовательИБ_ОбъектПодключения.Язык.Имя;
	Исключение
		НоваяСтрокаДоступныеПользователи.Язык = "";
	КонецПопытки;
	РолиТекущийПользовательИБ_ОбъектПодключения = ТекущийПользовательИБ_ОбъектПодключения.Роли;
	Для Каждого ТекущийЭлементРоли ИЗ РолиТекущийПользовательИБ_ОбъектПодключения Цикл			
		НоваяСтрокаРолиПользователей = ЭтотОбъект.РолиПользователей.Добавить();		
		НоваяСтрокаРолиПользователей.ИнформационнаяБаза = пИнформационнаяБаза;		
		НоваяСтрокаРолиПользователей.ИмяПользователя = НоваяСтрокаДоступныеПользователи.Имя;
		НоваяСтрокаРолиПользователей.Имя = ТекущийЭлементРоли.Синоним;
		НоваяСтрокаРолиПользователей.Идентификатор = ТекущийЭлементРоли.Имя;			
	КонецЦикла;	
	НоваяСтрокаДоступныеПользователи.РежимЗапуска = 0;		
	Если ТекущийПользовательИБ_ОбъектПодключения.РежимЗапуска = ИнформационнаяБаза_ОбъектПодключения.РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
		НоваяСтрокаДоступныеПользователи.РежимЗапуска = 1;
	ИначеЕсли ТекущийПользовательИБ_ОбъектПодключения.РежимЗапуска = ИнформационнаяБаза_ОбъектПодключения.РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		НоваяСтрокаДоступныеПользователи.РежимЗапуска = 2;		
	КонецЕсли;
	НоваяСтрокаДоступныеПользователи.СтатусМодификации = СтатусМодификации;
КонецПроцедуры

&НаСервере
//
//
Процедура ОчиститьТекущиеДанныеПользователя() Экспорт
	ЭтотОбъект.ПарольИзменен = Ложь;
	ЭтотОбъект.ИнформационнаяБаза = "";
	ЭтотОбъект.Имя = "";
	ЭтотОбъект.ИмяСтарое = "";
	ЭтотОбъект.ПолноеИмя = "";
	ЭтотОбъект.АутентификацияСтандартная = Ложь;
	ЭтотОбъект.Пароль = "";		
	ЭтотОбъект.ПоказыватьВСпискеВыбора = Ложь;
	ЭтотОбъект.АутентификацияОС = Ложь;		
	ЭтотОбъект.ПользовательОС = "";
	УбратьПометкиСервер(ЭтотОбъект.ДоступныеРоли);
	УбратьПометкиСервер(ЭтотОбъект.ДоступныеИнтерфейсы);
	УбратьПометкиСервер(ЭтотОбъект.ДоступныеЯзыки);
КонецПроцедуры

&НаСервере
//
//
Процедура УбратьПометкиСервер(ТаблицаЗначений, НомерСтрокиИсключения = -1) Экспорт
	НомерСтроки = 0;
	Для Каждого ТекущаяСтрока Из ТаблицаЗначений Цикл
		НомерСтроки = НомерСтроки + 1;
		Если НомерСтрокиИсключения <> НомерСтроки Тогда
			ТекущаяСтрока.Установить= Ложь;
		КонецЕсли;		
	КонецЦикла;	
КонецПроцедуры

мИмяСобытияВЖурналеРегистрации = "ExternalUsersProcessing";